import {
  OptionalNullable,
  PartialSet,
  PickNotUndefined,
  PickUndefined,
} from 'lib/utils';

// DO NOT USE. This is only included since generator can't import from libs
export type Includeable = {};
export type T = {};

/**
 * Older models which used underscored: true
 * @deprecated
 */
export type ModelTimestamp = {
  created_at: Date;
  updated_at: Date;
};
/**
 * Older model options which used under scored fields.
 * @deprecated
 */
export const defaultModelOptions = {
  underscored: true,
  timestamps: true,
  createdAt: 'created_at',
  updatedAt: 'updated_at',
};

export type Timestamp = {
  createdAt: Date;
  updatedAt: Date;
};
export const camelModelOptions = {
  underscored: false,
  timestamps: true,
};

/**
 * Creates the proper type for a sequelize input create model.
 *
 * GeneratedKeys correspond to keys that will be auto generated by the database and/or sequelize
 * DefaultKeys correspond to keys that will be set to a default value by the database and/or sequelize
 */
export type ToCreateType<
  T,
  // keys generated by db and/or sequelize or keys that should be omitted e.g. `deleted` flags
  GeneratedKeys extends keyof T | never,
  DefaultKeys extends keyof T | never // keys with a default value
> = OptionalNullable<
  Omit<T, keyof Timestamp | keyof ModelTimestamp | GeneratedKeys | DefaultKeys>
> &
  PartialSet<T, DefaultKeys>;

export type ToModifyType<T, OmitKeys extends keyof T> = Partial<
  Omit<T, OmitKeys>
>;

/**
 * Creates the type for sequelize creation type. This is to be used for a model
 * that does NOT have a deleted flag or any flag the captures software specific
 * properties on the model.
 */
export type ToSequelizeModel<T> = PickNotUndefined<T> & PickUndefined<T>;

/**
 * The following are common query parameters used throughout Biz/DAO layers.
 *
 * Note: These should not contain common queries used in Routes layer such as
 * `self`.
 */

/**
 * Allows ordering by a column in ascending or descending order.
 * And will also allow ordering by nulls first or last if needed.
 */
export type Order = [
  string,
  /**
   * Possible sort orders by basic asc or desc, along with nulls first or last.
   */
  (
    | 'asc'
    | 'asc nulls first'
    | 'asc nulls last'
    | 'desc'
    | 'desc nulls first'
    | 'desc nulls last'
  )
];
/**
 * Value provided is used to perform an ILIKE search on fields such as:
 * * title
 * * description
 * * name
 *
 * Dependent on the resource being queried.
 */
export type Search = string;

export type AssociationRestriction = 'include' | 'required';

/**
 * Whether favorites should be included, excluded, or required in the response.
 * * include - favorites will be included in the response
 * * exclude - favorites will be excluded from the response
 * * required - favorites will be required in the response
 * If self=true, favorites will be limited to the current user.
 * Else, favorites will include all users who have favorited the course.
 */
export type Favorites = AssociationRestriction;
/**
 * Whether progress should be included in the response.
 * If self=true, progress will be limited to the current user.
 * Else, progress will all course attempts.
 */
export type Progress = AssociationRestriction;

export type Self = {
  /**
   * Filters result by self. As users with elevated permissions can query data
   * across a tenant(s) and user(s), there may be situations where a user
   * would like to see data related only about themselves.
   *
   * This includes data created by them or data assigned to them.
   */
  self?: boolean;
};

export type CreatedBySelf = {
  /**
   * Similar to self although this limits the query to only resources
   * created by the current user.
   *
   * This will not include items assigned or indirectly accessible by user.
   */
  createdBySelf?: boolean;
};
