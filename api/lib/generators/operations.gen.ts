/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/videos": {
    /**
     * Creates an upload location on our third party API video provider, Mux.
     * The returned entry will have a Mux upload id and a Mux upload url. The
     * Mux upload url is where you should upload the video file to.
     */
    post: operations["createVideo"];
    parameters: {};
  };
  "/users": {
    get: operations["getUsers"];
    post: operations["inviteUsers"];
    parameters: {};
  };
  "/tenants/integrations": {
    get: operations["getIntegrations"];
    parameters: {};
  };
  "/tenants": {
    get: operations["getTenants"];
    post: operations["createTenant"];
    parameters: {};
  };
  "/teams": {
    get: operations["getTeams"];
    post: operations["createTeam"];
    parameters: {};
  };
  "/status": {
    get: operations["getStatus"];
    parameters: {};
  };
  "/stages": {
    get: operations["getStages"];
    post: operations["createStages"];
    parameters: {};
  };
  "/searches": {
    get: operations["getSearches"];
    post: operations["createSearch"];
    parameters: {};
  };
  "/roles": {
    get: operations["getRoles"];
    post: operations["createRole"];
    parameters: {};
  };
  "/prospects/search": {
    get: operations["searchContacts"];
    post: operations["searchQuery"];
    parameters: {};
  };
  "/prospects/contacts": {
    get: operations["contacts"];
    parameters: {};
  };
  "/prospects/companies": {
    get: operations["companies"];
    parameters: {};
  };
  "/pipelineTeams": {
    post: operations["createPipelineTeam"];
    parameters: {};
  };
  "/pipelines": {
    get: operations["getPipelines"];
    post: operations["createPipeline"];
    parameters: {};
  };
  "/organizations/owners": {
    get: operations["getAssociatedOrganizationOwners"];
    parameters: {};
  };
  "/organizations/import": {
    post: operations["import"];
    parameters: {};
  };
  "/organizations/fields": {
    /** Get organizations' field list */
    get: operations["getOrganizationsFields"];
    /** Upsert a(n) organizations field */
    put: operations["upsertOrganizationsField"];
    parameters: {};
  };
  "/organizations/check-relations": {
    get: operations["getRelations"];
    parameters: {};
  };
  "/organizations": {
    get: operations["getOrganizations"];
    post: operations["createOrganization"];
    delete: operations["deleteOrganizations"];
    parameters: {};
  };
  "/notifications/settings": {
    get: operations["getNotificationSettings"];
    post: operations["addNotificationSettings"];
    parameters: {};
  };
  "/notifications/reminder": {
    post: operations["sendReminder"];
    parameters: {};
  };
  "/news/articles": {
    get: operations["getTLDRArticles"];
    post: operations["createTLDRArticle"];
    parameters: {};
  };
  "/news": {
    get: operations["getNews"];
    parameters: {};
  };
  "/naics/upload": {
    post: operations["naicsUpload"];
    parameters: {};
  };
  "/naics": {
    get: operations["getNAICS"];
    parameters: {};
  };
  "/maps/geocode": {
    get: operations["getGoogleAddress"];
    parameters: {};
  };
  "/lessons/related": {
    get: operations["getRelatedLessons"];
    parameters: {};
  };
  "/lessons": {
    get: operations["getLessons"];
    post: operations["createLesson"];
    parameters: {};
  };
  "/labels": {
    get: operations["getAllLabels"];
    post: operations["createLabel"];
    parameters: {};
  };
  "/groups/hierarchy": {
    get: operations["getGroupHierarchy"];
    parameters: {};
  };
  "/groups": {
    get: operations["getGroups"];
    post: operations["createGroup"];
    parameters: {};
  };
  "/files": {
    post: operations["uploadFile"];
    parameters: {};
  };
  "/fields/preference": {
    /** set array of fields preference. */
    post: operations["setFieldPreference"];
    parameters: {};
  };
  "/fields/options": {
    get: operations["getFieldOptions"];
    parameters: {};
  };
  "/fields/default": {
    /** Creates a default fields for the tenant you are logged in for. */
    post: operations["createDefaultFields"];
    parameters: {};
  };
  "/fields": {
    get: operations["getFields"];
    post: operations["createField"];
    parameters: {};
  };
  "/feed/file": {
    get: operations["getFeedFile"];
    parameters: {};
  };
  "/deals/owners": {
    get: operations["getAssociatedDealOwners"];
    parameters: {};
  };
  "/dashboards/default": {
    post: operations["createDefaultDashboards"];
    parameters: {};
  };
  "/dashboards": {
    get: operations["getDashboards"];
    post: operations["createDashboard"];
    parameters: {};
  };
  "/courses": {
    get: operations["getCourses"];
    post: operations["createCourse"];
    parameters: {};
  };
  "/contacts/owners": {
    get: operations["getAssociatedContactOwners"];
    parameters: {};
  };
  "/contacts/import": {
    post: operations["contactImport"];
    parameters: {};
  };
  "/contacts/fields": {
    /** Get contacts' field list */
    get: operations["getContactsFields"];
    /** Upsert a(n) contacts field */
    put: operations["upsertContactsField"];
    parameters: {};
  };
  "/categories": {
    get: operations["getCategories"];
    post: operations["createCategory"];
    parameters: {};
  };
  "/badges": {
    get: operations["getBadges"];
    post: operations["createBadge"];
    parameters: {};
  };
  "/auth/token/introspect": {
    /** Introspects a given token to check its contents and validity */
    post: operations["tokenIntrospection"];
    parameters: {};
  };
  "/auth/password/reset": {
    post: operations["resetPassword"];
    parameters: {};
  };
  "/auth/password/change": {
    put: operations["changePassword"];
    parameters: {};
  };
  "/auth/logout": {
    post: operations["logout"];
    parameters: {};
  };
  "/auth/login": {
    post: operations["login"];
    parameters: {};
  };
  "/auth/invite/accept": {
    post: operations["acceptInvite"];
    parameters: {};
  };
  "/auth/guest/token": {
    /** Create a guest JWT based on the grant type. Guest should have been previously invited by another owner. */
    post: operations["createGuestToken"];
    parameters: {};
  };
  "/auth/context/user": {
    get: operations["getAuthContextUser"];
    parameters: {};
  };
  "/auth/context/tenant": {
    get: operations["getAuthContextTenant"];
    parameters: {};
  };
  "/auth/context/notifications": {
    /**
     * Returns a list of events relevant to the current logged in user.
     * This is either because the user owns the resource, is the assigned user, or owns the resource (if applicable).
     */
    get: operations["getAuthContextNotifications"];
    parameters: {};
  };
  "/analytics": {
    get: operations["getAnalytics"];
    parameters: {};
  };
  "/activities/requests": {
    get: operations["getActivityRequests"];
    post: operations["createActivityRequest"];
    parameters: {};
  };
  "/activities": {
    get: operations["getActivities"];
    post: operations["createActivity"];
    parameters: {};
  };
  "/users/{user_id}/teams": {
    get: operations["getMemberTeams"];
    post: operations["createMemberTeams"];
    parameters: {};
  };
  "/users/{user_id}/password": {
    put: operations["changeUserPassword"];
    parameters: {};
  };
  "/users/{user_id}/impersonation": {
    post: operations["impersonation"];
    parameters: {};
  };
  "/users/{user_id}/avatar": {
    /** Get a user's signed avatar URL. */
    get: operations["getUserAvatar"];
    parameters: {};
  };
  "/users/{user_id}": {
    get: operations["getUser"];
    put: operations["updateUser"];
    parameters: {};
  };
  "/tenants/subdomains/{domain}": {
    get: operations["getTenantBySubdomain"];
    parameters: {};
  };
  "/tenants/{type}/integrations": {
    get: operations["getIntegration"];
    put: operations["updateIntegration"];
    post: operations["createIntegration"];
    delete: operations["deleteIntegration"];
    parameters: {};
  };
  "/tenants/{tenantId}/config": {
    get: operations["getTenantConfig"];
    put: operations["upsertTenantConfig"];
    parameters: {};
  };
  "/tenants/{tenantId}": {
    get: operations["getTenantById"];
    put: operations["updateTenant"];
    parameters: {};
  };
  "/teams/{teamId}/members/{user_id}": {
    /** Use bulk team member creation instead. */
    post: operations["createTeamMember"];
    /** Use bulk team member creation instead. */
    delete: operations["deleteTeamMember"];
    parameters: {};
  };
  "/teams/{teamId}/members": {
    get: operations["getTeamMembers"];
    /**
     * This is a declarative route.
     * It will replace all members of the team with the ones provided.
     */
    put: operations["updateTeamMembers"];
    parameters: {};
  };
  "/teams/{teamId}": {
    get: operations["getTeam"];
    put: operations["updateTeam"];
    delete: operations["deleteTeam"];
    parameters: {};
  };
  "/stages/{stageId}": {
    delete: operations["deleteStage"];
    parameters: {};
  };
  "/searches/{searchId}": {
    put: operations["updateSearch"];
    delete: operations["deleteSearch"];
    parameters: {};
  };
  "/roles/{roleId}/permissions": {
    get: operations["getRolePermissions"];
    /**
     * This is a declarative route.
     * It will replace all permissions of the role with the ones provided.
     */
    put: operations["updateRolePermissions"];
    parameters: {};
  };
  "/roles/{roleId}": {
    get: operations["getRole"];
    put: operations["updateRole"];
    delete: operations["deleteRole"];
    parameters: {};
  };
  "/reports/{report_id}": {
    get: operations["getReport"];
    parameters: {};
  };
  "/providers/mux/{uploadId}": {
    get: operations["getMuxVideoByUploadId"];
    parameters: {};
  };
  "/pipelines/{pipelineId}/teams": {
    get: operations["getPipelineTeam"];
    parameters: {};
  };
  "/pipelines/{pipelineId}/team/{teamId}": {
    delete: operations["deletePipelineTeam"];
    parameters: {};
  };
  "/pipelines/{pipelineId}/default": {
    put: operations["setDefaultPipeline"];
    parameters: {};
  };
  "/pipelines/{pipelineId}/deals": {
    get: operations["getPipelineDealCount"];
    parameters: {};
  };
  "/pipelines/{pipelineId}": {
    get: operations["getPipeline"];
    put: operations["updatePipeline"];
    post: operations["clonePipeline"];
    delete: operations["deletePipeline"];
    parameters: {};
  };
  "/organizations/fields/{field_id}": {
    /** Get a(n) organizations' field list */
    get: operations["getOrganizationsField"];
    /** Remove a(n) organization field */
    delete: operations["removeOrganizationsField"];
    parameters: {};
  };
  "/organizations/{organization_id}/reports/{report_id}": {
    get: operations["getOrganizationReport"];
    put: operations["updateOrganizationReport"];
    delete: operations["deleteOrganizationReport"];
    parameters: {};
  };
  "/organizations/{organization_id}/reports": {
    get: operations["getOrganizationReports"];
    post: operations["createOrganizationReport"];
    parameters: {};
  };
  "/organizations/{organization_id}/owners/{user_id}": {
    /** Add a(n) organization owner */
    post: operations["addOrganizationOwner"];
    /** Remove a(n) organization owner */
    delete: operations["removeOrganizationOwner"];
    parameters: {};
  };
  "/organizations/{organization_id}/owners": {
    /** Get a organization's owner list */
    get: operations["getOrganizationOwners"];
    parameters: {};
  };
  "/organizations/{organization_id}/insights": {
    get: operations["getOrganizationInights"];
    parameters: {};
  };
  "/organizations/{organization_id}/followers/{user_id}": {
    get: operations["organizationIsFollower"];
    post: operations["startFollowingOrganization"];
    delete: operations["stopFollowingOrganization"];
    parameters: {};
  };
  "/organizations/{organization_id}/followers": {
    get: operations["getOrganizationFollowers"];
    parameters: {};
  };
  "/organizations/{organization_id}/fields/{field_id}": {
    /** Get a organization's field */
    get: operations["getOrganizationField"];
    /** Remove a(n) organization field */
    delete: operations["removeOrganizationField"];
    parameters: {};
  };
  "/organizations/{organization_id}/fields": {
    /** Get a organization's field list */
    get: operations["getOrganizationFields"];
    /** Upsert a(n) organization field */
    put: operations["upsertOrganizationField"];
    parameters: {};
  };
  "/organizations/{organization_id}/contacts": {
    get: operations["getOrganizationContacts"];
    parameters: {};
  };
  "/organizations/{organization_id}": {
    get: operations["getOrganizationById"];
    put: operations["updateOrganization"];
    delete: operations["deleteOrganization"];
    parameters: {};
  };
  "/news/articles/{articleId}": {
    delete: operations["deleteArticle"];
    parameters: {};
  };
  "/naics/{code}/{type}/summary": {
    get: operations["getNAICSTypeSummaryByCode"];
    parameters: {};
  };
  "/naics/{code}": {
    get: operations["getNAICSByCode"];
    parameters: {};
  };
  "/merchantReport/{site_id}": {
    get: operations["getMerchantReport"];
    parameters: {};
  };
  "/lessons/{lessonId}/progress": {
    get: operations["getLessonProgress"];
    put: operations["continueLesson"];
    parameters: {};
  };
  "/lessons/{lessonId}/pages/{pageId}/check": {
    /** To be deprecated */
    post: operations["checkPage"];
    parameters: {};
  };
  "/lessons/{lessonId}/pages": {
    put: operations["upsertLessonPages"];
    parameters: {};
  };
  "/lessons/{lessonId}/favorite": {
    /** Toggles a lesson from favorite to not favorite and vice versa */
    put: operations["toggleFavoriteLesson"];
    parameters: {};
  };
  "/lessons/{lessonId}": {
    get: operations["getLessonById"];
    put: operations["updateLessonById"];
    delete: operations["deleteLessonById"];
    parameters: {};
  };
  "/labels/{label_id}": {
    put: operations["updateLabel"];
    delete: operations["removeLabels"];
    parameters: {};
  };
  "/groups/{groupId}": {
    get: operations["getGroup"];
    put: operations["updateGroup"];
    delete: operations["deleteGroup"];
    parameters: {};
  };
  "/fields/{field_id}": {
    get: operations["getFieldById"];
    put: operations["updateField"];
    delete: operations["deleteField"];
    parameters: {};
  };
  "/deals/{deal_id}/products": {
    get: operations["getProductsByDealId"];
    parameters: {};
  };
  "/deals/{deal_id}/position": {
    put: operations["updateDealsPosition"];
    parameters: {};
  };
  "/deals/{deal_id}/owners/{user_id}": {
    /** Add a(n) deal owner */
    post: operations["addDealOwner"];
    /** Remove a(n) deal owner */
    delete: operations["removeDealOwner"];
    parameters: {};
  };
  "/deals/{deal_id}/owners": {
    /** Get a deal's owner list */
    get: operations["getDealOwners"];
    parameters: {};
  };
  "/deals/{deal_id}": {
    delete: operations["deleteDeal"];
    parameters: {};
  };
  "/dashboards/{dashboardId}/components/{componentId}/analytics": {
    put: operations["updateDashboardComponentAnalytic"];
    parameters: {};
  };
  "/dashboards/{dashboardId}/components/{componentId}": {
    put: operations["updateDashboardComponent"];
    delete: operations["deleteDashboardComponent"];
    parameters: {};
  };
  "/dashboards/{dashboardId}/components": {
    get: operations["getDashboardComponents"];
    /** Component must be created using at least with one analytic or componentText */
    post: operations["createDashboardComponent"];
    parameters: {};
  };
  "/dashboards/{dashboardId}": {
    get: operations["getDashboard"];
    put: operations["updateDashboard"];
    delete: operations["deleteDashboard"];
    parameters: {};
  };
  "/courses/{course_id}/quizzes/{quizId}/submit": {
    post: operations["submitCourseQuiz"];
    parameters: {};
  };
  "/courses/{course_id}/progress": {
    get: operations["getCourseProgress"];
    put: operations["continueCourse"];
    parameters: {};
  };
  "/courses/{course_id}/lessons/progress": {
    get: operations["getCourseLessonProgress"];
    parameters: {};
  };
  "/courses/{course_id}/favorite": {
    /** Toggles a course from favorite to not favorite and vice versa */
    put: operations["toggleFavoriteCourse"];
    parameters: {};
  };
  "/courses/{course_id}/contents": {
    get: operations["getCourseContents"];
    post: operations["createCourseContent"];
    parameters: {};
  };
  "/courses/{course_id}": {
    get: operations["getCourseById"];
    delete: operations["deleteCourseById"];
    parameters: {};
  };
  "/contacts/fields/{field_id}": {
    /** Get a(n) contacts' field list */
    get: operations["getContactsField"];
    /** Remove a(n) contact field */
    delete: operations["removeContactsField"];
    parameters: {};
  };
  "/contacts/{contact_id}/owners/{user_id}": {
    /** Add a(n) contact owner */
    post: operations["addContactOwner"];
    /** Remove a(n) contact owner */
    delete: operations["removeContactOwner"];
    parameters: {};
  };
  "/contacts/{contact_id}/owners": {
    /** Get a contact's owner list */
    get: operations["getContactOwners"];
    parameters: {};
  };
  "/contacts/{contact_id}/followers/{user_id}": {
    get: operations["contactIsFollower"];
    post: operations["startFollowingContact"];
    delete: operations["stopFollowingContact"];
    parameters: {};
  };
  "/contacts/{contact_id}/followers": {
    get: operations["getContactFollowers"];
    parameters: {};
  };
  "/contacts/{contact_id}/fields/{field_id}": {
    /** Get a contact's field */
    get: operations["getContactField"];
    /** Remove a(n) contact field */
    delete: operations["removeContactField"];
    parameters: {};
  };
  "/contacts/{contact_id}/fields": {
    /** Get a contact's field list */
    get: operations["getContactFields"];
    /** Upsert a(n) contact field */
    put: operations["upsertContactField"];
    parameters: {};
  };
  "/components/{componentId}": {
    get: operations["getComponent"];
    put: operations["updateComponent"];
    parameters: {};
  };
  "/categories/{categoryId}/videos": {
    get: operations["getCategoryVideos"];
    parameters: {};
  };
  "/categories/{categoryId}/lessons": {
    get: operations["getCategoryLessons"];
    parameters: {};
  };
  "/categories/{categoryId}/courses": {
    get: operations["getCategoryCourses"];
    parameters: {};
  };
  "/categories/{categoryId}": {
    get: operations["getCategory"];
    put: operations["updateCategory"];
    delete: operations["deleteCategory"];
    parameters: {};
  };
  "/badges/{badgeId}": {
    get: operations["getBadge"];
    put: operations["updateBadge"];
    delete: operations["deleteBadge"];
    parameters: {};
  };
  "/avatars/{avatar_id}": {
    get: operations["getAvatar"];
    parameters: {};
  };
  "/analytics/{analyticId}": {
    get: operations["getAnalytic"];
    parameters: {};
  };
  "/activities/requests/{activityRequestId}": {
    get: operations["getActivityRequest"];
    put: operations["updateActivityRequest"];
    delete: operations["deleteActivityRequest"];
    parameters: {};
  };
  "/activities/{activityId}/owners/{userId}": {
    delete: operations["deleteActivityOwner"];
    parameters: {};
  };
  "/activities/{activityId}/complete": {
    put: operations["completeActivity"];
    parameters: {};
  };
  "/activities/{activityId}/cancel": {
    put: operations["cancelActivity"];
    parameters: {};
  };
  "/activities/{activityId}": {
    get: operations["getActivityById"];
    put: operations["updateActivity"];
    post: operations["createActivityOwners"];
    delete: operations["deleteActivity"];
    parameters: {};
  };
}

export interface components {
  schemas: {
    /** ActivityAttrs */
    ActivityAttrs: {
      /** ActivityAttrs.id */
      id: string;
      /** ActivityAttrs.name */
      name: string;
      /** ActivityAttrs.type */
      type: string;
      /** ActivityAttrs.assigned_user_id */
      assigned_user_id: string;
      /** ActivityAttrs.modified_user_id */
      modified_user_id: string;
      /** ActivityAttrs.created_by */
      created_by: string;
      /** ActivityAttrs.organization_id */
      organization_id?: string;
      /** ActivityAttrs.deal_id */
      deal_id?: string;
      /** ActivityAttrs.contact_id */
      contact_id?: string;
      start_date: components["schemas"]["Date"];
      end_date: components["schemas"]["Date"];
      /** ActivityAttrs.guests */
      guests: string;
      /** ActivityAttrs.location */
      location?: string;
      /** ActivityAttrs.conference_link */
      conference_link?: string;
      /** ActivityAttrs.description */
      description?: string;
      /** ActivityAttrs.free_busy */
      free_busy: string;
      /** ActivityAttrs.notes */
      notes?: string;
      /** ActivityAttrs.rich_note */
      rich_note?: { [key: string]: unknown };
      /** ActivityAttrs.owner */
      owner?: string;
      /** ActivityAttrs.lead */
      lead?: string;
      /** ActivityAttrs.done */
      done: boolean;
      /** ActivityAttrs.priority */
      priority: boolean;
      /** ActivityAttrs.online_meet */
      online_meet: boolean;
      /** ActivityAttrs.feed_id */
      feed_id: string;
      /** ActivityAttrs.tenant_id */
      tenant_id: string;
      deleted_on?: components["schemas"]["Date"] | null;
      canceledOn?: components["schemas"]["Date"];
    };
    /** ActivityAttr */
    ActivityAttr: {
      /**
       * ActivityAttr.id
       * Format: uuid
       */
      id: string;
      /** ActivityAttr.name */
      name: string;
      /** ActivityAttr.type */
      type: string;
      /**
       * ActivityAttr.assigned_user_id
       * Format: uuid
       */
      assigned_user_id: string;
      /**
       * ActivityAttr.modified_user_id
       * Format: uuid
       */
      modified_user_id: string;
      /**
       * ActivityAttr.created_by
       * Format: uuid
       */
      created_by: string;
      /**
       * ActivityAttr.organization_id
       * Format: uuid
       */
      organization_id?: string;
      /**
       * ActivityAttr.deal_id
       * Format: uuid
       */
      deal_id?: string;
      /** ActivityAttr.contact_id */
      contact_id?: string;
      start_date: components["schemas"]["Date"];
      end_date: components["schemas"]["Date"];
      /** ActivityAttr.guests */
      guests: string;
      /** ActivityAttr.location */
      location?: string;
      /** ActivityAttr.conference_link */
      conference_link?: string;
      /** ActivityAttr.description */
      description?: string;
      /** ActivityAttr.free_busy */
      free_busy: string;
      /** ActivityAttr.notes */
      notes?: string;
      /** ActivityAttr.rich_note */
      rich_note?: { [key: string]: unknown };
      /** ActivityAttr.owner */
      owner?: string;
      /** ActivityAttr.lead */
      lead?: string;
      /** ActivityAttr.done */
      done: boolean;
      /** ActivityAttr.priority */
      priority: boolean;
      /** ActivityAttr.online_meet */
      online_meet: boolean;
      /**
       * ActivityAttr.feed_id
       * Format: uuid
       */
      feed_id: string;
      /**
       * ActivityAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      deleted_on?: components["schemas"]["Date"] | null;
      canceledOn?: components["schemas"]["Date"];
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** ActivityModifyBiz */
    ActivityModifyBiz: {
      /** ActivityModifyBiz.name */
      name?: string;
      /** ActivityModifyBiz.type */
      type?: string;
      /**
       * ActivityModifyBiz.assigned_user_id
       * Format: uuid
       */
      assigned_user_id?: string;
      /**
       * ActivityModifyBiz.modified_user_id
       * Format: uuid
       */
      modified_user_id?: string;
      /**
       * ActivityModifyBiz.created_by
       * Format: uuid
       */
      created_by?: string;
      /**
       * ActivityModifyBiz.organization_id
       * Format: uuid
       */
      organization_id?: string;
      /**
       * ActivityModifyBiz.deal_id
       * Format: uuid
       */
      deal_id?: string;
      /** ActivityModifyBiz.contact_id */
      contact_id?: string;
      start_date?: components["schemas"]["Date"];
      end_date?: components["schemas"]["Date"];
      /** ActivityModifyBiz.guests */
      guests?: string;
      /** ActivityModifyBiz.location */
      location?: string;
      /** ActivityModifyBiz.conference_link */
      conference_link?: string;
      /** ActivityModifyBiz.description */
      description?: string;
      /** ActivityModifyBiz.free_busy */
      free_busy?: string;
      /** ActivityModifyBiz.notes */
      notes?: string;
      /** ActivityModifyBiz.rich_note */
      rich_note?: { [key: string]: unknown };
      /** ActivityModifyBiz.lead */
      lead?: string;
      /** ActivityModifyBiz.done */
      done?: boolean;
      /** ActivityModifyBiz.priority */
      priority?: boolean;
      /** ActivityModifyBiz.online_meet */
      online_meet?: boolean;
    };
    /** ActivityQueryBiz */
    ActivityQueryBiz: {
      /** ActivityQueryBiz.organizationId */
      organizationId?: string;
      /** ActivityQueryBiz.contactId */
      contactId?: string;
      /** ActivityQueryBiz.dealId */
      dealId?: string;
      order?: components["schemas"]["Order"];
      /** ActivityQueryBiz.type */
      type?: string;
      /** ActivityQueryBiz.done */
      done?: boolean;
      startDate?: components["schemas"]["Date"];
      endDate?: components["schemas"]["Date"];
      /** ActivityQueryBiz.self */
      self?: boolean;
    };
    /** ActivityOwnerAttr */
    ActivityOwnerAttr: {
      /**
       * ActivityOwnerAttr.userId
       * Format: uuid
       */
      userId: string;
      /**
       * ActivityOwnerAttr.activityId
       * Format: uuid
       */
      activityId: string;
    };
    /** ActivityOwnerCreateBiz */
    ActivityOwnerCreateBiz: {
      /**
       * ActivityOwnerCreateBiz.userId
       * Format: uuid
       */
      userId: string;
    };
    /** ActivityRequestAvailability */
    ActivityRequestAvailability: {
      /** ActivityRequestAvailability.days */
      days: (
        | "monday"
        | "tuesday"
        | "wednesday"
        | "thursday"
        | "friday"
        | "saturday"
        | "sunday"
      )[];
      /** ActivityRequestAvailability.timePeriods */
      timePeriods: ("morning" | "afternoon" | "evening")[];
    };
    /** ActivityRequestAttr */
    ActivityRequestAttr: {
      /**
       * ActivityRequestAttr.activityRequestId
       * Format: uuid
       */
      activityRequestId: string;
      /**
       * ActivityRequestAttr.organizationId
       * Format: uuid
       */
      organizationId: string;
      /**
       * ActivityRequestAttr.availability
       * @description This is the available time of the contact, not the owner. Availability can
       * span across multiple days and multiple friendly time ranges. i.e. a MWF with
       * morning and afternoon.
       */
      availability: {
        /** ActivityRequestAttr.availability.days */
        days: (
          | "monday"
          | "tuesday"
          | "wednesday"
          | "thursday"
          | "friday"
          | "saturday"
          | "sunday"
        )[];
        /** ActivityRequestAttr.availability.timePeriods */
        timePeriods: ("morning" | "afternoon" | "evening")[];
      };
      /** ActivityRequestAttr.notes */
      notes?: string | null;
      /**
       * ActivityRequestAttr.createdByContactId
       * Format: uuid
       */
      createdByContactId: string;
      /**
       * ActivityRequestAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
    };
    /** ActivityRequestCreateBiz */
    ActivityRequestCreateBiz: {
      /** ActivityRequestCreateBiz.notes */
      notes?: string | null;
      /**
       * ActivityRequestCreateBiz.availability
       * @description This is the available time of the contact, not the owner. Availability can
       * span across multiple days and multiple friendly time ranges. i.e. a MWF with
       * morning and afternoon.
       */
      availability: {
        /** ActivityRequestCreateBiz.availability.days */
        days: (
          | "monday"
          | "tuesday"
          | "wednesday"
          | "thursday"
          | "friday"
          | "saturday"
          | "sunday"
        )[];
        /** ActivityRequestCreateBiz.availability.timePeriods */
        timePeriods: ("morning" | "afternoon" | "evening")[];
      };
    };
    /** ActivityRequestModifyBiz */
    ActivityRequestModifyBiz: {
      /** ActivityRequestModifyBiz.notes */
      notes?: string | null;
      /**
       * ActivityRequestModifyBiz.availability
       * @description This is the available time of the contact, not the owner. Availability can
       * span across multiple days and multiple friendly time ranges. i.e. a MWF with
       * morning and afternoon.
       */
      availability?: {
        /** ActivityRequestModifyBiz.availability.days */
        days: (
          | "monday"
          | "tuesday"
          | "wednesday"
          | "thursday"
          | "friday"
          | "saturday"
          | "sunday"
        )[];
        /** ActivityRequestModifyBiz.availability.timePeriods */
        timePeriods: ("morning" | "afternoon" | "evening")[];
      };
    };
    /** AnalyticDisplayType */
    AnalyticDisplayType:
      | "kpi_standard"
      | "kpi_scorecard"
      | "kpi_growth_index"
      | "kpi_rankings"
      | "kpi_basic"
      | "chart_column"
      | "chart_donut"
      | "chart_pie"
      | "chart_bar"
      | "chart_line"
      | "chart_table"
      | "chart_funnel"
      | "chart_area"
      | "chart_heat";
    /** AnalyticType */
    AnalyticType:
      | "AssignedUser"
      | "CreatedBy"
      | "Contact"
      | "Course"
      | "CourseProgress"
      | "Deal"
      | "Lesson"
      | "LessonProgress"
      | "Organization"
      | "Category"
      | "DealStage"
      | "Tenant"
      | "TenantDealStage"
      | "User"
      | "Training"
      | "Activities"
      | "Notes"
      | "Product";
    /** AnalyticGranularity */
    AnalyticGranularity: "day" | "week" | "month" | "year";
    /** AnalyticRelativeTimeRange */
    AnalyticRelativeTimeRange:
      | (
          | "this week"
          | "this month"
          | "this year"
          | "today"
          | "yesterday"
          | "last week"
          | "last month"
          | "last year"
        )
      | `last ${number} ${components["schemas"]["AnalyticGranularity"]}`
      | `from ${number} ${components["schemas"]["AnalyticGranularity"]} ago to now`
    /** AnalyticFilterOperator */
    AnalyticFilterOperator:
      | "set"
      | "notSet"
      | "equals"
      | "notEquals"
      | "contains"
      | "notContains"
      | "startsWith"
      | "endsWith"
      | "gt"
      | "gte"
      | "lt"
      | "lte"
      | "beforeDate"
      | "afterDate";
    /** AnalyticOrder.[] */
    AnalyticOrder: [string, "asc" | "desc"][];
    /** AnalyticDateRange */
    AnalyticDateRange:
  | components["schemas"]["AnalyticRelativeTimeRange"]
  | [string,string];
    /** AnalyticCompareDateRange */
    
    AnalyticCompareDateRange:
      | [components["schemas"]["AnalyticDateRange"]]
      | [components["schemas"]["AnalyticDateRange"],components["schemas"]["AnalyticDateRange"]];
    
    /** AnalyticTimeDimension */
    AnalyticTimeDimension:
      | []
      | [{
        dateRange: components["schemas"]["AnalyticDateRange"];
        /** AnalyticTimeDimension.[].dimension */
        dimension: string;
        granularity?: components["schemas"]["AnalyticGranularity"];
     }]
      | [{
        compareDateRange: components["schemas"]["AnalyticCompareDateRange"];
        /** AnalyticTimeDimension.[].dimension */
        dimension: string;
        granularity?: components["schemas"]["AnalyticGranularity"];
     }];
    /** AnalyticAttr */
    AnalyticAttr: {
      /**
       * AnalyticAttr.id
       * Format: uuid
       */
      id: string;
      /** AnalyticAttr.name */
      name: string;
      /** AnalyticAttr.type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** AnalyticAttr.relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** AnalyticAttr.displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** AnalyticAttr.icon */
      icon: string;
      /**
       * AnalyticAttr.createdById
       * Format: uuid
       */
      createdById: string;
      /**
       * AnalyticAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
      /** AnalyticAttr.isMulti */
      isMulti: boolean;
      /** AnalyticAttr.dimensions */
      dimensions: string[];
      /** AnalyticAttr.limit */
      limit: number;
      /** AnalyticAttr.measures */
      measures: string[];
      /** AnalyticAttr.order */
      order: [string, "asc" | "desc"][];
      /** AnalyticAttr.segments */
      segments: string[];
      /** AnalyticAttr.timeDimensions */
      timeDimensions: []
        | [
            {
              dateRange: components["schemas"]["AnalyticDateRange"];
              /** AnalyticAttr.timeDimensions.0.dimension */
              dimension: string;
              granularity?: components["schemas"]["AnalyticGranularity"];
            }
          ]
        | [
            {
              compareDateRange: components["schemas"]["AnalyticCompareDateRange"];
              /** AnalyticAttr.timeDimensions.0.dimension */
              dimension: string;
              granularity?: components["schemas"]["AnalyticGranularity"];
            }
          ];
      /** AnalyticAttr.filters */
      filters: (
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "set";
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "notSet";
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "equals";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "notEquals";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "contains";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "notContains";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "startsWith";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "endsWith";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "gt";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "gte";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "lt";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "lte";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "beforeDate";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticAttr.filters.[].member */
            member: string;
            /** AnalyticAttr.filters.[].operator */
            operator: "afterDate";
            /** AnalyticAttr.filters.[].values */
            values: string[];
          }
      )[];
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** AnalyticQueryKeys */
    AnalyticQueryKeys:
      | "filters"
      | "isMulti"
      | "dimensions"
      | "limit"
      | "measures"
      | "order"
      | "segments"
      | "timeDimensions";
    /** AnalyticCreateBiz */
    AnalyticCreateBiz: {
      /** AnalyticCreateBiz.name */
      name: string;
      /** AnalyticCreateBiz.type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** AnalyticCreateBiz.filters */
      filters?: (
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "set";
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "notSet";
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "equals";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "notEquals";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "contains";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "notContains";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "startsWith";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "endsWith";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "gt";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "gte";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "lt";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "lte";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "beforeDate";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticCreateBiz.filters.[].member */
            member: string;
            /** AnalyticCreateBiz.filters.[].operator */
            operator: "afterDate";
            /** AnalyticCreateBiz.filters.[].values */
            values: string[];
          }
      )[];
      /** AnalyticCreateBiz.isMulti */
      isMulti?: boolean;
      /** AnalyticCreateBiz.dimensions */
      dimensions?: string[];
      /** AnalyticCreateBiz.limit */
      limit?: number;
      /** AnalyticCreateBiz.measures */
      measures?: string[];
      order?: components["schemas"]["AnalyticOrder"];
      /** AnalyticCreateBiz.segments */
      segments?: string[];
      timeDimensions?: components["schemas"]["AnalyticTimeDimension"];
      /** AnalyticCreateBiz.relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** AnalyticCreateBiz.displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** AnalyticCreateBiz.icon */
      icon: string;
    };
    /** AnalyticModifyBiz */
    AnalyticModifyBiz: {
      /** AnalyticModifyBiz.name */
      name?: string;
      /** AnalyticModifyBiz.type */
      type?:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** AnalyticModifyBiz.filters */
      filters?: (
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "set";
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "notSet";
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "equals";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "notEquals";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "contains";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "notContains";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "startsWith";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "endsWith";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "gt";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "gte";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "lt";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "lte";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "beforeDate";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
        | {
            /** AnalyticModifyBiz.filters.[].member */
            member: string;
            /** AnalyticModifyBiz.filters.[].operator */
            operator: "afterDate";
            /** AnalyticModifyBiz.filters.[].values */
            values: string[];
          }
      )[];
      /** AnalyticModifyBiz.isMulti */
      isMulti?: boolean;
      /** AnalyticModifyBiz.dimensions */
      dimensions?: string[];
      /** AnalyticModifyBiz.limit */
      limit?: number;
      /** AnalyticModifyBiz.measures */
      measures?: string[];
      order?: components["schemas"]["AnalyticOrder"];
      /** AnalyticModifyBiz.segments */
      segments?: string[];
      timeDimensions?: components["schemas"]["AnalyticTimeDimension"];
      /** AnalyticModifyBiz.relatedTypes */
      relatedTypes?: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** AnalyticModifyBiz.displayType */
      displayType?:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** AnalyticModifyBiz.icon */
      icon?: string;
    };
    /** ArticleAttr */
    ArticleAttr: {
      /**
       * ArticleAttr.id
       * Format: string / md5 hash
       */
      id: string;
      /**
       * ArticleAttr.tenant_id
       * Format: uuid
       */
      tenant_id?: string;
      /**
       * ArticleAttr.user_id
       * Format: uuid
       */
      user_id?: string;
      /** ArticleAttr.title */
      title: string | null;
      /** ArticleAttr.blurb */
      blurb?: string;
      /** ArticleAttr.author */
      author?: string;
      /** ArticleAttr.body */
      body?: string;
      published: components["schemas"]["Date"];
      /** ArticleAttr.url */
      url: string;
      /** ArticleAttr.image */
      image?: string;
      /** ArticleAttr.source */
      source?: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** ArticleQueryBiz */
    ArticleQueryBiz: {
      /** ArticleQueryBiz.search */
      search?: string;
      /** ArticleQueryBiz.order */
      order: unknown;
    };
    /** ArticleModifyBiz */
    ArticleModifyBiz: {
      /**
       * ArticleModifyBiz.tenant_id
       * Format: uuid
       */
      tenant_id?: string;
      /**
       * ArticleModifyBiz.user_id
       * Format: uuid
       */
      user_id?: string;
      /** ArticleModifyBiz.title */
      title?: string | null;
      /** ArticleModifyBiz.blurb */
      blurb?: string;
      /** ArticleModifyBiz.author */
      author?: string;
      /** ArticleModifyBiz.body */
      body?: string;
      published: components["schemas"]["Date"];
      /** ArticleModifyBiz.url */
      url: string;
      /** ArticleModifyBiz.image */
      image?: string;
      /** ArticleModifyBiz.source */
      source?: string;
    };
    /** AuditAction */
    AuditAction: "create" | "read" | "update" | "delete";
    /** AuditAssociation */
    AuditAssociation: "owner" | "activityRequest" | "guest" | "mention";
    /** AuditResourceType */
    AuditResourceType:
      | "activityRequest"
      | "activity"
      | "contact"
      | "contactOwner"
      | "comment"
      | "deal"
      | "dealOwner"
      | "note"
      | "organization"
      | "organizationOwner"
      | "user";
    /** AuditUserType */
    AuditUserType: "contact" | "user";
    /** AuditResource */
    AuditResource: {
      /** AuditResource.resourceId */
      resourceId: string;
      /** AuditResource.resourceIdType */
      resourceIdType: "string" | "number";
      resourceType: components["schemas"]["AuditResourceType"];
      /** AuditResource.resourceDisplayValue */
      resourceDisplayValue: string;
    };
    /** AuditChangeLogUpdate */
    AuditChangeLogUpdate: {
      /** AuditChangeLogUpdate.displayValue */
      displayValue: string;
      /** AuditChangeLogUpdate.from */
      from: unknown;
      /** AuditChangeLogUpdate.fromDisplayValue */
      fromDisplayValue: unknown;
      /** AuditChangeLogUpdate.to */
      to: unknown;
      /** AuditChangeLogUpdate.toDisplayValue */
      toDisplayValue: unknown;
    };
    /** AuditChangeLog */
    AuditChangeLog: {
      /** AuditChangeLog.association */
      association?: {
        type: components["schemas"]["AuditAssociation"];
        parent: components["schemas"]["AuditResource"];
        /** AuditChangeLog.association.associations */
        associations: {
          /** AuditChangeLog.association.associations.[].displayValue */
          displayValue: string;
          /** AuditChangeLog.association.associations.[].id */
          id: string;
          type: components["schemas"]["AuditUserType"];
        }[];
      };
      /** AuditChangeLog.update */
      update?: { [key: string]: components["schemas"]["AuditChangeLogUpdate"] };
    };
    /** AuditAttr */
    AuditAttr: {
      /** AuditAttr.resourceId */
      resourceId: string;
      /** AuditAttr.resourceIdType */
      resourceIdType: "string" | "number";
      /** AuditAttr.resourceType */
      resourceType:
        | "activityRequest"
        | "activity"
        | "contact"
        | "contactOwner"
        | "comment"
        | "deal"
        | "dealOwner"
        | "note"
        | "organization"
        | "organizationOwner"
        | "user";
      /** AuditAttr.resourceDisplayValue */
      resourceDisplayValue: string;
      /** AuditAttr.auditId */
      auditId: number;
      /** AuditAttr.actorId */
      actorId: string;
      /** AuditAttr.actorType */
      actorType: "contact" | "user";
      /** AuditAttr.actorDisplayValue */
      actorDisplayValue: string;
      /** AuditAttr.action */
      action: "create" | "read" | "update" | "delete";
      changeLog?: components["schemas"]["AuditChangeLog"];
    };
    /** AuditNotificationAttr */
    AuditNotificationAttr: {
      /** AuditNotificationAttr.auditNotificationId */
      auditNotificationId: number;
      /** AuditNotificationAttr.auditId */
      auditId: number;
      /** AuditNotificationAttr.userId */
      userId: string;
      /** AuditNotificationAttr.userDisplayValue */
      userDisplayValue: string;
      /** AuditNotificationAttr.acknowledged */
      acknowledged: boolean;
    };
    /** BadgeAttr */
    BadgeAttr: {
      /**
       * BadgeAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * BadgeAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** BadgeAttr.name */
      name?: string | null;
      /** BadgeAttr.description */
      description?: string | null;
      /** BadgeAttr.status */
      status?: string | null;
      /** BadgeAttr.badge_url */
      badge_url?: string | null;
      /** BadgeAttr.deleted */
      deleted: boolean;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** BadgeQueryBiz */
    BadgeQueryBiz: {
      /** BadgeQueryBiz.search */
      search?: string;
      /** BadgeQueryBiz.order */
      order: unknown;
    };
    /** BadgeModifyBiz */
    BadgeModifyBiz: {
      /** BadgeModifyBiz.name */
      name?: string | null;
      /** BadgeModifyBiz.description */
      description?: string | null;
      /** BadgeModifyBiz.status */
      status?: string | null;
      /** BadgeModifyBiz.badge_url */
      badge_url?: string | null;
    };
    /** CategoryCourseAttr */
    CategoryCourseAttr: {
      /** CategoryCourseAttr.courseId */
      courseId: string;
      /** CategoryCourseAttr.categoryId */
      categoryId: number;
    };
    /** CategoryCourseCreateBiz */
    CategoryCourseCreateBiz: {
      /** CategoryCourseCreateBiz.courseId */
      courseId: string;
      /** CategoryCourseCreateBiz.categoryId */
      categoryId: number;
    };
    /** CategoryAttr */
    CategoryAttr: {
      /** CategoryAttr.id */
      id: number;
      /**
       * CategoryAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** CategoryAttr.title */
      title?: string | null;
      /** CategoryAttr.description */
      description?: string | null;
      /** CategoryAttr.status */
      status?: string | null;
      /** CategoryAttr.logo */
      logo?: string | null;
      /** CategoryAttr.icon */
      icon?: string | null;
      /** CategoryAttr.position */
      position?: number | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** GetCategoryTrainingQuery */
    GetCategoryTrainingQuery: {
      /** GetCategoryTrainingQuery.categoryIds, GetCategoryTrainingQuery.categoryIds.[] */
      categoryIds?: number[];
      favorites?: components["schemas"]["AssociationRestriction"];
      /** GetCategoryTrainingQuery.order, GetCategoryTrainingQuery.order.[] */
      order?: components["schemas"]["Order"][];
      progress?: components["schemas"]["AssociationRestriction"];
      /** GetCategoryTrainingQuery.search */
      search?: string;
    };
    /** GetCategoryCoursesQuery */
    GetCategoryCoursesQuery: {
      /** GetCategoryCoursesQuery.categoryIds, GetCategoryCoursesQuery.categoryIds.[] */
      categoryIds?: number[];
      favorites?: components["schemas"]["AssociationRestriction"];
      /** GetCategoryCoursesQuery.order, GetCategoryCoursesQuery.order.[] */
      order?: components["schemas"]["Order"][];
      progress?: components["schemas"]["AssociationRestriction"];
      /** GetCategoryCoursesQuery.search */
      search?: string;
    };
    /** GetCategoryLessonsQuery */
    GetCategoryLessonsQuery: components["schemas"]["GetCategoryTrainingQuery"] & {
      /** random */
      random?: boolean;
    };
    /** GetCategoriesQuery */
    GetCategoriesQuery: {
      /** GetCategoriesQuery.extraData, GetCategoriesQuery.extraData.[] */
      extraData?: string[];
      order?: components["schemas"]["Order"];
      /** GetCategoriesQuery.search */
      search?: string;
    };
    /** CategoryCreateBiz */
    CategoryCreateBiz: {
      /** CategoryCreateBiz.title */
      title: string;
      /** CategoryCreateBiz.logo */
      logo?: string | null;
      /** CategoryCreateBiz.icon */
      icon?: string | null;
      /** CategoryCreateBiz.description */
      description?: string | null;
    };
    /** CategoryModifyBiz */
    CategoryModifyBiz: {
      /** CategoryModifyBiz.title */
      title: string;
      /** CategoryModifyBiz.logo */
      logo?: string | null;
      /** CategoryModifyBiz.icon */
      icon?: string | null;
      /** CategoryModifyBiz.description */
      description?: string | null;
    };
    /** ComponentAttr */
    ComponentAttr: {
      /**
       * ComponentAttr.id
       * Format: uuid
       */
      id: string;
      /** ComponentAttr.name */
      name: string;
      /** ComponentAttr.enabled */
      enabled: boolean;
      /**
       * ComponentAttr.analyticId
       * Format: uuid
       */
      analyticId?: string | null;
      /**
       * ComponentAttr.componentTextId
       * Format: uuid
       */
      componentTextId?: string | null;
      /**
       * ComponentAttr.createdById
       * Format: uuid
       */
      createdById: string;
      /**
       * ComponentAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** ComponentQueryBiz */
    ComponentQueryBiz: {
      /** ComponentQueryBiz.enabled */
      enabled?: boolean;
    };
    /** ComponentCreateBiz */
    ComponentCreateBiz: {
      /** ComponentCreateBiz.name */
      name: string;
      /** ComponentCreateBiz.enabled */
      enabled?: boolean;
      /**
       * ComponentCreateBiz.analyticId
       * Format: uuid
       */
      analyticId?: string | null;
      /**
       * ComponentCreateBiz.componentTextId
       * Format: uuid
       */
      componentTextId?: string | null;
    };
    /** ComponentModifyBiz */
    ComponentModifyBiz: {
      /** ComponentModifyBiz.name */
      name: string;
      /** ComponentModifyBiz.enabled */
      enabled: boolean;
    };
    /** ComponentCreateWithAssociationBizHelper */
    ComponentCreateWithAssociationBizHelper: {
      /** ComponentCreateWithAssociationBizHelper.component */
      component: {
        /** ComponentCreateWithAssociationBizHelper.component.name */
        name: string;
        /** ComponentCreateWithAssociationBizHelper.component.enabled */
        enabled?: boolean;
        /** ComponentCreateWithAssociationBizHelper.component.analyticId */
        analyticId?: string;
        /** ComponentCreateWithAssociationBizHelper.component.componentTextId */
        componentTextId?: string;
      };
    };
    /** ComponentCreateWithAssociationBiz */
    ComponentCreateWithAssociationBiz: {
      analytic?: components["schemas"]["AnalyticCreateBiz"];
      /** ComponentCreateWithAssociationBiz.componentText */
      componentText?: {
        /** ComponentCreateWithAssociationBiz.componentText.icon */
        icon?: string | null;
        /** ComponentCreateWithAssociationBiz.componentText.source */
        source?: ("rpmg" | "spGlobal" | "fasterPayments" | "custom") | null;
        /** ComponentCreateWithAssociationBiz.componentText.position */
        position?: ("left" | "right" | "center" | "top" | "bottom") | null;
        /** ComponentCreateWithAssociationBiz.componentText.iconLabel */
        iconLabel?: string | null;
        /** ComponentCreateWithAssociationBiz.componentText.type */
        type:
          | "donut"
          | "calendar"
          | "percentText"
          | "iconText"
          | "donutSelection"
          | "bar";
        /** ComponentCreateWithAssociationBiz.componentText.text */
        text: string;
        request?: components["schemas"]["ComponentTextRequest"];
      };
      /** ComponentCreateWithAssociationBiz.component */
      component: {
        /** ComponentCreateWithAssociationBiz.component.name */
        name: string;
        /** ComponentCreateWithAssociationBiz.component.enabled */
        enabled?: boolean;
        /** ComponentCreateWithAssociationBiz.component.analyticId */
        analyticId?: string;
        /** ComponentCreateWithAssociationBiz.component.componentTextId */
        componentTextId?: string;
      };
    };
    /** ComponentTextSource */
    ComponentTextSource: "rpmg" | "spGlobal" | "fasterPayments" | "custom";
    /** ComponentTextType */
    ComponentTextType:
      | "donut"
      | "calendar"
      | "percentText"
      | "iconText"
      | "donutSelection"
      | "bar";
    /** ComponentTextPosition */
    ComponentTextPosition: "left" | "right" | "center" | "top" | "bottom";
    /** ComponentTextRequest */
    ComponentTextRequest: {
      /** ComponentTextRequest.method */
      method: "GET" | "POST" | "PUT" | "DELETE";
      /** ComponentTextRequest.path */
      path: string;
      /** ComponentTextRequest.query */
      query?: {
        [key: string]: string | number | boolean;
      };
      /** ComponentTextRequest.responseOptionKey */
      responseOptionKey?: string;
    };
    /** ComponentTextAttr */
    ComponentTextAttr: {
      /**
       * ComponentTextAttr.id
       * Format: uuid
       */
      id: string;
      /** ComponentTextAttr.text */
      text: string;
      /** ComponentTextAttr.position */
      position?: ("left" | "right" | "center" | "top" | "bottom") | null;
      /** ComponentTextAttr.icon */
      icon?: string | null;
      /** ComponentTextAttr.iconLabel */
      iconLabel?: string | null;
      request?: components["schemas"]["ComponentTextRequest"];
      /** ComponentTextAttr.source */
      source?: ("rpmg" | "spGlobal" | "fasterPayments" | "custom") | null;
      /** ComponentTextAttr.type */
      type:
        | "donut"
        | "calendar"
        | "percentText"
        | "iconText"
        | "donutSelection"
        | "bar";
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** ComponentTextQueryBiz */
    ComponentTextQueryBiz: {
      /** ComponentTextQueryBiz.source */
      source?: "rpmg" | "spGlobal" | "fasterPayments" | "custom";
    };
    /** ComponentTextCreateBiz */
    ComponentTextCreateBiz: {
      /** ComponentTextCreateBiz.icon */
      icon?: string | null;
      /** ComponentTextCreateBiz.source */
      source?: ("rpmg" | "spGlobal" | "fasterPayments" | "custom") | null;
      /** ComponentTextCreateBiz.position */
      position?: ("left" | "right" | "center" | "top" | "bottom") | null;
      /** ComponentTextCreateBiz.iconLabel */
      iconLabel?: string | null;
      /** ComponentTextCreateBiz.type */
      type:
        | "donut"
        | "calendar"
        | "percentText"
        | "iconText"
        | "donutSelection"
        | "bar";
      /** ComponentTextCreateBiz.text */
      text: string;
      request?: components["schemas"]["ComponentTextRequest"];
    };
    /** ComponentTextModifyBiz */
    ComponentTextModifyBiz: {
      /** ComponentTextModifyBiz.icon */
      icon?: string | null;
      /** ComponentTextModifyBiz.source */
      source?: ("rpmg" | "spGlobal" | "fasterPayments" | "custom") | null;
      /** ComponentTextModifyBiz.position */
      position?: ("left" | "right" | "center" | "top" | "bottom") | null;
      /** ComponentTextModifyBiz.iconLabel */
      iconLabel?: string | null;
      /** ComponentTextModifyBiz.type */
      type?:
        | "donut"
        | "calendar"
        | "percentText"
        | "iconText"
        | "donutSelection"
        | "bar";
      /** ComponentTextModifyBiz.text */
      text?: string;
      request?: components["schemas"]["ComponentTextRequest"];
    };
    /** ContactAttr */
    ContactAttr: {
      /**
       * ContactAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * ContactAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      date_entered: components["schemas"]["Date"];
      date_modified: components["schemas"]["Date"];
      /**
       * ContactAttr.modified_user_id
       * Format: uuid
       */
      modified_user_id?: string;
      /**
       * ContactAttr.created_by
       * Format: uuid
       */
      created_by: string;
      /** ContactAttr.description */
      description?: string;
      /** ContactAttr.deleted */
      deleted: boolean;
      /**
       * ContactAttr.assigned_user_id
       * Format: uuid
       */
      assigned_user_id?: string;
      /** ContactAttr.salutation */
      salutation?: string;
      /** ContactAttr.first_name */
      first_name?: string;
      /** ContactAttr.last_name */
      last_name?: string;
      /** ContactAttr.name */
      name?: string | null;
      /** ContactAttr.title */
      title?: string;
      /** ContactAttr.department */
      department?: string;
      /** ContactAttr.do_not_call */
      do_not_call?: boolean;
      /** ContactAttr.email_home */
      email_home?: string;
      /** ContactAttr.email_mobile */
      email_mobile?: string;
      /** ContactAttr.email_work */
      email_work?: string;
      /** ContactAttr.email_other */
      email_other?: string;
      /** ContactAttr.email_fax */
      email_fax?: string;
      /** ContactAttr.phone_home */
      phone_home?: string;
      /** ContactAttr.phone_mobile */
      phone_mobile?: string;
      /** ContactAttr.phone_work */
      phone_work?: string;
      /** ContactAttr.phone_other */
      phone_other?: string;
      /** ContactAttr.phone_fax */
      phone_fax?: string;
      /** ContactAttr.primary_address_street */
      primary_address_street?: string;
      /** ContactAttr.primary_address_city */
      primary_address_city?: string;
      /** ContactAttr.primary_address_state */
      primary_address_state?: string;
      /** ContactAttr.primary_address_postalcode */
      primary_address_postalcode?: string;
      /** ContactAttr.primary_address_country */
      primary_address_country?: string;
      /** ContactAttr.alt_address_street */
      alt_address_street?: string;
      /** ContactAttr.alt_address_city */
      alt_address_city?: string;
      /** ContactAttr.alt_address_state */
      alt_address_state?: string;
      /** ContactAttr.alt_address_postalcode */
      alt_address_postalcode?: string;
      /** ContactAttr.alt_address_country */
      alt_address_country?: string;
      /** ContactAttr.assistant */
      assistant?: string;
      /** ContactAttr.assistant_phone */
      assistant_phone?: string;
      /** ContactAttr.lead_source */
      lead_source?: string;
      /** ContactAttr.avatar */
      avatar?: string;
      /** ContactAttr.status */
      status?: string;
      /**
       * ContactAttr.organization_id
       * Format: uuid
       */
      organization_id?: string | null;
      /** ContactAttr.is_customer */
      is_customer?: boolean;
      /** ContactAttr.cif */
      cif?: string;
      /** ContactAttr.external_id */
      external_id?: string;
      /**
       * ContactAttr.label_id
       * Format: uuid
       */
      label_id?: string | null;
    };
    /** ContactImportQuery */
    ContactImportQuery: {
      /** ContactImportQuery.updateExisting */
      updateExisting: boolean;
    };
    /** ContactImportBiz */
    ContactImportBiz: {
      /** ContactImportBiz.title */
      title?: string;
      /** ContactImportBiz.first_name */
      first_name: string;
      /** ContactImportBiz.last_name */
      last_name: string;
      /** ContactImportBiz.email_work */
      email_work: string;
      /** ContactImportBiz.email_other */
      email_other?: string;
      /** ContactImportBiz.phone_home */
      phone_home?: string;
      /** ContactImportBiz.phone_mobile */
      phone_mobile?: string;
      /** ContactImportBiz.phone_work */
      phone_work?: string;
      /** ContactImportBiz.phone_other */
      phone_other?: string;
      /** ContactImportBiz.external_id */
      external_id?: string;
      /** ContactImportBiz.organization */
      organization?: {
        /** ContactImportBiz.organization.name */
        name: string;
        /** ContactImportBiz.organization.industry */
        industry?: string;
        /** ContactImportBiz.organization.total_revenue */
        total_revenue?: string;
        /** ContactImportBiz.organization.employees */
        employees?: number;
        /** ContactImportBiz.organization.address_street */
        address_street?: string;
        /** ContactImportBiz.organization.address_city */
        address_city?: string;
        /** ContactImportBiz.organization.address_state */
        address_state?: string;
        /** ContactImportBiz.organization.address_postalcode */
        address_postalcode?: string;
        /** ContactImportBiz.organization.address_country */
        address_country?: string;
        /** ContactImportBiz.organization.naics_code */
        naics_code?: string;
        /** ContactImportBiz.organization.branch */
        branch?: string;
      };
    };
    /** ContactOwnerAttr */
    ContactOwnerAttr: {
      /**
       * ContactOwnerAttr.user_id
       * Format: uuid
       */
      user_id: string;
      /**
       * ContactOwnerAttr.contact_id
       * Format: uuid
       */
      contact_id: string;
    };
    /** CourseContentAttr */
    CourseContentAttr: {
      /**
       * CourseContentAttr.courseContentId
       * Format: uuid
       */
      courseContentId: string;
      /**
       * CourseContentAttr.courseId
       * Format: uuid
       */
      courseId: string;
      /**
       * CourseContentAttr.quizId
       * Format: uuid
       */
      quizId?: string | null;
      /** CourseContentAttr.order */
      order: number;
      /**
       * CourseContentAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** CourseContentCreateQuizBiz */
    CourseContentCreateQuizBiz: {
      /** CourseContentCreateQuizBiz.order */
      order: number;
      /** CourseContentCreateQuizBiz.quiz */
      quiz: {
        /** CourseContentCreateQuizBiz.quiz.maxAttempts */
        maxAttempts?: number | null;
        /** CourseContentCreateQuizBiz.quiz.questions */
        questions: components["schemas"]["QuizQuestionCreateBiz"][];
      };
    };
    /** CourseAttrs */
    CourseAttrs: {
      /** CourseAttrs.id */
      id: string;
      /** CourseAttrs.name */
      name?: string | null;
      /** CourseAttrs.description */
      description?: string | null;
      /** CourseAttrs.status */
      status?: string;
      /** CourseAttrs.is_learning_path */
      is_learning_path?: boolean;
      /** CourseAttrs.isPublic */
      isPublic: boolean;
      /** CourseAttrs.deleted */
      deleted?: boolean;
      /** CourseAttrs.category_id */
      category_id?: number | null;
      /** CourseAttrs.badge_id */
      badge_id?: string | null;
      /** CourseAttrs.tenant_id */
      tenant_id: string;
      /** CourseAttrs.categoryIds, CourseAttrs.categoryIds.[] */
      categoryIds?: number[];
    };
    /** CourseAttr */
    CourseAttr: {
      /**
       * CourseAttr.id
       * Format: uuid
       */
      id: string;
      /** CourseAttr.name */
      name?: string | null;
      /** CourseAttr.description */
      description?: string | null;
      /** CourseAttr.status */
      status?: string;
      /** CourseAttr.is_learning_path */
      is_learning_path?: boolean;
      /** CourseAttr.isPublic */
      isPublic: boolean;
      /** CourseAttr.deleted */
      deleted?: boolean;
      /** CourseAttr.category_id */
      category_id?: number | null;
      /** CourseAttr.badge_id */
      badge_id?: string | null;
      /** CourseAttr.tenant_id */
      tenant_id: string;
      /** CourseAttr.categoryIds */
      categoryIds?: number[];
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** CourseQueryStatusQuery */
    CourseQueryStatusQuery: "eq 'draft'" | "eq 'published'";
    /** CourseQueryBiz */
    CourseQueryBiz: {
      favorites?: components["schemas"]["AssociationRestriction"];
      /** CourseQueryBiz.lessonId */
      lessonId?: number | number[];
      lessons?: components["schemas"]["AssociationRestriction"];
      /** CourseQueryBiz.order */
      order?: components["schemas"]["Order"][];
      progress?: components["schemas"]["AssociationRestriction"];
      /** CourseQueryBiz.search */
      search?: string;
      /** CourseQueryBiz.status */
      status?:
        | components["schemas"]["CourseQueryStatusQuery"]
        | components["schemas"]["CourseQueryStatusQuery"][];
    };
    /** CourseCreateBiz */
    CourseCreateBiz: {
      /** CourseCreateBiz.name */
      name?: string | null;
      /** CourseCreateBiz.description */
      description?: string | null;
      /** CourseCreateBiz.deleted */
      deleted?: boolean;
      /** CourseCreateBiz.status */
      status?: string;
      /** CourseCreateBiz.isPublic */
      isPublic?: boolean;
      /** CourseCreateBiz.is_learning_path */
      is_learning_path?: boolean;
      /** CourseCreateBiz.category_id */
      category_id?: number | null;
      /** CourseCreateBiz.badge_id */
      badge_id?: string | null;
      /** CourseCreateBiz.categoryIds */
      categoryIds?: number[];
    };
    /** CourseModifyBiz */
    CourseModifyBiz: {
      /** CourseModifyBiz.name */
      name?: string | null;
      /** CourseModifyBiz.description */
      description?: string | null;
      /** CourseModifyBiz.deleted */
      deleted?: boolean;
      /** CourseModifyBiz.status */
      status?: string;
      /** CourseModifyBiz.isPublic */
      isPublic?: boolean;
      /** CourseModifyBiz.is_learning_path */
      is_learning_path?: boolean;
      /** CourseModifyBiz.category_id */
      category_id?: number | null;
      /** CourseModifyBiz.badge_id */
      badge_id?: string | null;
      /** CourseModifyBiz.categoryIds */
      categoryIds?: number[];
    };
    /** CourseLessonAttr */
    CourseLessonAttr: {
      /** CourseLessonAttr.id */
      id: number;
      /** CourseLessonAttr.position */
      position: number;
      /** CourseLessonAttr.lesson_id */
      lesson_id: number;
      /** CourseLessonAttr.course_id */
      course_id: string;
    };
    /** CoursePreferenceAttr */
    CoursePreferenceAttr: {
      /**
       * CoursePreferenceAttr.courseId
       * Format: uuid
       */
      courseId: string;
      /**
       * CoursePreferenceAttr.userId
       * Format: uuid
       */
      userId: string;
      /** CoursePreferenceAttr.isFavorite */
      isFavorite: boolean;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** CourseProgressStatus */
    CourseProgressStatus: "in_progress" | "completed" | "failed";
    /** CourseProgressAttrs */
    CourseProgressAttrs: {
      /** CourseProgressAttrs.id */
      id: string;
      status: components["schemas"]["CourseProgressStatus"];
      started_at?: components["schemas"]["Date"];
      /**
       * CourseProgressAttrs.completed_at
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      completed_at?: components["schemas"]["Date"] | null;
      last_attempted_at: components["schemas"]["Date"];
      /** CourseProgressAttrs.progress */
      progress?: number | null;
      /** CourseProgressAttrs.points */
      points?: number | null;
      /** CourseProgressAttrs.score */
      score?: number | null;
      /** CourseProgressAttrs.courseContentId */
      courseContentId?: string | null;
      /** CourseProgressAttrs.course_id */
      course_id: string;
      /** CourseProgressAttrs.user_id */
      user_id: string;
      /** CourseProgressAttrs.tenant_id */
      tenant_id: string;
    };
    /** CourseProgressAttr */
    CourseProgressAttr: {
      /** CourseProgressAttr.id */
      id: string;
      /** CourseProgressAttr.status */
      status: "in_progress" | "completed" | "failed";
      started_at?: components["schemas"]["Date"];
      /**
       * CourseProgressAttr.completed_at
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      completed_at?: components["schemas"]["Date"] | null;
      last_attempted_at: components["schemas"]["Date"];
      /** CourseProgressAttr.progress */
      progress?: number | null;
      /** CourseProgressAttr.points */
      points?: number | null;
      /** CourseProgressAttr.score */
      score?: number | null;
      /** CourseProgressAttr.courseContentId */
      courseContentId?: string | null;
      /**
       * CourseProgressAttr.course_id
       * Format: uuid
       */
      course_id: string;
      /**
       * CourseProgressAttr.user_id
       * Format: uuid
       */
      user_id: string;
      /**
       * CourseProgressAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** CourseProgressUpsertBiz */
    CourseProgressUpsertBiz: {
      /**
       * CourseProgressUpsertBiz.courseContentId
       * @description When `null`, it will indicate user has requested a new lesson if user
       * has completed a previous course.
       */
      courseContentId?: string | null;
    };
    /** CourseProgressQuizSubmissionAttr */
    CourseProgressQuizSubmissionAttr: {
      /**
       * CourseProgressQuizSubmissionAttr.courseProgressQuizSubmissionId
       * Format: uuid
       */
      courseProgressQuizSubmissionId: string;
      /** CourseProgressQuizSubmissionAttr.courseProgressId */
      courseProgressId: string;
      /**
       * CourseProgressQuizSubmissionAttr.quizSubmissionId
       * Format: uuid
       */
      quizSubmissionId: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** DashboardComponentAttr */
    DashboardComponentAttr: {
      /**
       * DashboardComponentAttr.dashboardId
       * Format: uuid
       */
      dashboardId: string;
      /**
       * DashboardComponentAttr.componentId
       * Format: uuid
       */
      componentId: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** DashboardType */
    DashboardType: "dashboard" | "insight";
    /** DashboardAttr */
    DashboardAttr: {
      /**
       * DashboardAttr.id
       * Format: uuid
       */
      id: string;
      /** DashboardAttr.name */
      name: string;
      /** DashboardAttr.type */
      type: "dashboard" | "insight";
      /** DashboardAttr.enabled */
      enabled: boolean;
      /**
       * DashboardAttr.organizationId
       * Format: uuid
       */
      organizationId?: string | null;
      /**
       * DashboardAttr.createdById
       * Format: uuid
       */
      createdById: string;
      /**
       * DashboardAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** DashboardQueryBiz */
    DashboardQueryBiz: {
      /** DashboardQueryBiz.type */
      type?: "dashboard" | "insight";
      /**
       * DashboardQueryBiz.organizationId
       * Format: uuid
       */
      organizationId?: string;
    };
    /** DashboardCreateBiz */
    DashboardCreateBiz: {
      /** DashboardCreateBiz.name */
      name: string;
      /** DashboardCreateBiz.type */
      type: "dashboard" | "insight";
      /**
       * DashboardCreateBiz.organizationId
       * Format: uuid
       */
      organizationId?: string | null;
      /** DashboardCreateBiz.enabled */
      enabled?: boolean;
    };
    /** DashboardModifyBiz */
    DashboardModifyBiz: {
      /** DashboardModifyBiz.name */
      name?: string;
    };
    /** DashboardAddComponentBiz */
    DashboardAddComponentBiz: {
      analytic?: components["schemas"]["AnalyticCreateBiz"];
      /** DashboardAddComponentBiz.componentText */
      componentText?: {
        /** DashboardAddComponentBiz.componentText.icon */
        icon?: string | null;
        /** DashboardAddComponentBiz.componentText.source */
        source?: ("rpmg" | "spGlobal" | "fasterPayments" | "custom") | null;
        /** DashboardAddComponentBiz.componentText.position */
        position?: ("left" | "right" | "center" | "top" | "bottom") | null;
        /** DashboardAddComponentBiz.componentText.iconLabel */
        iconLabel?: string | null;
        /** DashboardAddComponentBiz.componentText.type */
        type:
          | "donut"
          | "calendar"
          | "percentText"
          | "iconText"
          | "donutSelection"
          | "bar";
        /** DashboardAddComponentBiz.componentText.text */
        text: string;
        request?: components["schemas"]["ComponentTextRequest"];
      };
      /** DashboardAddComponentBiz.component */
      component: {
        /** DashboardAddComponentBiz.component.name */
        name: string;
        /** DashboardAddComponentBiz.component.enabled */
        enabled?: boolean;
        /** DashboardAddComponentBiz.component.analyticId */
        analyticId?: string;
        /** DashboardAddComponentBiz.component.componentTextId */
        componentTextId?: string;
      };
    };
    /** DashboardModifyComponentBiz */
    DashboardModifyComponentBiz: {
      component?: components["schemas"]["ComponentModifyBiz"];
    };
    /** DashboardDefaultBiz */
    DashboardDefaultBiz: {
      /** DashboardDefaultBiz.types */
      type: "insight";
      /** DashboardDefaultBiz.organizationId */
      organizationId: string;
    } |
      {
        /** DashboardDefaultBiz.type */
        type: "dashboard";
      }
    /** DealType */
    DealType: "cold" | "warm" | "hot" | "won" | "lost";
    /** DealStatus */
    DealStatus: "won" | "lost";
    /** DealAttr */
    DealAttr: {
      /**
       * DealAttr.id
       * Format: uuid
       */
      id: string;
      /** DealAttr.name */
      name?: string;
      date_entered?: components["schemas"]["Date"];
      date_modified?: components["schemas"]["Date"];
      /**
       * DealAttr.modified_user_id
       * Format: uuid
       */
      modified_user_id?: string;
      /**
       * DealAttr.created_by
       * Format: uuid
       */
      created_by: string;
      /** DealAttr.description */
      description?: string;
      /** DealAttr.deleted */
      deleted?: boolean;
      /**
       * DealAttr.assigned_user_id
       * Format: uuid
       */
      assigned_user_id?: string;
      /** DealAttr.deal_type */
      deal_type?: "cold" | "warm" | "hot" | "won" | "lost";
      /** DealAttr.lead_source */
      lead_source?: string;
      /** DealAttr.amount */
      amount?: number;
      /** DealAttr.currency */
      currency?: string;
      date_closed?: components["schemas"]["Date"];
      /** DealAttr.next_step */
      next_step?: string;
      /** DealAttr.sales_stage */
      sales_stage?: string;
      /** DealAttr.probability */
      probability?: number;
      /**
       * DealAttr.contact_person_id
       * Format: uuid
       */
      contact_person_id?: string | null;
      /**
       * DealAttr.contact_organization_id
       * Format: uuid
       */
      contact_organization_id?: string | null;
      date_won_closed?: components["schemas"]["Date"];
      date_lost_closed?: components["schemas"]["Date"];
      last_status_update?: components["schemas"]["Date"];
      /**
       * DealAttr.tenant_id
       * Format: uuid
       */
      tenant_id?: string;
      /** DealAttr.position */
      position: number;
      /**
       * DealAttr.tenant_deal_stage_id
       * Format: uuid
       */
      tenant_deal_stage_id?: string;
      /** DealAttr.status */
      status?: "won" | "lost";
    };
    /** DealOwnerAttr */
    DealOwnerAttr: {
      /**
       * DealOwnerAttr.user_id
       * Format: uuid
       */
      user_id: string;
      /**
       * DealOwnerAttr.deal_id
       * Format: uuid
       */
      deal_id: string;
    };
    /** DealProductAttr */
    DealProductAttr: {
      /**
       * DealProductAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * DealProductAttr.product_id
       * Format: uuid
       */
      product_id?: string;
      /** DealProductAttr.quantity */
      quantity?: number;
      /** DealProductAttr.price */
      price?: number;
      /**
       * DealProductAttr.deal_id
       * Format: uuid
       */
      deal_id?: string;
    };
    /** DefaultFieldAttr */
    DefaultFieldAttr: {
      /** DefaultFieldAttr.id */
      id?: string;
      /** DefaultFieldAttr.key */
      key: string;
      /** DefaultFieldAttr.field_type */
      field_type:
        | "CHAR"
        | "TEXT"
        | "NUMBER"
        | "DATE"
        | "TIME"
        | "CURRENCY"
        | "URL"
        | "CHECKBOX"
        | "EMAIL"
        | "PHONE";
      /** DefaultFieldAttr.value_type */
      value_type: "string" | "number" | "boolean" | "object" | "date";
      /** DefaultFieldAttr.order */
      order?: number;
      /** DefaultFieldAttr.type */
      type:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
      /** DefaultFieldAttr.mandatory */
      mandatory?: boolean;
      /** DefaultFieldAttr.usedField */
      usedField?: boolean;
      /** DefaultFieldAttr.isFixed */
      isFixed?: boolean;
      /** DefaultFieldAttr.columnName */
      columnName: string;
      /** DefaultFieldAttr.isCustom */
      isCustom?: boolean;
      /** DefaultFieldAttr.section */
      section: string;
      /** DefaultFieldAttr.preferred */
      preferred?: boolean;
    };
    /** DefaultFieldCreateBiz */
    DefaultFieldCreateBiz: {
      /** DefaultFieldCreateBiz.type */
      type:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
      /** DefaultFieldCreateBiz.order */
      order?: number;
      /** DefaultFieldCreateBiz.key */
      key: string;
      /** DefaultFieldCreateBiz.field_type */
      field_type:
        | "CHAR"
        | "TEXT"
        | "NUMBER"
        | "DATE"
        | "TIME"
        | "CURRENCY"
        | "URL"
        | "CHECKBOX"
        | "EMAIL"
        | "PHONE";
      /** DefaultFieldCreateBiz.value_type */
      value_type: "string" | "number" | "boolean" | "object" | "date";
      /** DefaultFieldCreateBiz.mandatory */
      mandatory?: boolean;
      /** DefaultFieldCreateBiz.usedField */
      usedField?: boolean;
      /** DefaultFieldCreateBiz.isFixed */
      isFixed?: boolean;
      /** DefaultFieldCreateBiz.columnName */
      columnName: string;
      /** DefaultFieldCreateBiz.isCustom */
      isCustom?: boolean;
      /** DefaultFieldCreateBiz.section */
      section: string;
      /** DefaultFieldCreateBiz.preferred */
      preferred?: boolean;
    };
    /** FeedAttrs */
    FeedAttrs: {
      /** FeedAttrs.id */
      id: string;
      /** FeedAttrs.summary */
      summary: string;
      /** FeedAttrs.type */
      type: string;
      /** FeedAttrs.object_data */
      object_data: unknown;
      /** FeedAttrs.content */
      content?: string;
      /** FeedAttrs.created_by */
      created_by: string;
      /** FeedAttrs.updated_by */
      updated_by?: string;
      /** FeedAttrs.contact_id */
      contact_id?: string;
      /** FeedAttrs.organization_id */
      organization_id?: string;
      /** FeedAttrs.deal_id */
      deal_id?: string;
      created_on?: components["schemas"]["Date"];
      /** FeedAttrs.tenant_id */
      tenant_id: string;
    };
    /** FeedAttr */
    FeedAttr: {
      /**
       * FeedAttr.id
       * Format: uuid
       */
      id: string;
      /** FeedAttr.summary */
      summary: string;
      /** FeedAttr.type */
      type: string;
      /** FeedAttr.object_data */
      object_data: unknown;
      /** FeedAttr.content */
      content?: string;
      /**
       * FeedAttr.created_by
       * Format: uuid
       */
      created_by: string;
      /**
       * FeedAttr.updated_by
       * Format: uuid
       */
      updated_by?: string;
      /**
       * FeedAttr.contact_id
       * Format: uuid
       */
      contact_id?: string;
      /**
       * FeedAttr.organization_id
       * Format: uuid
       */
      organization_id?: string;
      /**
       * FeedAttr.deal_id
       * Format: uuid
       */
      deal_id?: string;
      created_on?: components["schemas"]["Date"];
      /**
       * FeedAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** FieldFieldType */
    FieldFieldType:
      | "CHAR"
      | "TEXT"
      | "NUMBER"
      | "DATE"
      | "TIME"
      | "CURRENCY"
      | "URL"
      | "CHECKBOX"
      | "EMAIL"
      | "PHONE";
    /** FieldValueType */
    FieldValueType: "string" | "number" | "boolean" | "object" | "date";
    /** FieldType */
    FieldType:
      | "contact"
      | "deal"
      | "organization"
      | "product"
      | "task"
      | "call"
      | "event";
    /** FieldAttr */
    FieldAttr: {
      /** FieldAttr.id */
      id?: string;
      /** FieldAttr.key */
      key: string;
      /** FieldAttr.field_type */
      field_type:
        | "CHAR"
        | "TEXT"
        | "NUMBER"
        | "DATE"
        | "TIME"
        | "CURRENCY"
        | "URL"
        | "CHECKBOX"
        | "EMAIL"
        | "PHONE";
      /** FieldAttr.value_type */
      value_type: "string" | "number" | "boolean" | "object" | "date";
      /** FieldAttr.order */
      order?: number;
      /** FieldAttr.type */
      type:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
      /** FieldAttr.tenant_id */
      tenant_id?: string;
      /** FieldAttr.mandatory */
      mandatory?: boolean;
      /** FieldAttr.usedField */
      usedField?: boolean;
      /** FieldAttr.isFixed */
      isFixed?: boolean;
      /** FieldAttr.columnName */
      columnName: string;
      /** FieldAttr.isCustom */
      isCustom?: boolean;
      /** FieldAttr.section */
      section: string;
      /** FieldAttr.preferred */
      preferred?: boolean;
      /** FieldAttr.created_by */
      created_by: string;
    };
    /** FieldDefaultCreateBiz */
    FieldDefaultCreateBiz: {
      /** FieldDefaultCreateBiz.type */
      type?:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
    };
    /** SetFieldPreference */
    SetFieldPreference: {
      type: components["schemas"]["FieldType"];
      /** SetFieldPreference.fieldIds */
      fieldIds: string[];
    };
    /** FieldQueryBiz */
    FieldQueryBiz: {
      /** FieldQueryBiz.type */
      type:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
      /** FieldQueryBiz.preferred */
      preferred?: boolean;
      /** FieldQueryBiz.usedField */
      usedField?: boolean;
      order?: components["schemas"]["Order"];
    };
    /** FieldCreateBiz */
    FieldCreateBiz: {
      /** FieldCreateBiz.type */
      type:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
      /** FieldCreateBiz.created_by */
      created_by: string;
      /** FieldCreateBiz.tenant_id */
      tenant_id?: string;
      /** FieldCreateBiz.order */
      order?: number;
      /** FieldCreateBiz.key */
      key: string;
      /** FieldCreateBiz.field_type */
      field_type:
        | "CHAR"
        | "TEXT"
        | "NUMBER"
        | "DATE"
        | "TIME"
        | "CURRENCY"
        | "URL"
        | "CHECKBOX"
        | "EMAIL"
        | "PHONE";
      /** FieldCreateBiz.value_type */
      value_type: "string" | "number" | "boolean" | "object" | "date";
      /** FieldCreateBiz.mandatory */
      mandatory?: boolean;
      /** FieldCreateBiz.usedField */
      usedField?: boolean;
      /** FieldCreateBiz.isFixed */
      isFixed?: boolean;
      /** FieldCreateBiz.columnName */
      columnName: string;
      /** FieldCreateBiz.isCustom */
      isCustom?: boolean;
      /** FieldCreateBiz.section */
      section: string;
      /** FieldCreateBiz.preferred */
      preferred?: boolean;
    };
    /** FieldModifyBiz */
    FieldModifyBiz: {
      /** FieldModifyBiz.type */
      type?:
        | "contact"
        | "deal"
        | "organization"
        | "product"
        | "task"
        | "call"
        | "event";
      /** FieldModifyBiz.created_by */
      created_by?: string;
      /** FieldModifyBiz.tenant_id */
      tenant_id?: string;
      /** FieldModifyBiz.order */
      order?: number;
      /** FieldModifyBiz.key */
      key?: string;
      /** FieldModifyBiz.field_type */
      field_type?:
        | "CHAR"
        | "TEXT"
        | "NUMBER"
        | "DATE"
        | "TIME"
        | "CURRENCY"
        | "URL"
        | "CHECKBOX"
        | "EMAIL"
        | "PHONE";
      /** FieldModifyBiz.value_type */
      value_type?: "string" | "number" | "boolean" | "object" | "date";
      /** FieldModifyBiz.mandatory */
      mandatory?: boolean;
      /** FieldModifyBiz.usedField */
      usedField?: boolean;
      /** FieldModifyBiz.isFixed */
      isFixed?: boolean;
      /** FieldModifyBiz.columnName */
      columnName?: string;
      /** FieldModifyBiz.isCustom */
      isCustom?: boolean;
      /** FieldModifyBiz.section */
      section?: string;
      /** FieldModifyBiz.preferred */
      preferred?: boolean;
    };
    /** FileAttr */
    FileAttr: {
      /**
       * FileAttr.id
       * Format: uuid
       */
      id: string;
      /** FileAttr.storage */
      storage: string;
      /** FileAttr.filename_disk */
      filename_disk?: string;
      /** FileAttr.filename_download */
      filename_download: string;
      /** FileAttr.title */
      title?: string;
      /** FileAttr.type */
      type?: string;
      /** FileAttr.folder */
      folder?: string;
      /** FileAttr.uploaded_by */
      uploaded_by?: string;
      uploaded_on: components["schemas"]["Date"];
      /** FileAttr.modified_by */
      modified_by?: string;
      modified_on: components["schemas"]["Date"];
      /** FileAttr.charset */
      charset?: string;
      /** FileAttr.filesize */
      filesize?: number;
      /** FileAttr.width */
      width?: number;
      /** FileAttr.height */
      height?: number;
      /** FileAttr.duration */
      duration?: number;
      /** FileAttr.embed */
      embed?: string;
      /** FileAttr.description */
      description?: string;
      /** FileAttr.location */
      location?: string;
      /** FileAttr.tags */
      tags?: string;
      /** FileAttr.metadata */
      metadata: unknown;
      /** FileAttr.tenant_id */
      tenant_id: string;
      /** FileAttr.is_public */
      is_public: boolean;
    };
    /** GroupAttrs */
    GroupAttrs: {
      /** GroupAttrs.id */
      id: string;
      /** GroupAttrs.parent_id */
      parent_id?: string | null;
      /** GroupAttrs.name */
      name: string;
      /** GroupAttrs.has_sibling_access */
      has_sibling_access: boolean;
      /** GroupAttrs.description */
      description?: string | null;
      /** GroupAttrs.tenant_id */
      tenant_id: string;
      /**
       * GroupAttrs.deleted_on
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deleted_on?: components["schemas"]["Date"] | null;
    };
    /** GroupQueryBiz */
    GroupQueryBiz: {
      /**
       * GroupQueryBiz.self
       * @description Filters result by self. As users with elevated permissions can query data
       * across a tenant(s) and user(s), there may be situations where a user
       * would like to see data related only about themselves.
       * This includes data created by them or data assigned to them.
       */
      self?: boolean;
    };
    /** GroupAttr */
    GroupAttr: {
      /**
       * GroupAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * GroupAttr.parent_id
       * Format: uuid
       */
      parent_id?: string | null;
      /** GroupAttr.name */
      name: string;
      /** GroupAttr.has_sibling_access */
      has_sibling_access: boolean;
      /** GroupAttr.description */
      description?: string | null;
      /** GroupAttr.tenant_id */
      tenant_id: string;
      /**
       * GroupAttr.deleted_on
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deleted_on?: components["schemas"]["Date"] | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** GroupCreateBiz */
    GroupCreateBiz: {
      /**
       * GroupCreateBiz.parent_id
       * Format: uuid
       * @description There can only be 1 root group per tenant. A root group is defined as a
       * group with a "null" parent_id.
       */
      parent_id?: string | null;
      /** GroupCreateBiz.name */
      name: string;
      /** GroupCreateBiz.has_sibling_access */
      has_sibling_access?: boolean;
      /** GroupCreateBiz.description */
      description?: string | null;
    };
    /** GroupModifyBiz */
    GroupModifyBiz: {
      /** GroupModifyBiz.name */
      name?: string;
      /** GroupModifyBiz.description */
      description?: string | null;
      /** GroupModifyBiz.has_sibling_access */
      has_sibling_access?: boolean;
    };
    /** LabelType */
    LabelType: "contact" | "organization";
    /** LabelAttr */
    LabelAttr: {
      /**
       * LabelAttr.id
       * Format: uuid
       */
      id: string;
      /** LabelAttr.name */
      name: string;
      /** LabelAttr.color */
      color: string;
      /** LabelAttr.type */
      type?: ("contact" | "organization") | null;
      /**
       * LabelAttr.assigned_user_id
       * Format: uuid
       */
      assigned_user_id?: string | null;
      /**
       * LabelAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** LabelCreateBiz */
    LabelCreateBiz: {
      /** LabelCreateBiz.name */
      name: string;
      /** LabelCreateBiz.type */
      type?: ("contact" | "organization") | null;
      /** LabelCreateBiz.color */
      color: string;
    };
    /** LabelModifyBiz */
    LabelModifyBiz: {
      /** LabelModifyBiz.name */
      name?: string;
      /** LabelModifyBiz.type */
      type?: ("contact" | "organization") | null;
      /** LabelModifyBiz.color */
      color?: string;
    };
    /** LessonAttrs */
    LessonAttrs: {
      /** LessonAttrs.id */
      id: number;
      /** LessonAttrs.title */
      title: string;
      /** LessonAttrs.content */
      content?: string | null;
      /** LessonAttrs.category_id */
      category_id?: number | null;
      /** LessonAttrs.max_points */
      max_points?: number | null;
      /** LessonAttrs.max_attempts */
      max_attempts?: number | null;
      /** LessonAttrs.documents */
      documents?: string | null;
      /** LessonAttrs.duration */
      duration?: number | null;
      /** LessonAttrs.isPublic */
      isPublic: boolean;
      /** LessonAttrs.tags */
      tags?: string | null;
      /** LessonAttrs.icon */
      icon?: string | null;
      /** LessonAttrs.status */
      status?: string;
      /** LessonAttrs.tenant_id */
      tenant_id: string;
    };
    /** LessonAttr */
    LessonAttr: {
      /** LessonAttr.id */
      id: number;
      /** LessonAttr.title */
      title: string;
      /** LessonAttr.content */
      content?: string | null;
      /** LessonAttr.category_id */
      category_id?: number | null;
      /** LessonAttr.max_points */
      max_points?: number | null;
      /** LessonAttr.max_attempts */
      max_attempts?: number | null;
      /** LessonAttr.documents */
      documents?: string | null;
      /** LessonAttr.duration */
      duration?: number | null;
      /** LessonAttr.isPublic */
      isPublic: boolean;
      /** LessonAttr.tags */
      tags?: string | null;
      /** LessonAttr.icon */
      icon?: string | null;
      /** LessonAttr.status */
      status?: string;
      /**
       * LessonAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** LessonQueryStatusQuery */
    LessonQueryStatusQuery: "eq 'draft'" | "eq 'published'" | "ne 'deleted'";
    /** GetLessonsQuery */
    GetLessonsQuery: {
      /** search */
      search?: string;
      /** status */
      status?:
        | components["schemas"]["LessonQueryStatusQuery"]
        | components["schemas"]["LessonQueryStatusQuery"][];
      favorites?: components["schemas"]["AssociationRestriction"];
      progress?: components["schemas"]["AssociationRestriction"];
    } & {
      /** order, order.[] */
      order?: components["schemas"]["Order"][];
    } & components["schemas"]["Self"];
    /** LessonCreateBiz */
    LessonCreateBiz: {
      /** LessonCreateBiz.icon */
      icon?: string | null;
      /** LessonCreateBiz.title */
      title: string;
      /** LessonCreateBiz.status */
      status?: string;
      /** LessonCreateBiz.isPublic */
      isPublic?: boolean;
      /** LessonCreateBiz.category_id */
      category_id?: number | null;
      /** LessonCreateBiz.content */
      content?: string | null;
      /** LessonCreateBiz.max_points */
      max_points?: number | null;
      /** LessonCreateBiz.max_attempts */
      max_attempts?: number | null;
      /** LessonCreateBiz.documents */
      documents?: string | null;
      /** LessonCreateBiz.duration */
      duration?: number | null;
      /** LessonCreateBiz.tags */
      tags?: string | null;
    };
    /** LessonModifyBiz */
    LessonModifyBiz: {
      /** LessonModifyBiz.icon */
      icon?: string | null;
      /** LessonModifyBiz.title */
      title?: string;
      /** LessonModifyBiz.status */
      status?: string;
      /** LessonModifyBiz.isPublic */
      isPublic?: boolean;
      /** LessonModifyBiz.category_id */
      category_id?: number | null;
      /** LessonModifyBiz.content */
      content?: string | null;
      /** LessonModifyBiz.max_points */
      max_points?: number | null;
      /** LessonModifyBiz.max_attempts */
      max_attempts?: number | null;
      /** LessonModifyBiz.documents */
      documents?: string | null;
      /** LessonModifyBiz.duration */
      duration?: number | null;
      /** LessonModifyBiz.tags */
      tags?: string | null;
    };
    /** LessonPageType */
    LessonPageType: "video" | "quiz" | "slide" | "quiz_review";
    /** LessonPageAttrs */
    LessonPageAttrs: {
      /** LessonPageAttrs.id */
      id: number;
      type: components["schemas"]["LessonPageType"];
      /** LessonPageAttrs.title */
      title?: string;
      /** LessonPageAttrs.content */
      content?: string | null;
      /** LessonPageAttrs.order */
      order?: number;
      /** LessonPageAttrs.videoId */
      videoId?: string | null;
      /** LessonPageAttrs.quizId */
      quizId?: string | null;
      /** LessonPageAttrs.contactAccessible */
      contactAccessible: boolean;
      /** LessonPageAttrs.lesson_id */
      lesson_id: number;
      /** LessonPageAttrs.tenant_id */
      tenant_id: string;
    };
    /** LessonPageAttr */
    LessonPageAttr: {
      /** LessonPageAttr.id */
      id: number;
      /** LessonPageAttr.type */
      type: "video" | "quiz" | "slide" | "quiz_review";
      /** LessonPageAttr.title */
      title?: string;
      /** LessonPageAttr.content */
      content?: string | null;
      /** LessonPageAttr.order */
      order?: number;
      /** LessonPageAttr.videoId */
      videoId?: string | null;
      /**
       * LessonPageAttr.quizId
       * Format: uuid
       */
      quizId?: string | null;
      /** LessonPageAttr.contactAccessible */
      contactAccessible: boolean;
      /** LessonPageAttr.lesson_id */
      lesson_id: number;
      /**
       * LessonPageAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** LessonUpsertBiz */
    LessonUpsertBiz: {
      /** LessonUpsertBiz.pages */
      pages: {
        /** LessonUpsertBiz.pages.[].type */
        type: "video" | "quiz" | "slide" | "quiz_review";
        /** LessonUpsertBiz.pages.[].order */
        order?: number;
        /** LessonUpsertBiz.pages.[].title */
        title?: string;
        /** LessonUpsertBiz.pages.[].quizId */
        quizId?: string | null;
        /** LessonUpsertBiz.pages.[].content */
        content?: string | null;
        /** LessonUpsertBiz.pages.[].contactAccessible */
        contactAccessible?: boolean;
        /** LessonUpsertBiz.pages.[].videoId */
        videoId?: string | null;
        /** LessonUpsertBiz.pages.[].lesson_id */
        lesson_id: number;
        /** LessonUpsertBiz.pages.[].id */
        id?: number;
      }[];
    };
    /** LessonPreferenceAttr */
    LessonPreferenceAttr: {
      /** LessonPreferenceAttr.lessonId */
      lessonId: number;
      /**
       * LessonPreferenceAttr.userId
       * Format: uuid
       */
      userId: string;
      /** LessonPreferenceAttr.isFavorite */
      isFavorite: boolean;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** LessonProgressStatus */
    LessonProgressStatus: "in_progress" | "completed" | "failed" | "pending";
    /** LessonProgressAttrs */
    LessonProgressAttrs: {
      /** LessonProgressAttrs.id */
      id: number;
      status: components["schemas"]["LessonProgressStatus"];
      started_at?: components["schemas"]["Date"];
      /**
       * LessonProgressAttrs.completed_at
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      completed_at?: components["schemas"]["Date"] | null;
      last_attempted_at: components["schemas"]["Date"];
      /** LessonProgressAttrs.progress */
      progress?: number | null;
      /** LessonProgressAttrs.points */
      points?: number | null;
      /** LessonProgressAttrs.score */
      score?: number | null;
      /** LessonProgressAttrs.page_id */
      page_id?: number | null;
      /** LessonProgressAttrs.lesson_id */
      lesson_id: number;
      /** LessonProgressAttrs.user_id */
      user_id: string;
      /** LessonProgressAttrs.tenant_id */
      tenant_id: string;
    };
    /** LessonProgressAttr */
    LessonProgressAttr: {
      /** LessonProgressAttr.id */
      id: number;
      /** LessonProgressAttr.status */
      status: "in_progress" | "completed" | "failed" | "pending";
      started_at?: components["schemas"]["Date"];
      /**
       * LessonProgressAttr.completed_at
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      completed_at?: components["schemas"]["Date"] | null;
      last_attempted_at: components["schemas"]["Date"];
      /** LessonProgressAttr.progress */
      progress?: number | null;
      /** LessonProgressAttr.points */
      points?: number | null;
      /** LessonProgressAttr.score */
      score?: number | null;
      /** LessonProgressAttr.page_id */
      page_id?: number | null;
      /** LessonProgressAttr.lesson_id */
      lesson_id: number;
      /**
       * LessonProgressAttr.user_id
       * Format: uuid
       */
      user_id: string;
      /**
       * LessonProgressAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** LessonProgressUpsertBiz */
    LessonProgressUpsertBiz: {
      /**
       * LessonProgressUpsertBiz.page_id
       * @description When `null`, it will indicate user has requested a new lesson if user
       * has completed a previous lesson.
       */
      page_id: number | null;
    };
    /** LessonProgressQuizSubmissionAttr */
    LessonProgressQuizSubmissionAttr: {
      /**
       * LessonProgressQuizSubmissionAttr.lessonProgressQuizSubmissionId
       * Format: uuid
       */
      lessonProgressQuizSubmissionId: string;
      /** LessonProgressQuizSubmissionAttr.lessonProgressId */
      lessonProgressId: number;
      /**
       * LessonProgressQuizSubmissionAttr.quizSubmissionId
       * Format: uuid
       */
      quizSubmissionId: string;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** NaicsCrossReferenceAttr */
    NaicsCrossReferenceAttr: {
      /**
       * NaicsCrossReferenceAttr.id
       * Format: uuid
       */
      id: string;
      /** NaicsCrossReferenceAttr.code */
      code: string;
      /** NaicsCrossReferenceAttr.cross_reference_code */
      cross_reference_code: string;
      /** NaicsCrossReferenceAttr.cross_reference */
      cross_reference: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** NaicsAttr */
    NaicsAttr: {
      /** NaicsAttr.code */
      code: string;
      /** NaicsAttr.title */
      title: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** NaicsQueryBiz */
    NaicsQueryBiz: {
      /** NaicsQueryBiz.search */
      search?: string;
    };
    /** NaicsSpAttr */
    NaicsSpAttr: {
      /** NaicsSpAttr.code */
      code: string;
      /**
       * NaicsSpAttr.sp_summary_id
       * Format: uuid
       */
      sp_summary_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** OrganizationAttr */
    OrganizationAttr: {
      /**
       * OrganizationAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * OrganizationAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** OrganizationAttr.name */
      name?: string;
      date_entered?: components["schemas"]["Date"];
      date_modified?: components["schemas"]["Date"];
      /**
       * OrganizationAttr.modified_user_id
       * Format: uuid
       */
      modified_user_id?: string;
      /**
       * OrganizationAttr.created_by
       * Format: uuid
       */
      created_by: string;
      /** OrganizationAttr.deleted */
      deleted: boolean;
      /**
       * OrganizationAttr.assigned_user_id
       * Format: uuid
       */
      assigned_user_id: string;
      /** OrganizationAttr.industry */
      industry?: string;
      /** OrganizationAttr.annual_revenue */
      annual_revenue?: string;
      /** OrganizationAttr.annual_revenue_merchant */
      annual_revenue_merchant?: string;
      /** OrganizationAttr.annual_revenue_treasury */
      annual_revenue_treasury?: string;
      /** OrganizationAttr.annual_revenue_business_card */
      annual_revenue_business_card?: string;
      /** OrganizationAttr.total_revenue */
      total_revenue?: string;
      /** OrganizationAttr.phone_fax */
      phone_fax?: string;
      /** OrganizationAttr.billing_address_street */
      billing_address_street?: string;
      /** OrganizationAttr.billing_address_city */
      billing_address_city?: string;
      /** OrganizationAttr.billing_address_state */
      billing_address_state?: string;
      /** OrganizationAttr.billing_address_postalcode */
      billing_address_postalcode?: string;
      /** OrganizationAttr.billing_address_country */
      billing_address_country?: string;
      /** OrganizationAttr.rating */
      rating?: string;
      /** OrganizationAttr.phone_office */
      phone_office?: string;
      /** OrganizationAttr.phone_alternate */
      phone_alternate?: string;
      /** OrganizationAttr.website */
      website?: string;
      /** OrganizationAttr.employees */
      employees?: number;
      /** OrganizationAttr.ticker_symbol */
      ticker_symbol?: string;
      /** OrganizationAttr.address_street */
      address_street?: string;
      /** OrganizationAttr.address_suite */
      address_suite?: string;
      /** OrganizationAttr.address_city */
      address_city?: string;
      /** OrganizationAttr.address_state */
      address_state?: string;
      /** OrganizationAttr.address_postalcode */
      address_postalcode?: string;
      /** OrganizationAttr.address_country */
      address_country?: string;
      /** OrganizationAttr.sic_code */
      sic_code?: string;
      /** OrganizationAttr.status */
      status?: string;
      /** OrganizationAttr.naics_code */
      naics_code?: string;
      /** OrganizationAttr.is_customer */
      is_customer?: boolean;
      /** OrganizationAttr.cif */
      cif?: string;
      /** OrganizationAttr.branch */
      branch?: string;
      /** OrganizationAttr.external_id */
      external_id?: string;
      /** OrganizationAttr.avatar */
      avatar?: string;
      /**
       * OrganizationAttr.label_id
       * Format: uuid
       */
      label_id?: string | null;
    };
    /** OrganizationImportQuery */
    OrganizationImportQuery: {
      /** OrganizationImportQuery.updateExisting */
      updateExisting: boolean;
    };
    /** OrganizationImportBiz */
    OrganizationImportBiz: {
      /** OrganizationImportBiz.name */
      name: string;
      /** OrganizationImportBiz.industry */
      industry?: string;
      /** OrganizationImportBiz.total_revenue */
      total_revenue?: string;
      /** OrganizationImportBiz.employees */
      employees?: number;
      /** OrganizationImportBiz.address_street */
      address_street?: string;
      /** OrganizationImportBiz.address_city */
      address_city?: string;
      /** OrganizationImportBiz.address_state */
      address_state?: string;
      /** OrganizationImportBiz.address_postalcode */
      address_postalcode?: string;
      /** OrganizationImportBiz.address_country */
      address_country?: string;
      /** OrganizationImportBiz.naics_code */
      naics_code?: string;
      /** OrganizationImportBiz.branch */
      branch?: string;
    };
    /** OrganizationOwnerAttr */
    OrganizationOwnerAttr: {
      /**
       * OrganizationOwnerAttr.user_id
       * Format: uuid
       */
      user_id: string;
      /**
       * OrganizationOwnerAttr.organization_id
       * Format: uuid
       */
      organization_id: string;
    };
    /** PermissionCollection */
    PermissionCollection:
      | "notes"
      | "dashboard"
      | "accounts"
      | "activities"
      | "analytics"
      | "categories"
      | "contacts"
      | "courses"
      | "dashboards"
      | "deals"
      | "lessons"
      | "products"
      | "prospects"
      | "quizzes"
      | "reports"
      | "insights";
    /** PermissionAction */
    PermissionAction: "create" | "delete" | "view" | "manage" | "edit";
    /** PermissionAttr */
    PermissionAttr: {
      /**
       * PermissionAttr.role
       * Format: uuid
       */
      role: string;
      /** PermissionAttr.collection */
      collection:
        | "notes"
        | "dashboard"
        | "accounts"
        | "activities"
        | "analytics"
        | "categories"
        | "contacts"
        | "courses"
        | "dashboards"
        | "deals"
        | "lessons"
        | "products"
        | "prospects"
        | "quizzes"
        | "reports"
        | "insights";
      /** PermissionAttr.action */
      action: "create" | "delete" | "view" | "manage" | "edit";
      /**
       * PermissionAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
    };
    /** PermissionUpsertBiz */
    PermissionUpsertBiz: {
      /** PermissionUpsertBiz.collection */
      collection:
        | "notes"
        | "dashboard"
        | "accounts"
        | "activities"
        | "analytics"
        | "categories"
        | "contacts"
        | "courses"
        | "dashboards"
        | "deals"
        | "lessons"
        | "products"
        | "prospects"
        | "quizzes"
        | "reports"
        | "insights";
      /** PermissionUpsertBiz.action */
      action: "create" | "delete" | "view" | "manage" | "edit";
    };
    /** CollectionPermission */
    CollectionPermission: {
      /** CollectionPermission.notes */
      notes: {
        /** CollectionPermission.notes.create */
        create: {
          /** CollectionPermission.notes.create.collection */
          collection: "notes";
          /** CollectionPermission.notes.create.action */
          action: "create";
        };
        /** CollectionPermission.notes.delete */
        delete: {
          /** CollectionPermission.notes.delete.collection */
          collection: "notes";
          /** CollectionPermission.notes.delete.action */
          action: "delete";
        };
        /** CollectionPermission.notes.view */
        view: {
          /** CollectionPermission.notes.view.collection */
          collection: "notes";
          /** CollectionPermission.notes.view.action */
          action: "view";
        };
        /** CollectionPermission.notes.manage */
        manage: {
          /** CollectionPermission.notes.manage.collection */
          collection: "notes";
          /** CollectionPermission.notes.manage.action */
          action: "manage";
        };
        /** CollectionPermission.notes.edit */
        edit: {
          /** CollectionPermission.notes.edit.collection */
          collection: "notes";
          /** CollectionPermission.notes.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.dashboard */
      dashboard: {
        /** CollectionPermission.dashboard.create */
        create: {
          /** CollectionPermission.dashboard.create.collection */
          collection: "dashboard";
          /** CollectionPermission.dashboard.create.action */
          action: "create";
        };
        /** CollectionPermission.dashboard.delete */
        delete: {
          /** CollectionPermission.dashboard.delete.collection */
          collection: "dashboard";
          /** CollectionPermission.dashboard.delete.action */
          action: "delete";
        };
        /** CollectionPermission.dashboard.view */
        view: {
          /** CollectionPermission.dashboard.view.collection */
          collection: "dashboard";
          /** CollectionPermission.dashboard.view.action */
          action: "view";
        };
        /** CollectionPermission.dashboard.manage */
        manage: {
          /** CollectionPermission.dashboard.manage.collection */
          collection: "dashboard";
          /** CollectionPermission.dashboard.manage.action */
          action: "manage";
        };
        /** CollectionPermission.dashboard.edit */
        edit: {
          /** CollectionPermission.dashboard.edit.collection */
          collection: "dashboard";
          /** CollectionPermission.dashboard.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.accounts */
      accounts: {
        /** CollectionPermission.accounts.create */
        create: {
          /** CollectionPermission.accounts.create.collection */
          collection: "accounts";
          /** CollectionPermission.accounts.create.action */
          action: "create";
        };
        /** CollectionPermission.accounts.delete */
        delete: {
          /** CollectionPermission.accounts.delete.collection */
          collection: "accounts";
          /** CollectionPermission.accounts.delete.action */
          action: "delete";
        };
        /** CollectionPermission.accounts.view */
        view: {
          /** CollectionPermission.accounts.view.collection */
          collection: "accounts";
          /** CollectionPermission.accounts.view.action */
          action: "view";
        };
        /** CollectionPermission.accounts.manage */
        manage: {
          /** CollectionPermission.accounts.manage.collection */
          collection: "accounts";
          /** CollectionPermission.accounts.manage.action */
          action: "manage";
        };
        /** CollectionPermission.accounts.edit */
        edit: {
          /** CollectionPermission.accounts.edit.collection */
          collection: "accounts";
          /** CollectionPermission.accounts.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.activities */
      activities: {
        /** CollectionPermission.activities.create */
        create: {
          /** CollectionPermission.activities.create.collection */
          collection: "activities";
          /** CollectionPermission.activities.create.action */
          action: "create";
        };
        /** CollectionPermission.activities.delete */
        delete: {
          /** CollectionPermission.activities.delete.collection */
          collection: "activities";
          /** CollectionPermission.activities.delete.action */
          action: "delete";
        };
        /** CollectionPermission.activities.view */
        view: {
          /** CollectionPermission.activities.view.collection */
          collection: "activities";
          /** CollectionPermission.activities.view.action */
          action: "view";
        };
        /** CollectionPermission.activities.manage */
        manage: {
          /** CollectionPermission.activities.manage.collection */
          collection: "activities";
          /** CollectionPermission.activities.manage.action */
          action: "manage";
        };
        /** CollectionPermission.activities.edit */
        edit: {
          /** CollectionPermission.activities.edit.collection */
          collection: "activities";
          /** CollectionPermission.activities.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.analytics */
      analytics: {
        /** CollectionPermission.analytics.create */
        create: {
          /** CollectionPermission.analytics.create.collection */
          collection: "analytics";
          /** CollectionPermission.analytics.create.action */
          action: "create";
        };
        /** CollectionPermission.analytics.delete */
        delete: {
          /** CollectionPermission.analytics.delete.collection */
          collection: "analytics";
          /** CollectionPermission.analytics.delete.action */
          action: "delete";
        };
        /** CollectionPermission.analytics.view */
        view: {
          /** CollectionPermission.analytics.view.collection */
          collection: "analytics";
          /** CollectionPermission.analytics.view.action */
          action: "view";
        };
        /** CollectionPermission.analytics.manage */
        manage: {
          /** CollectionPermission.analytics.manage.collection */
          collection: "analytics";
          /** CollectionPermission.analytics.manage.action */
          action: "manage";
        };
        /** CollectionPermission.analytics.edit */
        edit: {
          /** CollectionPermission.analytics.edit.collection */
          collection: "analytics";
          /** CollectionPermission.analytics.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.categories */
      categories: {
        /** CollectionPermission.categories.create */
        create: {
          /** CollectionPermission.categories.create.collection */
          collection: "categories";
          /** CollectionPermission.categories.create.action */
          action: "create";
        };
        /** CollectionPermission.categories.delete */
        delete: {
          /** CollectionPermission.categories.delete.collection */
          collection: "categories";
          /** CollectionPermission.categories.delete.action */
          action: "delete";
        };
        /** CollectionPermission.categories.view */
        view: {
          /** CollectionPermission.categories.view.collection */
          collection: "categories";
          /** CollectionPermission.categories.view.action */
          action: "view";
        };
        /** CollectionPermission.categories.manage */
        manage: {
          /** CollectionPermission.categories.manage.collection */
          collection: "categories";
          /** CollectionPermission.categories.manage.action */
          action: "manage";
        };
        /** CollectionPermission.categories.edit */
        edit: {
          /** CollectionPermission.categories.edit.collection */
          collection: "categories";
          /** CollectionPermission.categories.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.contacts */
      contacts: {
        /** CollectionPermission.contacts.create */
        create: {
          /** CollectionPermission.contacts.create.collection */
          collection: "contacts";
          /** CollectionPermission.contacts.create.action */
          action: "create";
        };
        /** CollectionPermission.contacts.delete */
        delete: {
          /** CollectionPermission.contacts.delete.collection */
          collection: "contacts";
          /** CollectionPermission.contacts.delete.action */
          action: "delete";
        };
        /** CollectionPermission.contacts.view */
        view: {
          /** CollectionPermission.contacts.view.collection */
          collection: "contacts";
          /** CollectionPermission.contacts.view.action */
          action: "view";
        };
        /** CollectionPermission.contacts.manage */
        manage: {
          /** CollectionPermission.contacts.manage.collection */
          collection: "contacts";
          /** CollectionPermission.contacts.manage.action */
          action: "manage";
        };
        /** CollectionPermission.contacts.edit */
        edit: {
          /** CollectionPermission.contacts.edit.collection */
          collection: "contacts";
          /** CollectionPermission.contacts.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.courses */
      courses: {
        /** CollectionPermission.courses.create */
        create: {
          /** CollectionPermission.courses.create.collection */
          collection: "courses";
          /** CollectionPermission.courses.create.action */
          action: "create";
        };
        /** CollectionPermission.courses.delete */
        delete: {
          /** CollectionPermission.courses.delete.collection */
          collection: "courses";
          /** CollectionPermission.courses.delete.action */
          action: "delete";
        };
        /** CollectionPermission.courses.view */
        view: {
          /** CollectionPermission.courses.view.collection */
          collection: "courses";
          /** CollectionPermission.courses.view.action */
          action: "view";
        };
        /** CollectionPermission.courses.manage */
        manage: {
          /** CollectionPermission.courses.manage.collection */
          collection: "courses";
          /** CollectionPermission.courses.manage.action */
          action: "manage";
        };
        /** CollectionPermission.courses.edit */
        edit: {
          /** CollectionPermission.courses.edit.collection */
          collection: "courses";
          /** CollectionPermission.courses.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.dashboards */
      dashboards: {
        /** CollectionPermission.dashboards.create */
        create: {
          /** CollectionPermission.dashboards.create.collection */
          collection: "dashboards";
          /** CollectionPermission.dashboards.create.action */
          action: "create";
        };
        /** CollectionPermission.dashboards.delete */
        delete: {
          /** CollectionPermission.dashboards.delete.collection */
          collection: "dashboards";
          /** CollectionPermission.dashboards.delete.action */
          action: "delete";
        };
        /** CollectionPermission.dashboards.view */
        view: {
          /** CollectionPermission.dashboards.view.collection */
          collection: "dashboards";
          /** CollectionPermission.dashboards.view.action */
          action: "view";
        };
        /** CollectionPermission.dashboards.manage */
        manage: {
          /** CollectionPermission.dashboards.manage.collection */
          collection: "dashboards";
          /** CollectionPermission.dashboards.manage.action */
          action: "manage";
        };
        /** CollectionPermission.dashboards.edit */
        edit: {
          /** CollectionPermission.dashboards.edit.collection */
          collection: "dashboards";
          /** CollectionPermission.dashboards.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.deals */
      deals: {
        /** CollectionPermission.deals.create */
        create: {
          /** CollectionPermission.deals.create.collection */
          collection: "deals";
          /** CollectionPermission.deals.create.action */
          action: "create";
        };
        /** CollectionPermission.deals.delete */
        delete: {
          /** CollectionPermission.deals.delete.collection */
          collection: "deals";
          /** CollectionPermission.deals.delete.action */
          action: "delete";
        };
        /** CollectionPermission.deals.view */
        view: {
          /** CollectionPermission.deals.view.collection */
          collection: "deals";
          /** CollectionPermission.deals.view.action */
          action: "view";
        };
        /** CollectionPermission.deals.manage */
        manage: {
          /** CollectionPermission.deals.manage.collection */
          collection: "deals";
          /** CollectionPermission.deals.manage.action */
          action: "manage";
        };
        /** CollectionPermission.deals.edit */
        edit: {
          /** CollectionPermission.deals.edit.collection */
          collection: "deals";
          /** CollectionPermission.deals.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.lessons */
      lessons: {
        /** CollectionPermission.lessons.create */
        create: {
          /** CollectionPermission.lessons.create.collection */
          collection: "lessons";
          /** CollectionPermission.lessons.create.action */
          action: "create";
        };
        /** CollectionPermission.lessons.delete */
        delete: {
          /** CollectionPermission.lessons.delete.collection */
          collection: "lessons";
          /** CollectionPermission.lessons.delete.action */
          action: "delete";
        };
        /** CollectionPermission.lessons.view */
        view: {
          /** CollectionPermission.lessons.view.collection */
          collection: "lessons";
          /** CollectionPermission.lessons.view.action */
          action: "view";
        };
        /** CollectionPermission.lessons.manage */
        manage: {
          /** CollectionPermission.lessons.manage.collection */
          collection: "lessons";
          /** CollectionPermission.lessons.manage.action */
          action: "manage";
        };
        /** CollectionPermission.lessons.edit */
        edit: {
          /** CollectionPermission.lessons.edit.collection */
          collection: "lessons";
          /** CollectionPermission.lessons.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.products */
      products: {
        /** CollectionPermission.products.create */
        create: {
          /** CollectionPermission.products.create.collection */
          collection: "products";
          /** CollectionPermission.products.create.action */
          action: "create";
        };
        /** CollectionPermission.products.delete */
        delete: {
          /** CollectionPermission.products.delete.collection */
          collection: "products";
          /** CollectionPermission.products.delete.action */
          action: "delete";
        };
        /** CollectionPermission.products.view */
        view: {
          /** CollectionPermission.products.view.collection */
          collection: "products";
          /** CollectionPermission.products.view.action */
          action: "view";
        };
        /** CollectionPermission.products.manage */
        manage: {
          /** CollectionPermission.products.manage.collection */
          collection: "products";
          /** CollectionPermission.products.manage.action */
          action: "manage";
        };
        /** CollectionPermission.products.edit */
        edit: {
          /** CollectionPermission.products.edit.collection */
          collection: "products";
          /** CollectionPermission.products.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.prospects */
      prospects: {
        /** CollectionPermission.prospects.create */
        create: {
          /** CollectionPermission.prospects.create.collection */
          collection: "prospects";
          /** CollectionPermission.prospects.create.action */
          action: "create";
        };
        /** CollectionPermission.prospects.delete */
        delete: {
          /** CollectionPermission.prospects.delete.collection */
          collection: "prospects";
          /** CollectionPermission.prospects.delete.action */
          action: "delete";
        };
        /** CollectionPermission.prospects.view */
        view: {
          /** CollectionPermission.prospects.view.collection */
          collection: "prospects";
          /** CollectionPermission.prospects.view.action */
          action: "view";
        };
        /** CollectionPermission.prospects.manage */
        manage: {
          /** CollectionPermission.prospects.manage.collection */
          collection: "prospects";
          /** CollectionPermission.prospects.manage.action */
          action: "manage";
        };
        /** CollectionPermission.prospects.edit */
        edit: {
          /** CollectionPermission.prospects.edit.collection */
          collection: "prospects";
          /** CollectionPermission.prospects.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.quizzes */
      quizzes: {
        /** CollectionPermission.quizzes.create */
        create: {
          /** CollectionPermission.quizzes.create.collection */
          collection: "quizzes";
          /** CollectionPermission.quizzes.create.action */
          action: "create";
        };
        /** CollectionPermission.quizzes.delete */
        delete: {
          /** CollectionPermission.quizzes.delete.collection */
          collection: "quizzes";
          /** CollectionPermission.quizzes.delete.action */
          action: "delete";
        };
        /** CollectionPermission.quizzes.view */
        view: {
          /** CollectionPermission.quizzes.view.collection */
          collection: "quizzes";
          /** CollectionPermission.quizzes.view.action */
          action: "view";
        };
        /** CollectionPermission.quizzes.manage */
        manage: {
          /** CollectionPermission.quizzes.manage.collection */
          collection: "quizzes";
          /** CollectionPermission.quizzes.manage.action */
          action: "manage";
        };
        /** CollectionPermission.quizzes.edit */
        edit: {
          /** CollectionPermission.quizzes.edit.collection */
          collection: "quizzes";
          /** CollectionPermission.quizzes.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.reports */
      reports: {
        /** CollectionPermission.reports.create */
        create: {
          /** CollectionPermission.reports.create.collection */
          collection: "reports";
          /** CollectionPermission.reports.create.action */
          action: "create";
        };
        /** CollectionPermission.reports.delete */
        delete: {
          /** CollectionPermission.reports.delete.collection */
          collection: "reports";
          /** CollectionPermission.reports.delete.action */
          action: "delete";
        };
        /** CollectionPermission.reports.view */
        view: {
          /** CollectionPermission.reports.view.collection */
          collection: "reports";
          /** CollectionPermission.reports.view.action */
          action: "view";
        };
        /** CollectionPermission.reports.manage */
        manage: {
          /** CollectionPermission.reports.manage.collection */
          collection: "reports";
          /** CollectionPermission.reports.manage.action */
          action: "manage";
        };
        /** CollectionPermission.reports.edit */
        edit: {
          /** CollectionPermission.reports.edit.collection */
          collection: "reports";
          /** CollectionPermission.reports.edit.action */
          action: "edit";
        };
      };
      /** CollectionPermission.insights */
      insights: {
        /** CollectionPermission.insights.create */
        create: {
          /** CollectionPermission.insights.create.collection */
          collection: "insights";
          /** CollectionPermission.insights.create.action */
          action: "create";
        };
        /** CollectionPermission.insights.delete */
        delete: {
          /** CollectionPermission.insights.delete.collection */
          collection: "insights";
          /** CollectionPermission.insights.delete.action */
          action: "delete";
        };
        /** CollectionPermission.insights.view */
        view: {
          /** CollectionPermission.insights.view.collection */
          collection: "insights";
          /** CollectionPermission.insights.view.action */
          action: "view";
        };
        /** CollectionPermission.insights.manage */
        manage: {
          /** CollectionPermission.insights.manage.collection */
          collection: "insights";
          /** CollectionPermission.insights.manage.action */
          action: "manage";
        };
        /** CollectionPermission.insights.edit */
        edit: {
          /** CollectionPermission.insights.edit.collection */
          collection: "insights";
          /** CollectionPermission.insights.edit.action */
          action: "edit";
        };
      };
    };
    /**
     * Permissions
     * @description Permission map for easy access control lookup
     */
    Permissions: {
      /** Permissions.privileged */
      privileged: {
        /** Permissions.privileged.admin */
        admin: {
          /** Permissions.privileged.admin.collection */
          collection: "admin";
          /** Permissions.privileged.admin.action */
          action: "*";
        };
        /** Permissions.privileged.owner */
        owner: {
          /** Permissions.privileged.owner.collection */
          collection: "owner";
          /** Permissions.privileged.owner.action */
          action: "*";
        };
      };
      /** Permissions.notes */
      notes: {
        /** Permissions.notes.create */
        create: {
          /** Permissions.notes.create.collection */
          collection: "notes";
          /** Permissions.notes.create.action */
          action: "create";
        };
        /** Permissions.notes.delete */
        delete: {
          /** Permissions.notes.delete.collection */
          collection: "notes";
          /** Permissions.notes.delete.action */
          action: "delete";
        };
        /** Permissions.notes.view */
        view: {
          /** Permissions.notes.view.collection */
          collection: "notes";
          /** Permissions.notes.view.action */
          action: "view";
        };
        /** Permissions.notes.manage */
        manage: {
          /** Permissions.notes.manage.collection */
          collection: "notes";
          /** Permissions.notes.manage.action */
          action: "manage";
        };
        /** Permissions.notes.edit */
        edit: {
          /** Permissions.notes.edit.collection */
          collection: "notes";
          /** Permissions.notes.edit.action */
          action: "edit";
        };
      };
      /** Permissions.dashboard */
      dashboard: {
        /** Permissions.dashboard.create */
        create: {
          /** Permissions.dashboard.create.collection */
          collection: "dashboard";
          /** Permissions.dashboard.create.action */
          action: "create";
        };
        /** Permissions.dashboard.delete */
        delete: {
          /** Permissions.dashboard.delete.collection */
          collection: "dashboard";
          /** Permissions.dashboard.delete.action */
          action: "delete";
        };
        /** Permissions.dashboard.view */
        view: {
          /** Permissions.dashboard.view.collection */
          collection: "dashboard";
          /** Permissions.dashboard.view.action */
          action: "view";
        };
        /** Permissions.dashboard.manage */
        manage: {
          /** Permissions.dashboard.manage.collection */
          collection: "dashboard";
          /** Permissions.dashboard.manage.action */
          action: "manage";
        };
        /** Permissions.dashboard.edit */
        edit: {
          /** Permissions.dashboard.edit.collection */
          collection: "dashboard";
          /** Permissions.dashboard.edit.action */
          action: "edit";
        };
      };
      /** Permissions.accounts */
      accounts: {
        /** Permissions.accounts.create */
        create: {
          /** Permissions.accounts.create.collection */
          collection: "accounts";
          /** Permissions.accounts.create.action */
          action: "create";
        };
        /** Permissions.accounts.delete */
        delete: {
          /** Permissions.accounts.delete.collection */
          collection: "accounts";
          /** Permissions.accounts.delete.action */
          action: "delete";
        };
        /** Permissions.accounts.view */
        view: {
          /** Permissions.accounts.view.collection */
          collection: "accounts";
          /** Permissions.accounts.view.action */
          action: "view";
        };
        /** Permissions.accounts.manage */
        manage: {
          /** Permissions.accounts.manage.collection */
          collection: "accounts";
          /** Permissions.accounts.manage.action */
          action: "manage";
        };
        /** Permissions.accounts.edit */
        edit: {
          /** Permissions.accounts.edit.collection */
          collection: "accounts";
          /** Permissions.accounts.edit.action */
          action: "edit";
        };
      };
      /** Permissions.activities */
      activities: {
        /** Permissions.activities.create */
        create: {
          /** Permissions.activities.create.collection */
          collection: "activities";
          /** Permissions.activities.create.action */
          action: "create";
        };
        /** Permissions.activities.delete */
        delete: {
          /** Permissions.activities.delete.collection */
          collection: "activities";
          /** Permissions.activities.delete.action */
          action: "delete";
        };
        /** Permissions.activities.view */
        view: {
          /** Permissions.activities.view.collection */
          collection: "activities";
          /** Permissions.activities.view.action */
          action: "view";
        };
        /** Permissions.activities.manage */
        manage: {
          /** Permissions.activities.manage.collection */
          collection: "activities";
          /** Permissions.activities.manage.action */
          action: "manage";
        };
        /** Permissions.activities.edit */
        edit: {
          /** Permissions.activities.edit.collection */
          collection: "activities";
          /** Permissions.activities.edit.action */
          action: "edit";
        };
      };
      /** Permissions.analytics */
      analytics: {
        /** Permissions.analytics.create */
        create: {
          /** Permissions.analytics.create.collection */
          collection: "analytics";
          /** Permissions.analytics.create.action */
          action: "create";
        };
        /** Permissions.analytics.delete */
        delete: {
          /** Permissions.analytics.delete.collection */
          collection: "analytics";
          /** Permissions.analytics.delete.action */
          action: "delete";
        };
        /** Permissions.analytics.view */
        view: {
          /** Permissions.analytics.view.collection */
          collection: "analytics";
          /** Permissions.analytics.view.action */
          action: "view";
        };
        /** Permissions.analytics.manage */
        manage: {
          /** Permissions.analytics.manage.collection */
          collection: "analytics";
          /** Permissions.analytics.manage.action */
          action: "manage";
        };
        /** Permissions.analytics.edit */
        edit: {
          /** Permissions.analytics.edit.collection */
          collection: "analytics";
          /** Permissions.analytics.edit.action */
          action: "edit";
        };
      };
      /** Permissions.categories */
      categories: {
        /** Permissions.categories.create */
        create: {
          /** Permissions.categories.create.collection */
          collection: "categories";
          /** Permissions.categories.create.action */
          action: "create";
        };
        /** Permissions.categories.delete */
        delete: {
          /** Permissions.categories.delete.collection */
          collection: "categories";
          /** Permissions.categories.delete.action */
          action: "delete";
        };
        /** Permissions.categories.view */
        view: {
          /** Permissions.categories.view.collection */
          collection: "categories";
          /** Permissions.categories.view.action */
          action: "view";
        };
        /** Permissions.categories.manage */
        manage: {
          /** Permissions.categories.manage.collection */
          collection: "categories";
          /** Permissions.categories.manage.action */
          action: "manage";
        };
        /** Permissions.categories.edit */
        edit: {
          /** Permissions.categories.edit.collection */
          collection: "categories";
          /** Permissions.categories.edit.action */
          action: "edit";
        };
      };
      /** Permissions.contacts */
      contacts: {
        /** Permissions.contacts.create */
        create: {
          /** Permissions.contacts.create.collection */
          collection: "contacts";
          /** Permissions.contacts.create.action */
          action: "create";
        };
        /** Permissions.contacts.delete */
        delete: {
          /** Permissions.contacts.delete.collection */
          collection: "contacts";
          /** Permissions.contacts.delete.action */
          action: "delete";
        };
        /** Permissions.contacts.view */
        view: {
          /** Permissions.contacts.view.collection */
          collection: "contacts";
          /** Permissions.contacts.view.action */
          action: "view";
        };
        /** Permissions.contacts.manage */
        manage: {
          /** Permissions.contacts.manage.collection */
          collection: "contacts";
          /** Permissions.contacts.manage.action */
          action: "manage";
        };
        /** Permissions.contacts.edit */
        edit: {
          /** Permissions.contacts.edit.collection */
          collection: "contacts";
          /** Permissions.contacts.edit.action */
          action: "edit";
        };
      };
      /** Permissions.courses */
      courses: {
        /** Permissions.courses.create */
        create: {
          /** Permissions.courses.create.collection */
          collection: "courses";
          /** Permissions.courses.create.action */
          action: "create";
        };
        /** Permissions.courses.delete */
        delete: {
          /** Permissions.courses.delete.collection */
          collection: "courses";
          /** Permissions.courses.delete.action */
          action: "delete";
        };
        /** Permissions.courses.view */
        view: {
          /** Permissions.courses.view.collection */
          collection: "courses";
          /** Permissions.courses.view.action */
          action: "view";
        };
        /** Permissions.courses.manage */
        manage: {
          /** Permissions.courses.manage.collection */
          collection: "courses";
          /** Permissions.courses.manage.action */
          action: "manage";
        };
        /** Permissions.courses.edit */
        edit: {
          /** Permissions.courses.edit.collection */
          collection: "courses";
          /** Permissions.courses.edit.action */
          action: "edit";
        };
      };
      /** Permissions.dashboards */
      dashboards: {
        /** Permissions.dashboards.create */
        create: {
          /** Permissions.dashboards.create.collection */
          collection: "dashboards";
          /** Permissions.dashboards.create.action */
          action: "create";
        };
        /** Permissions.dashboards.delete */
        delete: {
          /** Permissions.dashboards.delete.collection */
          collection: "dashboards";
          /** Permissions.dashboards.delete.action */
          action: "delete";
        };
        /** Permissions.dashboards.view */
        view: {
          /** Permissions.dashboards.view.collection */
          collection: "dashboards";
          /** Permissions.dashboards.view.action */
          action: "view";
        };
        /** Permissions.dashboards.manage */
        manage: {
          /** Permissions.dashboards.manage.collection */
          collection: "dashboards";
          /** Permissions.dashboards.manage.action */
          action: "manage";
        };
        /** Permissions.dashboards.edit */
        edit: {
          /** Permissions.dashboards.edit.collection */
          collection: "dashboards";
          /** Permissions.dashboards.edit.action */
          action: "edit";
        };
      };
      /** Permissions.deals */
      deals: {
        /** Permissions.deals.create */
        create: {
          /** Permissions.deals.create.collection */
          collection: "deals";
          /** Permissions.deals.create.action */
          action: "create";
        };
        /** Permissions.deals.delete */
        delete: {
          /** Permissions.deals.delete.collection */
          collection: "deals";
          /** Permissions.deals.delete.action */
          action: "delete";
        };
        /** Permissions.deals.view */
        view: {
          /** Permissions.deals.view.collection */
          collection: "deals";
          /** Permissions.deals.view.action */
          action: "view";
        };
        /** Permissions.deals.manage */
        manage: {
          /** Permissions.deals.manage.collection */
          collection: "deals";
          /** Permissions.deals.manage.action */
          action: "manage";
        };
        /** Permissions.deals.edit */
        edit: {
          /** Permissions.deals.edit.collection */
          collection: "deals";
          /** Permissions.deals.edit.action */
          action: "edit";
        };
      };
      /** Permissions.lessons */
      lessons: {
        /** Permissions.lessons.create */
        create: {
          /** Permissions.lessons.create.collection */
          collection: "lessons";
          /** Permissions.lessons.create.action */
          action: "create";
        };
        /** Permissions.lessons.delete */
        delete: {
          /** Permissions.lessons.delete.collection */
          collection: "lessons";
          /** Permissions.lessons.delete.action */
          action: "delete";
        };
        /** Permissions.lessons.view */
        view: {
          /** Permissions.lessons.view.collection */
          collection: "lessons";
          /** Permissions.lessons.view.action */
          action: "view";
        };
        /** Permissions.lessons.manage */
        manage: {
          /** Permissions.lessons.manage.collection */
          collection: "lessons";
          /** Permissions.lessons.manage.action */
          action: "manage";
        };
        /** Permissions.lessons.edit */
        edit: {
          /** Permissions.lessons.edit.collection */
          collection: "lessons";
          /** Permissions.lessons.edit.action */
          action: "edit";
        };
      };
      /** Permissions.products */
      products: {
        /** Permissions.products.create */
        create: {
          /** Permissions.products.create.collection */
          collection: "products";
          /** Permissions.products.create.action */
          action: "create";
        };
        /** Permissions.products.delete */
        delete: {
          /** Permissions.products.delete.collection */
          collection: "products";
          /** Permissions.products.delete.action */
          action: "delete";
        };
        /** Permissions.products.view */
        view: {
          /** Permissions.products.view.collection */
          collection: "products";
          /** Permissions.products.view.action */
          action: "view";
        };
        /** Permissions.products.manage */
        manage: {
          /** Permissions.products.manage.collection */
          collection: "products";
          /** Permissions.products.manage.action */
          action: "manage";
        };
        /** Permissions.products.edit */
        edit: {
          /** Permissions.products.edit.collection */
          collection: "products";
          /** Permissions.products.edit.action */
          action: "edit";
        };
      };
      /** Permissions.prospects */
      prospects: {
        /** Permissions.prospects.create */
        create: {
          /** Permissions.prospects.create.collection */
          collection: "prospects";
          /** Permissions.prospects.create.action */
          action: "create";
        };
        /** Permissions.prospects.delete */
        delete: {
          /** Permissions.prospects.delete.collection */
          collection: "prospects";
          /** Permissions.prospects.delete.action */
          action: "delete";
        };
        /** Permissions.prospects.view */
        view: {
          /** Permissions.prospects.view.collection */
          collection: "prospects";
          /** Permissions.prospects.view.action */
          action: "view";
        };
        /** Permissions.prospects.manage */
        manage: {
          /** Permissions.prospects.manage.collection */
          collection: "prospects";
          /** Permissions.prospects.manage.action */
          action: "manage";
        };
        /** Permissions.prospects.edit */
        edit: {
          /** Permissions.prospects.edit.collection */
          collection: "prospects";
          /** Permissions.prospects.edit.action */
          action: "edit";
        };
      };
      /** Permissions.quizzes */
      quizzes: {
        /** Permissions.quizzes.create */
        create: {
          /** Permissions.quizzes.create.collection */
          collection: "quizzes";
          /** Permissions.quizzes.create.action */
          action: "create";
        };
        /** Permissions.quizzes.delete */
        delete: {
          /** Permissions.quizzes.delete.collection */
          collection: "quizzes";
          /** Permissions.quizzes.delete.action */
          action: "delete";
        };
        /** Permissions.quizzes.view */
        view: {
          /** Permissions.quizzes.view.collection */
          collection: "quizzes";
          /** Permissions.quizzes.view.action */
          action: "view";
        };
        /** Permissions.quizzes.manage */
        manage: {
          /** Permissions.quizzes.manage.collection */
          collection: "quizzes";
          /** Permissions.quizzes.manage.action */
          action: "manage";
        };
        /** Permissions.quizzes.edit */
        edit: {
          /** Permissions.quizzes.edit.collection */
          collection: "quizzes";
          /** Permissions.quizzes.edit.action */
          action: "edit";
        };
      };
      /** Permissions.reports */
      reports: {
        /** Permissions.reports.create */
        create: {
          /** Permissions.reports.create.collection */
          collection: "reports";
          /** Permissions.reports.create.action */
          action: "create";
        };
        /** Permissions.reports.delete */
        delete: {
          /** Permissions.reports.delete.collection */
          collection: "reports";
          /** Permissions.reports.delete.action */
          action: "delete";
        };
        /** Permissions.reports.view */
        view: {
          /** Permissions.reports.view.collection */
          collection: "reports";
          /** Permissions.reports.view.action */
          action: "view";
        };
        /** Permissions.reports.manage */
        manage: {
          /** Permissions.reports.manage.collection */
          collection: "reports";
          /** Permissions.reports.manage.action */
          action: "manage";
        };
        /** Permissions.reports.edit */
        edit: {
          /** Permissions.reports.edit.collection */
          collection: "reports";
          /** Permissions.reports.edit.action */
          action: "edit";
        };
      };
      /** Permissions.insights */
      insights: {
        /** Permissions.insights.create */
        create: {
          /** Permissions.insights.create.collection */
          collection: "insights";
          /** Permissions.insights.create.action */
          action: "create";
        };
        /** Permissions.insights.delete */
        delete: {
          /** Permissions.insights.delete.collection */
          collection: "insights";
          /** Permissions.insights.delete.action */
          action: "delete";
        };
        /** Permissions.insights.view */
        view: {
          /** Permissions.insights.view.collection */
          collection: "insights";
          /** Permissions.insights.view.action */
          action: "view";
        };
        /** Permissions.insights.manage */
        manage: {
          /** Permissions.insights.manage.collection */
          collection: "insights";
          /** Permissions.insights.manage.action */
          action: "manage";
        };
        /** Permissions.insights.edit */
        edit: {
          /** Permissions.insights.edit.collection */
          collection: "insights";
          /** Permissions.insights.edit.action */
          action: "edit";
        };
      };
    };
    /** PipelineAttr */
    PipelineAttr: {
      /** PipelineAttr.id */
      id: string;
      /** PipelineAttr.name */
      name: string;
      /** PipelineAttr.description */
      description?: string;
      /** PipelineAttr.isDefault */
      isDefault: boolean;
      /** PipelineAttr.global */
      global: boolean;
      /** PipelineAttr.tenantId */
      tenantId: string;
      /** PipelineAttr.createdById */
      createdById: string;
    };
    /** PipelineQueryBiz */
    PipelineQueryBiz: {
      order?: components["schemas"]["Order"];
    };
    /** PipelineCreateBiz */
    PipelineCreateBiz: {
      /** PipelineCreateBiz.name */
      name: string;
      /** PipelineCreateBiz.description */
      description?: string;
      /** PipelineCreateBiz.global */
      global?: boolean;
    };
    /** PipelineModifyBiz */
    PipelineModifyBiz: {
      /** PipelineModifyBiz.name */
      name?: string;
      /** PipelineModifyBiz.description */
      description?: string;
      /** PipelineModifyBiz.global */
      global?: boolean;
    };
    /** PipelineTeamAttr */
    PipelineTeamAttr: {
      /** PipelineTeamAttr.teamId */
      teamId: string;
      /** PipelineTeamAttr.pipelineId */
      pipelineId: string;
    };
    /** PipelineTeamCreateBiz */
    PipelineTeamCreateBiz: {
      /** PipelineTeamCreateBiz.teamId */
      teamId: string;
      /** PipelineTeamCreateBiz.pipelineId */
      pipelineId: string;
    };
    /** ProductAttrs */
    ProductAttrs: {
      /** ProductAttrs.id */
      id?: string;
      /** ProductAttrs.tenant_id */
      tenant_id: string;
      /** ProductAttrs.name */
      name?: string;
      /** ProductAttrs.price */
      price?: number;
      /** ProductAttrs.code */
      code?: string;
      /** ProductAttrs.category */
      category?: string;
      /** ProductAttrs.unit */
      unit?: string;
      /** ProductAttrs.tax */
      tax?: string;
      /** ProductAttrs.description */
      description?: string;
      /** ProductAttrs.deleted */
      deleted: boolean;
    };
    /** ProductAttr */
    ProductAttr: {
      /**
       * ProductAttr.id
       * Format: uuid
       */
      id?: string;
      /**
       * ProductAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** ProductAttr.name */
      name?: string;
      /** ProductAttr.price */
      price?: number;
      /** ProductAttr.code */
      code?: string;
      /** ProductAttr.category */
      category?: string;
      /** ProductAttr.unit */
      unit?: string;
      /** ProductAttr.tax */
      tax?: string;
      /** ProductAttr.description */
      description?: string;
      /** ProductAttr.deleted */
      deleted: boolean;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** QuizAttr */
    QuizAttr: {
      /**
       * QuizAttr.quizId
       * Format: uuid
       */
      quizId: string;
      /**
       * QuizAttr.maxAttempts
       * @description The maximum number of attempts allowed for this quiz. If null, infinite attempts
       */
      maxAttempts?: number | null;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** QuizCreateBiz */
    QuizCreateBiz: {
      /** QuizCreateBiz.maxAttempts */
      maxAttempts?: number | null;
      /** QuizCreateBiz.questions */
      questions: components["schemas"]["QuizQuestionCreateBiz"][];
    };
    /** QuizCreateSubmissionBiz */
    QuizCreateSubmissionBiz: {
      /** QuizCreateSubmissionBiz.answers */
      answers: {
        /** QuizCreateSubmissionBiz.answers.[].quizQuestionId */
        quizQuestionId: string;
        /** QuizCreateSubmissionBiz.answers.[].id */
        id: string;
      }[];
    };
    /** QuizQuestionType */
    QuizQuestionType: "multipleChoice";
    /** QuizQuestionChoice */
    QuizQuestionChoice: {
      /** QuizQuestionChoice.id */
      id: string;
      /** QuizQuestionChoice.answer */
      answer: string;
      /** QuizQuestionChoice.correct */
      correct: boolean;
    };
    /** QuizQuestionAttr */
    QuizQuestionAttr: {
      /**
       * QuizQuestionAttr.quizQuestionId
       * Format: uuid
       */
      quizQuestionId: string;
      /**
       * QuizQuestionAttr.quizId
       * Format: uuid
       */
      quizId: string;
      /** QuizQuestionAttr.title */
      title?: string;
      /** QuizQuestionAttr.type */
      type: "multipleChoice";
      /** QuizQuestionAttr.choices */
      choices: components["schemas"]["QuizQuestionChoice"][];
      /** QuizQuestionAttr.order */
      order: number;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** QuizQuestionCreateBiz */
    QuizQuestionCreateBiz: {
      /** QuizQuestionCreateBiz.type */
      type: "multipleChoice";
      /** QuizQuestionCreateBiz.order */
      order: number;
      /** QuizQuestionCreateBiz.title */
      title?: string;
      /** QuizQuestionCreateBiz.choices */
      choices: components["schemas"]["QuizQuestionChoice"][];
    };
    /** QuizQuestionSubmissionBiz */
    QuizQuestionSubmissionBiz: {
      /** QuizQuestionSubmissionBiz.answers */
      answers: {
        /** QuizQuestionSubmissionBiz.answers.[].id */
        id: string;
      }[];
    };
    /** QuizQuestionSubmissionAttr */
    QuizQuestionSubmissionAttr: {
      /**
       * QuizQuestionSubmissionAttr.quizQuestionSubmissionId
       * Format: uuid
       */
      quizQuestionSubmissionId: string;
      /**
       * QuizQuestionSubmissionAttr.userId
       * Format: uuid
       */
      userId: string;
      /**
       * QuizQuestionSubmissionAttr.quizSubmissionId
       * Format: uuid
       */
      quizSubmissionId: string;
      /**
       * QuizQuestionSubmissionAttr.quizQuestionId
       * Format: uuid
       */
      quizQuestionId: string;
      /**
       * QuizQuestionSubmissionAttr.correct
       * @description Whether the answer was correct
       */
      correct: boolean;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** QuizSubmissionStatus */
    QuizSubmissionStatus: "in-progress" | "pass" | "fail";
    /** QuizSubmissionAttr */
    QuizSubmissionAttr: {
      /**
       * QuizSubmissionAttr.quizSubmissionId
       * Format: uuid
       */
      quizSubmissionId: string;
      /**
       * QuizSubmissionAttr.userId
       * Format: uuid
       */
      userId: string;
      /**
       * QuizSubmissionAttr.quizId
       * Format: uuid
       */
      quizId: string;
      /**
       * QuizSubmissionAttr.score
       * @description Score is not calculated until all questions have been answered.
       */
      score?: number | null;
      /**
       * QuizSubmissionAttr.completedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      completedAt?: components["schemas"]["Date"] | null;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** ReportType */
    ReportType: "TREASURY";
    /** ReportTreasuryService */
    ReportTreasuryService: {
      /** ReportTreasuryService.id */
      id: number;
      /** ReportTreasuryService.name */
      name: string;
      /** ReportTreasuryService.total_items */
      total_items: number;
      /** ReportTreasuryService.item_fee */
      item_fee: number;
      /** ReportTreasuryService.proposed_item_fee */
      proposed_item_fee: number;
    };
    /** ReportTreasuryInput */
    ReportTreasuryInput: {
      /** ReportTreasuryInput.type */
      type: "TREASURY";
      /** ReportTreasuryInput.client_name */
      client_name: string;
      /** ReportTreasuryInput.proposed_bank_name */
      proposed_bank_name: string;
      /** ReportTreasuryInput.date */
      date: string;
      /** ReportTreasuryInput.average_balance */
      average_balance: number;
      /** ReportTreasuryInput.services */
      services: components["schemas"]["ReportTreasuryService"][];
      /** ReportTreasuryInput.logo_white */
      logo_white: string;
      /** ReportTreasuryInput.logo_dark */
      logo_dark: string;
    };
    /** ReportInput */
    ReportInput: {
      /** ReportInput.type */
      type: "TREASURY";
      /** ReportInput.client_name */
      client_name: string;
      /** ReportInput.proposed_bank_name */
      proposed_bank_name: string;
      /** ReportInput.date */
      date: string;
      /** ReportInput.average_balance */
      average_balance: number;
      /** ReportInput.services */
      services: components["schemas"]["ReportTreasuryService"][];
      /** ReportInput.logo_white */
      logo_white: string;
      /** ReportInput.logo_dark */
      logo_dark: string;
    };
    /** ReportAttrs */
    ReportAttrs: {
      /** ReportAttrs.id */
      id: string;
      /** ReportAttrs.organization_id */
      organization_id: string;
      /** ReportAttrs.created_by */
      created_by: string;
      /** ReportAttrs.file_id */
      file_id?: string;
      type: components["schemas"]["ReportType"];
      input: components["schemas"]["ReportInput"];
      /** ReportAttrs.month */
      month?: string;
      /** ReportAttrs.tenant_id */
      tenant_id: string;
    };
    /** ReportAttr */
    ReportAttr: {
      /**
       * ReportAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * ReportAttr.organization_id
       * Format: uuid
       */
      organization_id: string;
      /**
       * ReportAttr.created_by
       * Format: uuid
       */
      created_by: string;
      /**
       * ReportAttr.file_id
       * Format: uuid
       */
      file_id?: string;
      /** ReportAttr.type */
      type: "TREASURY";
      /** ReportAttr.input */
      input: {
        /** ReportAttr.input.type */
        type: "TREASURY";
        /** ReportAttr.input.client_name */
        client_name: string;
        /** ReportAttr.input.proposed_bank_name */
        proposed_bank_name: string;
        /** ReportAttr.input.date */
        date: string;
        /** ReportAttr.input.average_balance */
        average_balance: number;
        /** ReportAttr.input.services */
        services: components["schemas"]["ReportTreasuryService"][];
        /** ReportAttr.input.logo_white */
        logo_white: string;
        /** ReportAttr.input.logo_dark */
        logo_dark: string;
      };
      /** ReportAttr.month */
      month?: string;
      /**
       * ReportAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** RoleAttr */
    RoleAttr: {
      /**
       * RoleAttr.id
       * Format: uuid
       */
      id?: string;
      /**
       * RoleAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** RoleAttr.name */
      name: string;
      /** RoleAttr.icon */
      icon?: string;
      /** RoleAttr.description */
      description?: string;
      /** RoleAttr.ip_access */
      ip_access?: string;
      /** RoleAttr.enforce_tfa */
      enforce_tfa: boolean;
      /** RoleAttr.admin_access */
      admin_access: boolean;
      /** RoleAttr.owner_access */
      owner_access: boolean;
      /**
       * RoleAttr.app_access
       * @description Used for application users. If the role has associated permissions,
       * those permissions will superseded default app_access permissions.
       */
      app_access: boolean;
    };
    /** RoleQueryBiz */
    RoleQueryBiz: {
      order?: components["schemas"]["Order"];
      /** RoleQueryBiz.search */
      search?: string;
      /**
       * RoleQueryBiz.self
       * @description Filters result by self. As users with elevated permissions can query data
       * across a tenant(s) and user(s), there may be situations where a user
       * would like to see data related only about themselves.
       * This includes data created by them or data assigned to them.
       */
      self?: boolean;
    };
    /** RoleCreateBiz */
    RoleCreateBiz: {
      /** RoleCreateBiz.name */
      name: string;
      /** RoleCreateBiz.description */
      description?: string;
      /** RoleCreateBiz.admin_access */
      admin_access: boolean;
      /** RoleCreateBiz.owner_access */
      owner_access: boolean;
    };
    /** RoleModifyBiz */
    RoleModifyBiz: {
      /** RoleModifyBiz.name */
      name?: string;
      /** RoleModifyBiz.description */
      description?: string;
      /** RoleModifyBiz.admin_access */
      admin_access?: boolean;
      /** RoleModifyBiz.owner_access */
      owner_access?: boolean;
    };
    /** RpmgSummaryAttr */
    RpmgSummaryAttr: {
      /**
       * RpmgSummaryAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * RpmgSummaryAttr.rpmg_vertical_id
       * Format: uuid
       */
      rpmg_vertical_id: string;
      /** RpmgSummaryAttr.average_p_card_spending */
      average_p_card_spending: number;
      /** RpmgSummaryAttr.average_p_card_transactions */
      average_p_card_transactions: number;
      /** RpmgSummaryAttr.average_spending_per_transaction */
      average_spending_per_transaction: number;
      /** RpmgSummaryAttr.average_spending_per_mm_revenue */
      average_spending_per_mm_revenue: number;
    };
    /** RpmgTransactionAttr */
    RpmgTransactionAttr: {
      /**
       * RpmgTransactionAttr.id
       * Format: uuid
       */
      id: string;
      /** RpmgTransactionAttr.name */
      name: string;
      /**
       * RpmgTransactionAttr.range
       * @description Monetary range summary. e.g. <2500, 2500-10000, >10000
       */
      range: string;
    };
    /** RpmgTransactionSummaryAttr */
    RpmgTransactionSummaryAttr: {
      /**
       * RpmgTransactionSummaryAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * RpmgTransactionSummaryAttr.rpmg_vertical_id
       * Format: uuid
       */
      rpmg_vertical_id: string;
      /**
       * RpmgTransactionSummaryAttr.rpmg_transaction_id
       * Format: uuid
       */
      rpmg_transaction_id: string;
      /**
       * RpmgTransactionSummaryAttr.all_card_platforms
       * @description Represents a percentage value
       */
      all_card_platforms: number;
      /**
       * RpmgTransactionSummaryAttr.checks
       * @description Represents a percentage value
       */
      checks: number;
      /**
       * RpmgTransactionSummaryAttr.ach
       * @description Represents a percentage value
       */
      ach: number;
      /**
       * RpmgTransactionSummaryAttr.wire_transfer
       * @description Represents a percentage value
       */
      wire_transfer: number;
    };
    /** RpmgVerticalAttr */
    RpmgVerticalAttr: {
      /**
       * RpmgVerticalAttr.id
       * Format: uuid
       */
      id: string;
      /** RpmgVerticalAttr.industry */
      industry: string;
      /** RpmgVerticalAttr.description */
      description: string;
    };
    /** SearchAttr */
    SearchAttr: {
      /** SearchAttr.id */
      id?: string;
      /** SearchAttr.type */
      type: string;
      /** SearchAttr.name */
      name: string;
      /** SearchAttr.value */
      value: string;
      /** SearchAttr.userId */
      userId: string;
      /** SearchAttr.tenantId */
      tenantId: string;
    };
    /** SearchType */
    SearchType: "organization" | "people" | "domain";
    /** SearchCreateBiz */
    SearchCreateBiz: {
      /** SearchCreateBiz.name */
      name: string;
      /** SearchCreateBiz.type */
      type: string;
      /** SearchCreateBiz.value */
      value: string;
    };
    /** SearchModifyBiz */
    SearchModifyBiz: {
      /** SearchModifyBiz.name */
      name?: string;
      /** SearchModifyBiz.type */
      type?: string;
      /** SearchModifyBiz.value */
      value?: string;
    };
    /** SessionAttr */
    SessionAttr: {
      /** SessionAttr.id */
      id: number;
      /**
       * SessionAttr.user
       * Format: uuid
       */
      user: string;
      /**
       * SessionAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** SessionAttr.token */
      token: string;
      expires: components["schemas"]["Date"];
      /** SessionAttr.ip */
      ip: string;
      /** SessionAttr.user_agent */
      user_agent: string;
    };
    /** SpSummaryAggregationType */
    SpSummaryAggregationType: "AVERAGE";
    /** SpSummaryAttr */
    SpSummaryAttr: {
      /**
       * SpSummaryAttr.id
       * Format: uuid
       */
      id: string;
      /** SpSummaryAttr.aggregation_type */
      aggregation_type?: "AVERAGE" | null;
      report_date: components["schemas"]["Date"];
      /** SpSummaryAttr.days_sales_out */
      days_sales_out?: number | null;
      /** SpSummaryAttr.days_payable_out */
      days_payable_out?: number | null;
      /** SpSummaryAttr.working_capital */
      working_capital?: number | null;
      /** SpSummaryAttr.working_capital_ratio */
      working_capital_ratio?: number | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** TeamAttr */
    TeamAttr: {
      /**
       * TeamAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * TeamAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
      /** TeamAttr.name */
      name: string;
      /** TeamAttr.description */
      description?: string | null;
      /** TeamAttr.isActive */
      isActive: boolean;
      /**
       * TeamAttr.deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** TeamCreateBiz */
    TeamCreateBiz: {
      /** TeamCreateBiz.name */
      name: string;
      /** TeamCreateBiz.description */
      description?: string | null;
      /** TeamCreateBiz.isActive */
      isActive?: boolean;
      /** TeamCreateBiz.members */
      members: {
        /** TeamCreateBiz.members.[].userId */
        userId: string;
        /** TeamCreateBiz.members.[].isManager */
        isManager?: boolean;
      }[];
    };
    /** TeamModifyBiz */
    TeamModifyBiz: {
      /** TeamModifyBiz.name */
      name?: string;
      /** TeamModifyBiz.description */
      description?: string | null;
      /** TeamModifyBiz.isActive */
      isActive?: boolean;
    };
    /** TeamMemberAttr */
    TeamMemberAttr: {
      /**
       * TeamMemberAttr.teamId
       * Format: uuid
       */
      teamId: string;
      /**
       * TeamMemberAttr.userId
       * Format: uuid
       */
      userId: string;
      /**
       * TeamMemberAttr.isManager
       * @description Only one manager is allowed per team
       */
      isManager: boolean;
      /**
       * TeamMemberAttr.deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** GetTeamsQuery */
    GetTeamsQuery: {
      /** GetTeamsQuery.order, GetTeamsQuery.order.[] */
      order?: components["schemas"]["Order"][];
    };
    /** TeamMemberCreateBiz */
    TeamMemberCreateBiz: {
      /**
       * TeamMemberCreateBiz.isManager
       * @description Only one manager is allowed per team
       */
      isManager?: boolean;
    };
    /** MemberTeamCreateBiz */
    MemberTeamCreateBiz: {
      /**
       * MemberTeamCreateBiz.isManager
       * @description Only one manager is allowed per team
       */
      isManager?: boolean;
      /**
       * MemberTeamCreateBiz.teamId
       * Format: uuid
       */
      teamId: string;
    };
    /** TeamMemberUpsertBiz */
    TeamMemberUpsertBiz: {
      /**
       * TeamMemberUpsertBiz.userId
       * Format: uuid
       */
      userId: string;
      /**
       * TeamMemberUpsertBiz.isManager
       * @description Only one manager is allowed per team
       */
      isManager?: boolean;
    };
    /** TenantConfigQuiz */
    TenantConfigQuiz: {
      /** TenantConfigQuiz.maxPoints */
      maxPoints: number;
      /** TenantConfigQuiz.maxAttempts */
      maxAttempts: number;
      /** TenantConfigQuiz.passingScore */
      passingScore: number;
    };
    /** TenantConfigAttr */
    TenantConfigAttr: {
      /** TenantConfigAttr.tenantId */
      tenantId: string;
      /** TenantConfigAttr.quiz */
      quiz: {
        /** TenantConfigAttr.quiz.maxPoints */
        maxPoints: number;
        /** TenantConfigAttr.quiz.maxAttempts */
        maxAttempts: number;
        /** TenantConfigAttr.quiz.passingScore */
        passingScore: number;
      };
    };
    /** TenantConfigCreateBiz */
    TenantConfigCreateBiz: {
      /** TenantConfigCreateBiz.quiz */
      quiz: {
        /** TenantConfigCreateBiz.quiz.maxPoints */
        maxPoints: number;
        /** TenantConfigCreateBiz.quiz.maxAttempts */
        maxAttempts: number;
        /** TenantConfigCreateBiz.quiz.passingScore */
        passingScore: number;
      };
    };
    /** TenantConfigModifyBiz */
    TenantConfigModifyBiz: {
      /** TenantConfigModifyBiz.quiz */
      quiz: {
        /** TenantConfigModifyBiz.quiz.maxPoints */
        maxPoints: number;
        /** TenantConfigModifyBiz.quiz.maxAttempts */
        maxAttempts: number;
        /** TenantConfigModifyBiz.quiz.passingScore */
        passingScore: number;
      };
    };
    /** TenantColor */
    TenantColor: {
      /** TenantColor.name */
      name: string;
      /** TenantColor.primaryColor */
      primaryColor: string;
      /** TenantColor.secondaryColor */
      secondaryColor: string;
    };
    /** TenantAttrs */
    TenantAttrs: {
      /** TenantAttrs.id */
      id?: string;
      /** TenantAttrs.name */
      name: string;
      /** TenantAttrs.type */
      type: string;
      /** TenantAttrs.domain */
      domain: string;
      /** TenantAttrs.modules */
      modules: string;
      colors: components["schemas"]["TenantColor"];
      /** TenantAttrs.logo */
      logo: string;
      /** TenantAttrs.icon */
      icon?: string | null;
      /** TenantAttrs.use_logo */
      use_logo?: boolean | null;
      /** TenantAttrs.description */
      description?: string | null;
      /** TenantAttrs.settings */
      settings?: { [key: string]: unknown } | null;
    };
    /** TenantAttr */
    TenantAttr: {
      /**
       * TenantAttr.id
       * Format: uuid
       */
      id?: string;
      /** TenantAttr.name */
      name: string;
      /** TenantAttr.type */
      type: string;
      /** TenantAttr.domain */
      domain: string;
      /** TenantAttr.modules */
      modules: string;
      /** TenantAttr.colors */
      colors: {
        /** TenantAttr.colors.name */
        name: string;
        /** TenantAttr.colors.primaryColor */
        primaryColor: string;
        /** TenantAttr.colors.secondaryColor */
        secondaryColor: string;
      };
      /** TenantAttr.logo */
      logo: string;
      /** TenantAttr.icon */
      icon?: string | null;
      /** TenantAttr.use_logo */
      use_logo?: boolean | null;
      /** TenantAttr.description */
      description?: string | null;
      /** TenantAttr.settings */
      settings?: { [key: string]: unknown } | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** TenantQueryBiz */
    TenantQueryBiz: {
      /** TenantQueryBiz.search */
      search?: string;
      order?: components["schemas"]["Order"];
      /** TenantQueryBiz.includeOwners */
      includeOwners?: boolean;
    };
    /** TenantCreateBiz */
    TenantCreateBiz: {
      /** TenantCreateBiz.description */
      description?: string | null;
      /** TenantCreateBiz.icon */
      icon?: string | null;
      /** TenantCreateBiz.use_logo */
      use_logo?: boolean | null;
      /** TenantCreateBiz.settings */
      settings?: { [key: string]: unknown } | null;
      /** TenantCreateBiz.name */
      name: string;
      /** TenantCreateBiz.type */
      type: string;
      /** TenantCreateBiz.domain */
      domain: string;
      /** TenantCreateBiz.modules */
      modules: string;
      /** TenantCreateBiz.colors */
      colors: {
        /** TenantCreateBiz.colors.name */
        name: string;
        /** TenantCreateBiz.colors.primaryColor */
        primaryColor: string;
        /** TenantCreateBiz.colors.secondaryColor */
        secondaryColor: string;
      };
      /** TenantCreateBiz.logo */
      logo: string;
    };
    /** TenantModifyBiz */
    TenantModifyBiz: {
      /** TenantModifyBiz.name */
      name?: string;
      /** TenantModifyBiz.type */
      type?: string;
      /** TenantModifyBiz.description */
      description?: string | null;
      /** TenantModifyBiz.icon */
      icon?: string | null;
      /** TenantModifyBiz.domain */
      domain?: string;
      /** TenantModifyBiz.modules */
      modules?: string;
      colors?: components["schemas"]["TenantColor"];
      /** TenantModifyBiz.logo */
      logo?: string;
      /** TenantModifyBiz.use_logo */
      use_logo?: boolean | null;
      /** TenantModifyBiz.settings */
      settings?: { [key: string]: unknown } | null;
    };
    /** TenantDealStageAttrs */
    TenantDealStageAttrs: {
      /** TenantDealStageAttrs.id */
      id?: string;
      /** TenantDealStageAttrs.name */
      name: string;
      /** TenantDealStageAttrs.description */
      description?: string;
      /** TenantDealStageAttrs.active */
      active?: boolean;
      /** TenantDealStageAttrs.position */
      position: number;
      /** TenantDealStageAttrs.probability */
      probability?: number;
      /** TenantDealStageAttrs.pipelineId */
      pipelineId: string;
    };
    /** TenantDealStageAttr */
    TenantDealStageAttr: {
      /**
       * TenantDealStageAttr.id
       * Format: uuid
       */
      id?: string;
      /** TenantDealStageAttr.name */
      name: string;
      /** TenantDealStageAttr.description */
      description?: string;
      /** TenantDealStageAttr.active */
      active?: boolean;
      /** TenantDealStageAttr.position */
      position: number;
      /** TenantDealStageAttr.probability */
      probability?: number;
      /**
       * TenantDealStageAttr.pipelineId
       * Format: uuid
       */
      pipelineId: string;
    };
    /** TenantDealStageCreateBiz */
    TenantDealStageCreateBiz: {
      /** TenantDealStageCreateBiz.name */
      name: string;
      /** TenantDealStageCreateBiz.description */
      description?: string;
      /** TenantDealStageCreateBiz.position */
      position: number;
      /** TenantDealStageCreateBiz.active */
      active?: boolean;
      /** TenantDealStageCreateBiz.probability */
      probability?: number;
      /**
       * TenantDealStageCreateBiz.pipelineId
       * Format: uuid
       */
      pipelineId: string;
    };
    /** TenantIntegrationType */
    TenantIntegrationType: "FISERV";
    /** TenantIntegrationCredential */
    TenantIntegrationCredential: {
      /** TenantIntegrationCredential.url */
      url: string;
      /** TenantIntegrationCredential.client_id */
      client_id: string;
      /** TenantIntegrationCredential.client_secret */
      client_secret: string;
    };
    /** TenantIntegrationAttr */
    TenantIntegrationAttr: {
      /**
       * TenantIntegrationAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * TenantIntegrationAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /** TenantIntegrationAttr.type */
      type: "FISERV";
      /** TenantIntegrationAttr.credentials */
      credentials: {
        /** TenantIntegrationAttr.credentials.url */
        url: string;
        /** TenantIntegrationAttr.credentials.client_id */
        client_id: string;
        /** TenantIntegrationAttr.credentials.client_secret */
        client_secret: string;
      };
      /** TenantIntegrationAttr.enabled */
      enabled: boolean;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** UserCredentialAttr */
    UserCredentialAttr: {
      /**
       * UserCredentialAttr.user_id
       * Format: uuid
       */
      user_id: string;
      /** UserCredentialAttr.password */
      password?: string;
      /** UserCredentialAttr.tfa_secret */
      tfa_secret?: string;
    };
    /** UserCredentialResetPasswordBiz */
    UserCredentialResetPasswordBiz:
      | {
          /** UserCredentialResetPasswordBiz.password */
          password: string;
        }
      | {
          /** UserCredentialResetPasswordBiz.generate */
          generate: true;
        };
    /** UserCredentialChangePassword */
    UserCredentialChangePassword: {
      /** UserCredentialChangePassword.newPassword */
      newPassword: string;
      /** UserCredentialChangePassword.currentPassword */
      currentPassword: string;
    };
    /** UserStatus */
    UserStatus:
      | "deleted"
      | "active"
      | "inactive"
      | "suspended"
      | "invited"
      | "deactivated"
      | "invite_cancelled";
    /** UserAttrs */
    UserAttrs: {
      /** UserAttrs.id */
      id: string;
      /** UserAttrs.tenant_id */
      tenant_id: string;
      /** UserAttrs.roleId */
      roleId?: string | null;
      /** UserAttrs.groupId */
      groupId?: string | null;
      /** UserAttrs.first_name */
      first_name?: string | null;
      /** UserAttrs.last_name */
      last_name?: string | null;
      /** UserAttrs.name */
      name?: string | null;
      /** UserAttrs.email */
      email: string;
      /** UserAttrs.title */
      title?: string | null;
      /** UserAttrs.avatar */
      avatar?: string | null;
      /** UserAttrs.status */
      status: string;
      /**
       * UserAttrs.last_access
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      /** UserAttrs.last_page */
      last_page?: string | null;
      /** UserAttrs.phone */
      phone?: string | null;
    };
    /** UserAttr */
    UserAttr: {
      /**
       * UserAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * UserAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /**
       * UserAttr.roleId
       * Format: uuid
       */
      roleId?: string | null;
      /**
       * UserAttr.groupId
       * Format: uuid
       */
      groupId?: string | null;
      /** UserAttr.first_name */
      first_name?: string | null;
      /** UserAttr.last_name */
      last_name?: string | null;
      /**
       * UserAttr.name
       * @description Virtual result, `${first_name} ${last_name}`
       */
      name?: string | null;
      /** UserAttr.email */
      email: string;
      /** UserAttr.title */
      title?: string | null;
      /** UserAttr.avatar */
      avatar?: string | null;
      /** UserAttr.status */
      status: string;
      /**
       * UserAttr.last_access
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      /** UserAttr.last_page */
      last_page?: string | null;
      /** UserAttr.phone */
      phone?: string | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** UserCreateBiz */
    UserCreateBiz: {
      /** UserCreateBiz.title */
      title?: string | null;
      /** UserCreateBiz.first_name */
      first_name?: string | null;
      /** UserCreateBiz.last_name */
      last_name?: string | null;
      /** UserCreateBiz.avatar */
      avatar?: string | null;
      /**
       * UserCreateBiz.roleId
       * Format: uuid
       */
      roleId?: string | null;
      /**
       * UserCreateBiz.groupId
       * Format: uuid
       */
      groupId?: string | null;
      /** UserCreateBiz.email */
      email: string;
      /**
       * UserCreateBiz.last_access
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      /** UserCreateBiz.last_page */
      last_page?: string | null;
      /** UserCreateBiz.phone */
      phone?: string | null;
    };
    /** UserModifyBiz */
    UserModifyBiz: {
      /** UserModifyBiz.title */
      title?: string | null;
      /** UserModifyBiz.first_name */
      first_name?: string | null;
      /** UserModifyBiz.last_name */
      last_name?: string | null;
      /** UserModifyBiz.avatar */
      avatar?: string | null;
      /**
       * UserModifyBiz.roleId
       * Format: uuid
       */
      roleId?: string | null;
      /**
       * UserModifyBiz.groupId
       * Format: uuid
       */
      groupId?: string | null;
      /** UserModifyBiz.email */
      email?: string;
      /**
       * UserModifyBiz.last_access
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      /** UserModifyBiz.last_page */
      last_page?: string | null;
      /** UserModifyBiz.phone */
      phone?: string | null;
    };
    /** UserQueryBiz */
    UserQueryBiz: {
      /** UserQueryBiz.search */
      search?: string;
      order?: components["schemas"]["Order"];
      /** UserQueryBiz.status */
      status?:
        | "deleted"
        | "active"
        | "inactive"
        | "suspended"
        | "invited"
        | "deactivated"
        | "invite_cancelled";
      /** UserQueryBiz.excludeAdmins */
      excludeAdmins?: boolean;
      /**
       * UserQueryBiz.roleId
       * Format: uuid
       */
      roleId?: string | null;
      /**
       * UserQueryBiz.self
       * @description Filters result by self. As users with elevated permissions can query data
       * across a tenant(s) and user(s), there may be situations where a user
       * would like to see data related only about themselves.
       * This includes data created by them or data assigned to them.
       */
      self?: boolean;
    };
    /** UserInviteBiz */
    UserInviteBiz: {
      /** UserInviteBiz.firstName */
      firstName: string;
      /** UserInviteBiz.lastName */
      lastName: string;
      /** UserInviteBiz.email */
      email: string;
      /** UserInviteBiz.groupId */
      groupId: string;
      /** UserInviteBiz.roleId */
      roleId: string;
    };
    /** VideoAttr */
    VideoAttr: {
      /**
       * VideoAttr.videoId
       * Format: uuid
       */
      videoId: string;
      /** VideoAttr.externalUrl */
      externalUrl: string | null;
      /** VideoAttr.muxUploadId */
      muxUploadId: string | null;
      /** VideoAttr.muxUploadUrl */
      muxUploadUrl: string | null;
      /**
       * VideoAttr.createdById
       * Format: uuid
       */
      createdById: string;
      /**
       * VideoAttr.tenantId
       * Format: uuid
       */
      tenantId: string;
    };
    /** VideoCreateBiz */
    VideoCreateBiz: {
      /**
       * VideoCreateBiz.externalUrl
       * @description Whether video is publicly accessible.
       */
      externalUrl?: string;
    };
    /** ActivityBizGet */
    ActivityBizGet: {
      /** ActivityBizGet.data */
      data: (components["schemas"]["ActivityAttrs"] &
        components["schemas"]["ModelTimestamp"])[];
      /** ActivityBizGet.pagination */
      pagination: {
        /** ActivityBizGet.pagination.limit */
        limit: number;
        /** ActivityBizGet.pagination.page */
        page: number;
        /** ActivityBizGet.pagination.totalPages */
        totalPages: number;
        /** ActivityBizGet.pagination.count */
        count: number;
      };
    };
    /** ActivityBizGetOneById */
    ActivityBizGetOneById: components["schemas"]["ActivityAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** ActivityBizUpdateById */
    ActivityBizUpdateById: components["schemas"]["ActivityAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** ActivityRequestBizGet */
    ActivityRequestBizGet: {
      /** ActivityRequestBizGet.data */
      data: components["schemas"]["ActivityRequestAttr"][];
      /** ActivityRequestBizGet.pagination */
      pagination: {
        /** ActivityRequestBizGet.pagination.limit */
        limit: number;
        /** ActivityRequestBizGet.pagination.page */
        page: number;
        /** ActivityRequestBizGet.pagination.totalPages */
        totalPages: number;
        /** ActivityRequestBizGet.pagination.count */
        count: number;
      };
    };
    ActivityRequestBizGetOneById: components["schemas"]["ActivityRequestAttr"];
    ActivityRequestBizCreate: components["schemas"]["ActivityRequestAttr"];
    ActivityRequestBizUpdateById: components["schemas"]["ActivityRequestAttr"];
    /** AnalyticBizGetAllPublic.[] */
    AnalyticBizGetAllPublic: ({
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** icon */
      icon: string;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
      /** isMulti */
      isMulti: boolean;
      /** dimensions */
      dimensions: string[];
      /** limit */
      limit: number;
      /** measures */
      measures: string[];
      order: components["schemas"]["AnalyticOrder"];
      /** segments */
      segments: string[];
      timeDimensions: components["schemas"]["AnalyticTimeDimension"];
    } & {
      /** filters */
      filters: (
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "set";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notSet";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "equals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notEquals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "contains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notContains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "startsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "endsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "beforeDate";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "afterDate";
            /** filters.[].values */
            values: string[];
          }
      )[];
    } & components["schemas"]["Timestamp"])[];
    /** AnalyticBizGetOneById */
    AnalyticBizGetOneById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** icon */
      icon: string;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
      /** isMulti */
      isMulti: boolean;
      /** dimensions */
      dimensions: string[];
      /** limit */
      limit: number;
      /** measures */
      measures: string[];
      order: components["schemas"]["AnalyticOrder"];
      /** segments */
      segments: string[];
      timeDimensions: components["schemas"]["AnalyticTimeDimension"];
    } & {
      /** filters */
      filters: (
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "set";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notSet";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "equals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notEquals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "contains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notContains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "startsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "endsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "beforeDate";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "afterDate";
            /** filters.[].values */
            values: string[];
          }
      )[];
    } & components["schemas"]["Timestamp"];
    /** AnalyticBizUpdateById */
    AnalyticBizUpdateById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** icon */
      icon: string;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
      /** isMulti */
      isMulti: boolean;
      /** dimensions */
      dimensions: string[];
      /** limit */
      limit: number;
      /** measures */
      measures: string[];
      order: components["schemas"]["AnalyticOrder"];
      /** segments */
      segments: string[];
      timeDimensions: components["schemas"]["AnalyticTimeDimension"];
    } & {
      /** filters */
      filters: (
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "set";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notSet";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "equals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notEquals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "contains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notContains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "startsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "endsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "beforeDate";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "afterDate";
            /** filters.[].values */
            values: string[];
          }
      )[];
    } & components["schemas"]["Timestamp"];
    /** ArticleBizGet */
    ArticleBizGet: {
      /** ArticleBizGet.data */
      data: ({
        /** id */
        id: string;
        /** tenant_id */
        tenant_id?: string;
        /** user_id */
        user_id?: string;
        /** title */
        title: string | null;
        /** blurb */
        blurb?: string;
        /** author */
        author?: string;
        /** body */
        body?: string;
        published: components["schemas"]["Date"];
        /** url */
        url: string;
        /** image */
        image?: string;
        /** source */
        source?: string;
      } & components["schemas"]["Timestamp"])[];
      /** ArticleBizGet.pagination */
      pagination: {
        /** ArticleBizGet.pagination.limit */
        limit: number;
        /** ArticleBizGet.pagination.page */
        page: number;
        /** ArticleBizGet.pagination.totalPages */
        totalPages: number;
        /** ArticleBizGet.pagination.count */
        count: number;
      };
    };
    /** ArticleBizGetOneById */
    ArticleBizGetOneById: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id?: string;
      /** user_id */
      user_id?: string;
      /** title */
      title: string | null;
      /** blurb */
      blurb?: string;
      /** author */
      author?: string;
      /** body */
      body?: string;
      published: components["schemas"]["Date"];
      /** url */
      url: string;
      /** image */
      image?: string;
      /** source */
      source?: string;
    } & components["schemas"]["Timestamp"];
    /** ArticleBizGetOneByURL */
    ArticleBizGetOneByURL: unknown;
    /** ArticleBizCreate */
    ArticleBizCreate: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id?: string;
      /** user_id */
      user_id?: string;
      /** title */
      title: string | null;
      /** blurb */
      blurb?: string;
      /** author */
      author?: string;
      /** body */
      body?: string;
      published: components["schemas"]["Date"];
      /** url */
      url: string;
      /** image */
      image?: string;
      /** source */
      source?: string;
    } & components["schemas"]["Timestamp"];
    /** AuditBizCreate */
    AuditBizCreate: components["schemas"]["AuditResource"] & {
      /** auditId */
      auditId: number;
      /** actorId */
      actorId: string;
      /** actorType */
      actorType: "contact" | "user";
      /** actorDisplayValue */
      actorDisplayValue: string;
      /** action */
      action: "create" | "read" | "update" | "delete";
      changeLog?: components["schemas"]["AuditChangeLog"];
    };
    /** AuditNotificationBizGet */
    AuditNotificationBizGet: {
      /** AuditNotificationBizGet.data */
      data: (components["schemas"]["AuditNotificationAttr"] & {
        audit: components["schemas"]["AuditAttr"];
      })[];
      /** AuditNotificationBizGet.pagination */
      pagination: {
        /** AuditNotificationBizGet.pagination.limit */
        limit: number;
        /** AuditNotificationBizGet.pagination.page */
        page: number;
        /** AuditNotificationBizGet.pagination.totalPages */
        totalPages: number;
        /** AuditNotificationBizGet.pagination.count */
        count: number;
      };
    };
    /** CreateGuestTokenBiz */
    CreateGuestTokenBiz: {
      /** CreateGuestTokenBiz.email */
      email: string;
      /** CreateGuestTokenBiz.redirect_url */
      redirect_url: string;
    };
    /** BadgeBizGet */
    BadgeBizGet: {
      /** BadgeBizGet.data */
      data: ({
        /** id */
        id: string;
        /** tenant_id */
        tenant_id: string;
        /** name */
        name?: string | null;
        /** description */
        description?: string | null;
        /** status */
        status?: string | null;
        /** badge_url */
        badge_url?: string | null;
        /** deleted */
        deleted: boolean;
      } & components["schemas"]["ModelTimestamp"])[];
      /** BadgeBizGet.pagination */
      pagination: {
        /** BadgeBizGet.pagination.limit */
        limit: number;
        /** BadgeBizGet.pagination.page */
        page: number;
        /** BadgeBizGet.pagination.totalPages */
        totalPages: number;
        /** BadgeBizGet.pagination.count */
        count: number;
      };
    };
    /** BadgeBizGetOneById */
    BadgeBizGetOneById: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id: string;
      /** name */
      name?: string | null;
      /** description */
      description?: string | null;
      /** status */
      status?: string | null;
      /** badge_url */
      badge_url?: string | null;
      /** deleted */
      deleted: boolean;
    } & components["schemas"]["ModelTimestamp"];
    /** BadgeBizCreate */
    BadgeBizCreate: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id: string;
      /** name */
      name?: string | null;
      /** description */
      description?: string | null;
      /** status */
      status?: string | null;
      /** badge_url */
      badge_url?: string | null;
      /** deleted */
      deleted: boolean;
    } & components["schemas"]["ModelTimestamp"];
    /** BadgeBizUpdateById */
    BadgeBizUpdateById: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id: string;
      /** name */
      name?: string | null;
      /** description */
      description?: string | null;
      /** status */
      status?: string | null;
      /** badge_url */
      badge_url?: string | null;
      /** deleted */
      deleted: boolean;
    } & components["schemas"]["ModelTimestamp"];
    /** CategoryBizGet */
    CategoryBizGet: {
      /** CategoryBizGet.data */
      data: ({
        /** id */
        id: number;
        /** tenant_id */
        tenant_id: string;
        /** title */
        title?: string | null;
        /** description */
        description?: string | null;
        /** status */
        status?: string | null;
        /** logo */
        logo?: string | null;
        /** icon */
        icon?: string | null;
        /** position */
        position?: number | null;
      } & components["schemas"]["ModelTimestamp"] & {
          /** isPublic */
          isPublic: boolean;
          /** totalCourses */
          totalCourses: number;
          /** totalLessons */
          totalLessons: number;
        })[];
      /** CategoryBizGet.pagination */
      pagination: {
        /** CategoryBizGet.pagination.limit */
        limit: number;
        /** CategoryBizGet.pagination.page */
        page: number;
        /** CategoryBizGet.pagination.totalPages */
        totalPages: number;
        /** CategoryBizGet.pagination.count */
        count: number;
      };
    };
    /** CategoryBizGetCoursesById */
    CategoryBizGetCoursesById: {
      /** CategoryBizGetCoursesById.data */
      data: (components["schemas"]["CourseAttrs"] &
        components["schemas"]["ModelTimestamp"] & {
          badge?: components["schemas"]["BadgeAttr"];
          category?: components["schemas"]["CategoryAttr"];
          /** preference, preference.[] */
          preference?: components["schemas"]["CoursePreferenceAttr"][];
          /** progress, progress.[] */
          progress?: components["schemas"]["CourseProgressAttr"][];
          quiz?: components["schemas"]["QuizAttr"];
        })[];
      /** CategoryBizGetCoursesById.pagination */
      pagination: {
        /** CategoryBizGetCoursesById.pagination.limit */
        limit: number;
        /** CategoryBizGetCoursesById.pagination.page */
        page: number;
        /** CategoryBizGetCoursesById.pagination.totalPages */
        totalPages: number;
        /** CategoryBizGetCoursesById.pagination.count */
        count: number;
      };
    };
    /** CategoryBizGetLessonsById */
    CategoryBizGetLessonsById: {
      /** CategoryBizGetLessonsById.data */
      data: (components["schemas"]["LessonAttrs"] &
        components["schemas"]["ModelTimestamp"] & {
          category?: components["schemas"]["CategoryAttr"];
          /** preference, preference.[] */
          preference?: components["schemas"]["LessonPreferenceAttr"][];
          /** progress, progress.[] */
          progress?: components["schemas"]["LessonProgressAttr"][];
        })[];
      /** CategoryBizGetLessonsById.pagination */
      pagination: {
        /** CategoryBizGetLessonsById.pagination.limit */
        limit: number;
        /** CategoryBizGetLessonsById.pagination.page */
        page: number;
        /** CategoryBizGetLessonsById.pagination.totalPages */
        totalPages: number;
        /** CategoryBizGetLessonsById.pagination.count */
        count: number;
      };
    };
    /** CategoryBizGetVideosById */
    CategoryBizGetVideosById: {
      /** CategoryBizGetVideosById.data */
      data: components["schemas"]["VideoAttr"][];
      /** CategoryBizGetVideosById.pagination */
      pagination: {
        /** CategoryBizGetVideosById.pagination.limit */
        limit: number;
        /** CategoryBizGetVideosById.pagination.page */
        page: number;
        /** CategoryBizGetVideosById.pagination.totalPages */
        totalPages: number;
        /** CategoryBizGetVideosById.pagination.count */
        count: number;
      };
    };
    /** CategoryBizGetOneById */
    CategoryBizGetOneById: {
      /** id */
      id: number;
      /** tenant_id */
      tenant_id: string;
      /** title */
      title?: string | null;
      /** description */
      description?: string | null;
      /** status */
      status?: string | null;
      /** logo */
      logo?: string | null;
      /** icon */
      icon?: string | null;
      /** position */
      position?: number | null;
    } & components["schemas"]["ModelTimestamp"] & {
        /** isPublic */
        isPublic: boolean;
        /** totalCourses */
        totalCourses: number;
        /** totalLessons */
        totalLessons: number;
      };
    /** CategoryBizCreate */
    CategoryBizCreate: {
      /** id */
      id: number;
      /** tenant_id */
      tenant_id: string;
      /** title */
      title?: string | null;
      /** description */
      description?: string | null;
      /** status */
      status?: string | null;
      /** logo */
      logo?: string | null;
      /** icon */
      icon?: string | null;
      /** position */
      position?: number | null;
    } & components["schemas"]["ModelTimestamp"];
    /** CategoryBizUpdateById */
    CategoryBizUpdateById: {
      /** id */
      id: number;
      /** tenant_id */
      tenant_id: string;
      /** title */
      title?: string | null;
      /** description */
      description?: string | null;
      /** status */
      status?: string | null;
      /** logo */
      logo?: string | null;
      /** icon */
      icon?: string | null;
      /** position */
      position?: number | null;
    } & components["schemas"]["ModelTimestamp"];
    /** ComponentBizGetOneById */
    ComponentBizGetOneById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** enabled */
      enabled: boolean;
      /** analyticId */
      analyticId?: string | null;
      /** componentTextId */
      componentTextId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** ComponentBizCreateComponentWithAssociations */
    ComponentBizCreateComponentWithAssociations: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** enabled */
      enabled: boolean;
      /** analyticId */
      analyticId?: string | null;
      /** componentTextId */
      componentTextId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** ComponentBizUpdateById */
    ComponentBizUpdateById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** enabled */
      enabled: boolean;
      /** analyticId */
      analyticId?: string | null;
      /** componentTextId */
      componentTextId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** ComponentBizUpdateComponentAnalytic */
    ComponentBizUpdateComponentAnalytic: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** icon */
      icon: string;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
      /** isMulti */
      isMulti: boolean;
      /** dimensions */
      dimensions: string[];
      /** limit */
      limit: number;
      /** measures */
      measures: string[];
      order: components["schemas"]["AnalyticOrder"];
      /** segments */
      segments: string[];
      timeDimensions: components["schemas"]["AnalyticTimeDimension"];
    } & {
      /** filters */
      filters: (
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "set";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notSet";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "equals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notEquals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "contains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notContains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "startsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "endsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "beforeDate";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "afterDate";
            /** filters.[].values */
            values: string[];
          }
      )[];
    } & components["schemas"]["Timestamp"];
    /** ContactBizGetAllByEmail.[] */
    ContactBizGetAllByEmail: (components["schemas"]["ContactAttr"] & {
      organization: components["schemas"]["OrganizationAttr"];
    })[];
    ContactBizGetOneById: components["schemas"]["ContactAttr"];
    /** ContactBizBulkImport */
    ContactBizBulkImport: {
      /** ContactBizBulkImport.totalItems */
      totalItems: number;
      /** ContactBizBulkImport.itemsFailed */
      itemsFailed: {
        /** ContactBizBulkImport.itemsFailed.[].first_name */
        first_name?: string;
        /** ContactBizBulkImport.itemsFailed.[].last_name */
        last_name?: string;
        /** ContactBizBulkImport.itemsFailed.[].email_work */
        email_work?: string;
        /** ContactBizBulkImport.itemsFailed.[].assigned_user_id */
        assigned_user_id?: string;
        /** ContactBizBulkImport.itemsFailed.[].modified_user_id */
        modified_user_id?: string;
        /** ContactBizBulkImport.itemsFailed.[].created_by */
        created_by?: string;
        /** ContactBizBulkImport.itemsFailed.[].organization_id */
        organization_id?: string | null;
        /** ContactBizBulkImport.itemsFailed.[].tenant_id */
        tenant_id?: string;
        /** ContactBizBulkImport.itemsFailed.[].title */
        title?: string;
        /** ContactBizBulkImport.itemsFailed.[].email_other */
        email_other?: string;
        /** ContactBizBulkImport.itemsFailed.[].phone_home */
        phone_home?: string;
        /** ContactBizBulkImport.itemsFailed.[].phone_mobile */
        phone_mobile?: string;
        /** ContactBizBulkImport.itemsFailed.[].phone_work */
        phone_work?: string;
        /** ContactBizBulkImport.itemsFailed.[].phone_other */
        phone_other?: string;
        /** ContactBizBulkImport.itemsFailed.[].external_id */
        external_id?: string;
      }[];
      /** ContactBizBulkImport.contacts */
      contacts: components["schemas"]["ContactAttr"][];
    };
    /** CourseBizGetLessonProgressById.[] */
    CourseBizGetLessonProgressById: (components["schemas"]["LessonProgressAttrs"] &
      components["schemas"]["ModelTimestamp"])[];
    /** CourseBizGet */
    CourseBizGet: {
      /** CourseBizGet.data */
      data: (components["schemas"]["CourseAttrs"] &
        components["schemas"]["ModelTimestamp"] & {
          /** totalLessons */
          totalLessons: number;
        } & {
          badge?: components["schemas"]["BadgeAttr"];
          category?: components["schemas"]["CategoryAttr"];
          /** preference, preference.[] */
          preference?: components["schemas"]["CoursePreferenceAttr"][];
          /** progress, progress.[] */
          progress?: components["schemas"]["CourseProgressAttr"][];
          quiz?: components["schemas"]["QuizAttr"];
        })[];
      /** CourseBizGet.pagination */
      pagination: {
        /** CourseBizGet.pagination.limit */
        limit: number;
        /** CourseBizGet.pagination.page */
        page: number;
        /** CourseBizGet.pagination.totalPages */
        totalPages: number;
        /** CourseBizGet.pagination.count */
        count: number;
      };
    };
    /** CourseBizGetOneById */
    CourseBizGetOneById: components["schemas"]["CourseAttrs"] &
      components["schemas"]["ModelTimestamp"] &
      components["schemas"]["T"] & {
        /** contents */
        contents: components["schemas"]["CourseContentAttr"][];
      };
    /** CourseBizCreate */
    CourseBizCreate: components["schemas"]["CourseAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** CourseContentBizGetByCourseId */
    CourseContentBizGetByCourseId: {
      /** CourseContentBizGetByCourseId.data */
      data: ({
        /** courseContentId */
        courseContentId: string;
        /** courseId */
        courseId: string;
        /** quizId */
        quizId?: string | null;
        /** order */
        order: number;
        /** tenantId */
        tenantId: string;
      } & components["schemas"]["Timestamp"] & {
          /** quiz */
          quiz?: {
            /** quizId */
            quizId: string;
            /** maxAttempts */
            maxAttempts?: number | null;
          } & components["schemas"]["Timestamp"] & {
              /** questions */
              questions: components["schemas"]["QuizQuestionAttr"][];
            };
        })[];
      /** CourseContentBizGetByCourseId.pagination */
      pagination: {
        /** CourseContentBizGetByCourseId.pagination.limit */
        limit: number;
        /** CourseContentBizGetByCourseId.pagination.page */
        page: number;
        /** CourseContentBizGetByCourseId.pagination.totalPages */
        totalPages: number;
        /** CourseContentBizGetByCourseId.pagination.count */
        count: number;
      };
    };
    /** CourseContentBizCreateByCourseId */
    CourseContentBizCreateByCourseId: {
      /** courseContentId */
      courseContentId: string;
      /** courseId */
      courseId: string;
      /** quizId */
      quizId?: string | null;
      /** order */
      order: number;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** CourseProgressBizGetOneByCourseId */
    CourseProgressBizGetOneByCourseId: components["schemas"]["CourseProgressAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** DashboardBizGet */
    DashboardBizGet: {
      /** DashboardBizGet.data */
      data: ({
        /** id */
        id: string;
        /** name */
        name: string;
        /** type */
        type: "dashboard" | "insight";
        /** enabled */
        enabled: boolean;
        /** organizationId */
        organizationId?: string | null;
        /** createdById */
        createdById: string;
        /** tenantId */
        tenantId: string;
      } & components["schemas"]["Timestamp"])[];
      /** DashboardBizGet.pagination */
      pagination: {
        /** DashboardBizGet.pagination.limit */
        limit: number;
        /** DashboardBizGet.pagination.page */
        page: number;
        /** DashboardBizGet.pagination.totalPages */
        totalPages: number;
        /** DashboardBizGet.pagination.count */
        count: number;
      };
    };
    /** DashboardBizGetComponentsById */
    DashboardBizGetComponentsById: {
      /** DashboardBizGetComponentsById.data */
      data: ({
        /** dashboardId */
        dashboardId: string;
        /** componentId */
        componentId: string;
      } & components["schemas"]["Timestamp"] & {
          /** component */
          component: {
            /** id */
            id: string;
            /** name */
            name: string;
            /** enabled */
            enabled: boolean;
            /** analyticId */
            analyticId?: string | null;
            /** componentTextId */
            componentTextId?: string | null;
            /** createdById */
            createdById: string;
            /** tenantId */
            tenantId: string;
          } & components["schemas"]["Timestamp"] & {
              analytic: components["schemas"]["AnalyticAttr"];
            };
        })[];
      /** DashboardBizGetComponentsById.pagination */
      pagination: {
        /** DashboardBizGetComponentsById.pagination.limit */
        limit: number;
        /** DashboardBizGetComponentsById.pagination.page */
        page: number;
        /** DashboardBizGetComponentsById.pagination.totalPages */
        totalPages: number;
        /** DashboardBizGetComponentsById.pagination.count */
        count: number;
      };
    };
    /** DashboardBizGetOneById */
    DashboardBizGetOneById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type: "dashboard" | "insight";
      /** enabled */
      enabled: boolean;
      /** organizationId */
      organizationId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** DashboardBizCreate */
    DashboardBizCreate: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type: "dashboard" | "insight";
      /** enabled */
      enabled: boolean;
      /** organizationId */
      organizationId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** DashboardBizCreateDefault.[] */
    DashboardBizCreateDefault: ({
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type: "dashboard" | "insight";
      /** enabled */
      enabled: boolean;
      /** organizationId */
      organizationId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"])[];
    /** DashboardBizCreateDefaultDashboards.[] */
    DashboardBizCreateDefaultDashboards: ({
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type: "dashboard" | "insight";
      /** enabled */
      enabled: boolean;
      /** organizationId */
      organizationId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"])[];
    /** DashboardBizCreateDefaultInsights.[] */
    DashboardBizCreateDefaultInsights: ({
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type: "dashboard" | "insight";
      /** enabled */
      enabled: boolean;
      /** organizationId */
      organizationId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"])[];
    /** DashboardBizUpdateById */
    DashboardBizUpdateById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type: "dashboard" | "insight";
      /** enabled */
      enabled: boolean;
      /** organizationId */
      organizationId?: string | null;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
    } & components["schemas"]["Timestamp"];
    /** DashboardBizUpdateComponent */
    DashboardBizUpdateComponent:
      | {
          /** DashboardBizUpdateComponent.component */
          component: {
            /** id */
            id: string;
            /** name */
            name: string;
            /** enabled */
            enabled: boolean;
            /** analyticId */
            analyticId?: string | null;
            /** componentTextId */
            componentTextId?: string | null;
            /** createdById */
            createdById: string;
            /** tenantId */
            tenantId: string;
          } & components["schemas"]["Timestamp"];
        }
      | {
          /** DashboardBizUpdateComponent.component */
          component?: unknown;
        };
    /** DashboardBizUpdateComponentAnalytic */
    DashboardBizUpdateComponentAnalytic: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** type */
      type:
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product";
      /** relatedTypes */
      relatedTypes: (
        | "AssignedUser"
        | "CreatedBy"
        | "Contact"
        | "Course"
        | "CourseProgress"
        | "Deal"
        | "Lesson"
        | "LessonProgress"
        | "Organization"
        | "Category"
        | "DealStage"
        | "Tenant"
        | "TenantDealStage"
        | "User"
        | "Training"
        | "Activities"
        | "Notes"
        | "Product"
      )[];
      /** displayType */
      displayType:
        | "kpi_standard"
        | "kpi_scorecard"
        | "kpi_growth_index"
        | "kpi_rankings"
        | "kpi_basic"
        | "chart_column"
        | "chart_donut"
        | "chart_pie"
        | "chart_bar"
        | "chart_line"
        | "chart_table"
        | "chart_funnel"
        | "chart_area"
        | "chart_heat";
      /** icon */
      icon: string;
      /** createdById */
      createdById: string;
      /** tenantId */
      tenantId: string;
      /** isMulti */
      isMulti: boolean;
      /** dimensions */
      dimensions: string[];
      /** limit */
      limit: number;
      /** measures */
      measures: string[];
      order: components["schemas"]["AnalyticOrder"];
      /** segments */
      segments: string[];
      timeDimensions: components["schemas"]["AnalyticTimeDimension"];
    } & {
      /** filters */
      filters: (
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "set";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notSet";
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "equals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notEquals";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "contains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "notContains";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "startsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "endsWith";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "gte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lt";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "lte";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "beforeDate";
            /** filters.[].values */
            values: string[];
          }
        | {
            /** filters.[].member */
            member: string;
            /** filters.[].operator */
            operator: "afterDate";
            /** filters.[].values */
            values: string[];
          }
      )[];
    } & components["schemas"]["Timestamp"];
    /** DealBizGetAllAsStageSummary.[] */
    DealBizGetAllAsStageSummary: {
      /** DealBizGetAllAsStageSummary.[].tenant_deal_stage_id */
      tenant_deal_stage_id: string;
      /** DealBizGetAllAsStageSummary.[].total_amount */
      total_amount: number;
      /** DealBizGetAllAsStageSummary.[].total_count */
      total_count: number;
    }[];
    DealBizGetOneById: components["schemas"]["DealAttr"];
    /** DealProductBizGetProductsByDealId */
    DealProductBizGetProductsByDealId: {
      /** DealProductBizGetProductsByDealId.data */
      data: components["schemas"]["DealProductAttr"][];
      /** DealProductBizGetProductsByDealId.pagination */
      pagination: {
        /** DealProductBizGetProductsByDealId.pagination.limit */
        limit: number;
        /** DealProductBizGetProductsByDealId.pagination.page */
        page: number;
        /** DealProductBizGetProductsByDealId.pagination.totalPages */
        totalPages: number;
        /** DealProductBizGetProductsByDealId.pagination.count */
        count: number;
      };
    };
    /** FieldBizCreateDefault.[] */
    FieldBizCreateDefault: components["schemas"]["FieldAttr"][];
    /** FieldBizGet */
    FieldBizGet: {
      /** FieldBizGet.data */
      data: components["schemas"]["FieldAttr"][];
      /** FieldBizGet.pagination */
      pagination: {
        /** FieldBizGet.pagination.limit */
        limit: number;
        /** FieldBizGet.pagination.page */
        page: number;
        /** FieldBizGet.pagination.totalPages */
        totalPages: number;
        /** FieldBizGet.pagination.count */
        count: number;
      };
    };
    FieldBizCreate: components["schemas"]["FieldAttr"];
    FieldBizGetOneById: components["schemas"]["FieldAttr"];
    FieldBizUpdateById: components["schemas"]["FieldAttr"];
    /** GroupBizGetFullHierarchy */
    GroupBizGetFullHierarchy: {
      /** GroupBizGetFullHierarchy.children */
      children: components["schemas"]["GroupNode"][];
      /** GroupBizGetFullHierarchy.id */
      id: string;
      /** GroupBizGetFullHierarchy.parent_id */
      parent_id?: string | null;
      /** GroupBizGetFullHierarchy.name */
      name: string;
      /** GroupBizGetFullHierarchy.has_sibling_access */
      has_sibling_access: boolean;
      /** GroupBizGetFullHierarchy.description */
      description?: string | null;
      /** GroupBizGetFullHierarchy.tenant_id */
      tenant_id: string;
      /**
       * GroupBizGetFullHierarchy.deleted_on
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deleted_on?: components["schemas"]["Date"] | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** GroupBizGetAllByParentId.[] */
    GroupBizGetAllByParentId: (components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"])[];
    /** GroupBizGet */
    GroupBizGet: {
      /** GroupBizGet.data */
      data: (components["schemas"]["GroupAttrs"] &
        components["schemas"]["ModelTimestamp"])[];
      /** GroupBizGet.pagination */
      pagination: {
        /** GroupBizGet.pagination.limit */
        limit: number;
        /** GroupBizGet.pagination.page */
        page: number;
        /** GroupBizGet.pagination.totalPages */
        totalPages: number;
        /** GroupBizGet.pagination.count */
        count: number;
      };
    };
    /** GroupBizGetOneById */
    GroupBizGetOneById: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** GroupBizGetRootGroup */
    GroupBizGetRootGroup: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** GroupBizCreate */
    GroupBizCreate: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** GroupBizUpdateById */
    GroupBizUpdateById: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** GroupBizCreateDefaultGroup */
    GroupBizCreateDefaultGroup: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** InsightBizOpt */
    InsightBizOpt: {
      /** InsightBizOpt.Upload */
      Upload: { [key: string]: unknown };
      /** InsightBizOpt.Code */
      Code: { [key: string]: unknown };
    };
    /** InsightRpmgBizGetOneByCode */
    InsightRpmgBizGetOneByCode:
      | (components["schemas"]["RpmgVerticalAttr"] & {
          naics: components["schemas"]["NaicsAttr"];
          summary: components["schemas"]["RpmgSummaryAttr"];
          /** transaction_summary */
          transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
            transaction: components["schemas"]["RpmgTransactionAttr"];
          })[];
        })
      | (components["schemas"]["RpmgVerticalAttr"] & {
          /** naics */
          naics: null;
          summary: components["schemas"]["RpmgSummaryAttr"];
          /** transaction_summary */
          transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
            transaction: components["schemas"]["RpmgTransactionAttr"];
          })[];
        });
    /** InsightSpBizGetOneByCode */
    InsightSpBizGetOneByCode: {
      /** id */
      id: string;
      /** aggregation_type */
      aggregation_type?: "AVERAGE" | null;
      report_date: components["schemas"]["Date"];
      /** days_sales_out */
      days_sales_out?: number | null;
      /** days_payable_out */
      days_payable_out?: number | null;
      /** working_capital */
      working_capital?: number | null;
      /** working_capital_ratio */
      working_capital_ratio?: number | null;
    } & components["schemas"]["ModelTimestamp"];
    /** LabelBizGetAllByType.[] */
    LabelBizGetAllByType: ({
      /** id */
      id: string;
      /** name */
      name: string;
      /** color */
      color: string;
      /** type */
      type?: ("contact" | "organization") | null;
      /** assigned_user_id */
      assigned_user_id?: string | null;
      /** tenant_id */
      tenant_id: string;
    } & components["schemas"]["ModelTimestamp"])[];
    /** LabelBizGetOneById */
    LabelBizGetOneById: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** color */
      color: string;
      /** type */
      type?: ("contact" | "organization") | null;
      /** assigned_user_id */
      assigned_user_id?: string | null;
      /** tenant_id */
      tenant_id: string;
    } & components["schemas"]["ModelTimestamp"];
    /** LabelBizCreate */
    LabelBizCreate: {
      /** id */
      id: string;
      /** name */
      name: string;
      /** color */
      color: string;
      /** type */
      type?: ("contact" | "organization") | null;
      /** assigned_user_id */
      assigned_user_id?: string | null;
      /** tenant_id */
      tenant_id: string;
    } & components["schemas"]["ModelTimestamp"];
    /** LessonBizGetRandomLessonsWithUniqueCategoryId.[] */
    LessonBizGetRandomLessonsWithUniqueCategoryId: (components["schemas"]["LessonAttrs"] &
      components["schemas"]["ModelTimestamp"])[];
    /** LessonBizGet */
    LessonBizGet: {
      /** LessonBizGet.data */
      data: (components["schemas"]["LessonAttrs"] &
        components["schemas"]["ModelTimestamp"] & {
          category?: components["schemas"]["CategoryAttr"];
          /** preference, preference.[] */
          preference?: components["schemas"]["LessonPreferenceAttr"][];
          /** progress, progress.[] */
          progress?: components["schemas"]["LessonProgressAttr"][];
        })[];
      /** LessonBizGet.pagination */
      pagination: {
        /** LessonBizGet.pagination.limit */
        limit: number;
        /** LessonBizGet.pagination.page */
        page: number;
        /** LessonBizGet.pagination.totalPages */
        totalPages: number;
        /** LessonBizGet.pagination.count */
        count: number;
      };
    };
    /** LessonBizGetOneById */
    LessonBizGetOneById: components["schemas"]["LessonAttrs"] &
      components["schemas"]["ModelTimestamp"] & {
        /** pages */
        pages: (components["schemas"]["LessonPageAttrs"] &
          components["schemas"]["ModelTimestamp"] & {
            video?: components["schemas"]["VideoAttr"];
          })[];
        category: components["schemas"]["CategoryAttr"];
      };
    /** LessonBizCreate */
    LessonBizCreate: components["schemas"]["LessonAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** LessonBizUpdateById */
    LessonBizUpdateById: components["schemas"]["LessonAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** LessonPageBizGetAllById.[] */
    LessonPageBizGetAllById: (components["schemas"]["LessonPageAttrs"] &
      components["schemas"]["ModelTimestamp"])[];
    /** LessonProgressBizGetLatestByLessonIds.[] */
    LessonProgressBizGetLatestByLessonIds: (components["schemas"]["LessonProgressAttrs"] &
      components["schemas"]["ModelTimestamp"])[];
    /** LessonProgressBizGetOneByLessonId */
    LessonProgressBizGetOneByLessonId: components["schemas"]["LessonProgressAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** NaicsBizGet */
    NaicsBizGet: {
      /** NaicsBizGet.data */
      data: ({
        /** code */
        code: string;
        /** title */
        title: string;
      } & components["schemas"]["ModelTimestamp"])[];
      /** NaicsBizGet.pagination */
      pagination: {
        /** NaicsBizGet.pagination.limit */
        limit: number;
        /** NaicsBizGet.pagination.page */
        page: number;
        /** NaicsBizGet.pagination.totalPages */
        totalPages: number;
        /** NaicsBizGet.pagination.count */
        count: number;
      };
    };
    /** NaicsBizGetByCode */
    NaicsBizGetByCode: {
      /** code */
      code: string;
      /** title */
      title: string;
    } & components["schemas"]["ModelTimestamp"];
    /** NotificationSendee */
    NotificationSendee: {
      /** tenant_id */
      tenant_id: string;
      /** to */
      to?: string;
      /** bcc, bcc.[] */
      bcc?: string[];
    };
    /** NotificationTemplate */
    NotificationTemplate: {
      /** NotificationTemplate.ACTIVITY_REQUEST_CREATED */
      ACTIVITY_REQUEST_CREATED: {
        /** NotificationTemplate.ACTIVITY_REQUEST_CREATED.payload */
        payload: {
          activityRequest: components["schemas"]["ActivityRequestAttr"];
          organization: components["schemas"]["OrganizationAttr"];
        };
      };
      /** NotificationTemplate.COMMENT_CREATED */
      COMMENT_CREATED: {
        /** NotificationTemplate.COMMENT_CREATED.payload */
        payload: {
          /** NotificationTemplate.COMMENT_CREATED.payload.resource */
          resource: {
            /** NotificationTemplate.COMMENT_CREATED.payload.resource.url */
            url: string;
          };
          /** NotificationTemplate.COMMENT_CREATED.payload.firstName */
          firstName?: string | null;
          /** NotificationTemplate.COMMENT_CREATED.payload.lastName */
          lastName?: string | null;
          /** NotificationTemplate.COMMENT_CREATED.payload.comment */
          comment: string;
          /** NotificationTemplate.COMMENT_CREATED.payload.date */
          date: string;
        };
      };
      /** NotificationTemplate.CONTACT_INVITED */
      CONTACT_INVITED: {
        /** NotificationTemplate.CONTACT_INVITED.payload */
        payload: {
          /** NotificationTemplate.CONTACT_INVITED.payload.organizations */
          organizations: {
            /** NotificationTemplate.CONTACT_INVITED.payload.organizations.[].name */
            name: string;
            /** NotificationTemplate.CONTACT_INVITED.payload.organizations.[].token */
            token: string;
            /** NotificationTemplate.CONTACT_INVITED.payload.organizations.[].url */
            url: string;
          }[];
        };
      };
      /** NotificationTemplate.DEAL_UPDATED */
      DEAL_UPDATED: {
        /** NotificationTemplate.DEAL_UPDATED.payload */
        payload: {
          /** NotificationTemplate.DEAL_UPDATED.payload.name */
          name?: string | null;
          /** NotificationTemplate.DEAL_UPDATED.payload.updates */
          updates: {
            [key: string]: {
              /** from */
              from: unknown;
              /** to */
              to: unknown;
            };
          };
          /** NotificationTemplate.DEAL_UPDATED.payload.url */
          url: string;
        };
      };
      /** NotificationTemplate.FOLLOWER_ADDED */
      FOLLOWER_ADDED: {
        /** NotificationTemplate.FOLLOWER_ADDED.payload */
        payload: {
          /** NotificationTemplate.FOLLOWER_ADDED.payload.resource */
          resource: {
            /** NotificationTemplate.FOLLOWER_ADDED.payload.resource.name */
            name?: string;
            /** NotificationTemplate.FOLLOWER_ADDED.payload.resource.type */
            type: "organization";
            /** NotificationTemplate.FOLLOWER_ADDED.payload.resource.url */
            url: string;
          };
          /** NotificationTemplate.FOLLOWER_ADDED.payload.primaryOwner */
          primaryOwner: {
            /** NotificationTemplate.FOLLOWER_ADDED.payload.primaryOwner.name */
            name: string;
          };
        };
      };
      /** NotificationTemplate.OWNER_ADDED */
      OWNER_ADDED: {
        /** NotificationTemplate.OWNER_ADDED.payload */
        payload: {
          /** NotificationTemplate.OWNER_ADDED.payload.resource */
          resource: {
            /** NotificationTemplate.OWNER_ADDED.payload.resource.type */
            type: "organization" | "deal" | "contact";
            /** NotificationTemplate.OWNER_ADDED.payload.resource.name */
            name?: string | null;
            /** NotificationTemplate.OWNER_ADDED.payload.resource.url */
            url: string;
          };
        };
      };
      /** NotificationTemplate.PASSWORD_CHANGED */
      PASSWORD_CHANGED: {
        /** NotificationTemplate.PASSWORD_CHANGED.payload */
        payload: {
          /** NotificationTemplate.PASSWORD_CHANGED.payload.password */
          password: string;
        };
      };
      /** NotificationTemplate.PASSWORD_RESET */
      PASSWORD_RESET: {
        /** NotificationTemplate.PASSWORD_RESET.payload */
        payload: {
          /** NotificationTemplate.PASSWORD_RESET.payload.email */
          email: string;
        };
      };
      /** NotificationTemplate.PASSWORD_RESET_REQUESTED */
      PASSWORD_RESET_REQUESTED: {
        /** NotificationTemplate.PASSWORD_RESET_REQUESTED.payload */
        payload: {
          /** NotificationTemplate.PASSWORD_RESET_REQUESTED.payload.url */
          url: string;
          /** NotificationTemplate.PASSWORD_RESET_REQUESTED.payload.resetUrl */
          resetUrl: string;
          /** NotificationTemplate.PASSWORD_RESET_REQUESTED.payload.email */
          email: string;
        };
      };
      /** NotificationTemplate.REMINDER_CREATED */
      REMINDER_CREATED: {
        /** NotificationTemplate.REMINDER_CREATED.payload */
        payload: {
          /** NotificationTemplate.REMINDER_CREATED.payload.firstName */
          firstName?: string | null;
          /** NotificationTemplate.REMINDER_CREATED.payload.activities */
          activities: unknown[];
        };
      };
      /** NotificationTemplate.REPORT_REQUESTED */
      REPORT_REQUESTED: {
        /** NotificationTemplate.REPORT_REQUESTED.payload */
        payload: {
          /** NotificationTemplate.REPORT_REQUESTED.payload.messageLine */
          messageLine: string;
        };
      };
      /** NotificationTemplate.TFA_CODE_REQUESTED */
      TFA_CODE_REQUESTED: {
        /** NotificationTemplate.TFA_CODE_REQUESTED.payload */
        payload: {
          /** NotificationTemplate.TFA_CODE_REQUESTED.payload.code */
          code: string;
        };
      };
      /** NotificationTemplate.USER_INVITED */
      USER_INVITED: {
        /** NotificationTemplate.USER_INVITED.payload */
        payload: {
          /** NotificationTemplate.USER_INVITED.payload.url */
          url: string;
          /** NotificationTemplate.USER_INVITED.payload.email */
          email: string;
        };
      };
      /** NotificationTemplate.USER_MENTIONED */
      USER_MENTIONED: {
        /** NotificationTemplate.USER_MENTIONED.payload */
        payload: {
          /** NotificationTemplate.USER_MENTIONED.payload.firstName */
          firstName?: string | null;
          /** NotificationTemplate.USER_MENTIONED.payload.lastName */
          lastName?: string | null;
          /** NotificationTemplate.USER_MENTIONED.payload.comment */
          comment: string;
          /** NotificationTemplate.USER_MENTIONED.payload.date */
          date: string;
          /** NotificationTemplate.USER_MENTIONED.payload.resource */
          resource: {
            /** NotificationTemplate.USER_MENTIONED.payload.resource.url */
            url: string;
          };
        };
      };
    };
    /** NotificationTemplateName */
    NotificationTemplateName: unknown;
    /** NotificationBizGetTheme */
    NotificationBizGetTheme: {
      /** NotificationBizGetTheme.projectName */
      projectName: string;
      /** NotificationBizGetTheme.projectUrl */
      projectUrl: string;
      /** NotificationBizGetTheme.projectLogo */
      projectLogo: string;
      /** NotificationBizGetTheme.projectColor */
      projectColor: string;
    };
    OrganizationBizGetOneById: components["schemas"]["OrganizationAttr"];
    /** OrganizationBizGetInsights */
    OrganizationBizGetInsights: {
      /** OrganizationBizGetInsights.sp */
      sp: {
        /** id */
        id: string;
        /** aggregation_type */
        aggregation_type?: "AVERAGE" | null;
        report_date: components["schemas"]["Date"];
        /** days_sales_out */
        days_sales_out?: number | null;
        /** days_payable_out */
        days_payable_out?: number | null;
        /** working_capital */
        working_capital?: number | null;
        /** working_capital_ratio */
        working_capital_ratio?: number | null;
      } & components["schemas"]["ModelTimestamp"];
      /** OrganizationBizGetInsights.rpmg */
      rpmg:
        | (components["schemas"]["RpmgVerticalAttr"] & {
            naics: components["schemas"]["NaicsAttr"];
            summary: components["schemas"]["RpmgSummaryAttr"];
            /** transaction_summary */
            transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
              transaction: components["schemas"]["RpmgTransactionAttr"];
            })[];
          })
        | (components["schemas"]["RpmgVerticalAttr"] & {
            /** naics */
            naics: unknown | null;
            summary: components["schemas"]["RpmgSummaryAttr"];
            /** transaction_summary */
            transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
              transaction: components["schemas"]["RpmgTransactionAttr"];
            })[];
          });
    };
    /** OwnerBizGetAllByResourceId */
    OwnerBizGetAllByResourceId:
      | components["schemas"]["ContactOwnerAttr"][]
      | components["schemas"]["DealOwnerAttr"][]
      | components["schemas"]["OrganizationOwnerAttr"][];
    /** OwnerBizGetByParent */
    OwnerBizGetByParent: {
      /** OwnerBizGetByParent.data */
      data: {
        /** OwnerBizGetByParent.data.[].user_id */
        user_id: string;
        /** OwnerBizGetByParent.data.[].total_owned */
        total_owned: number;
        user: components["schemas"]["UserAttr"];
      }[];
    };
    /** PermissionBizGetAllByRoleId.[] */
    PermissionBizGetAllByRoleId: components["schemas"]["PermissionAttr"][];
    /** PipelineBizGet */
    PipelineBizGet: {
      /** PipelineBizGet.data */
      data: components["schemas"]["PipelineAttr"][];
      /** PipelineBizGet.pagination */
      pagination: {
        /** PipelineBizGet.pagination.limit */
        limit: number;
        /** PipelineBizGet.pagination.page */
        page: number;
        /** PipelineBizGet.pagination.totalPages */
        totalPages: number;
        /** PipelineBizGet.pagination.count */
        count: number;
      };
    };
    PipelineBizGetOneById: components["schemas"]["PipelineAttr"];
    PipelineBizCreate: components["schemas"]["PipelineAttr"];
    PipelineBizUpdateById: components["schemas"]["PipelineAttr"];
    /** PipelineTeamBizCreate.[] */
    PipelineTeamBizCreate: components["schemas"]["PipelineTeamAttr"][];
    PipelineTeamBizGetOneById: components["schemas"]["PipelineTeamAttr"];
    PipelineTeamBizGetOneByCompositeIds: components["schemas"]["PipelineTeamAttr"];
    /** PipelineTeamBizGetAllById.[] */
    PipelineTeamBizGetAllById: ({
      /** id */
      id: string;
      /** tenantId */
      tenantId: string;
      /** name */
      name: string;
      /** description */
      description?: string | null;
      /** isActive */
      isActive: boolean;
      /**
       * deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
    } & components["schemas"]["Timestamp"])[];
    /** QuizBizFindOneById */
    QuizBizFindOneById: {
      /** quizId */
      quizId: string;
      /** maxAttempts */
      maxAttempts?: number | null;
    } & components["schemas"]["Timestamp"] & {
        /** questions */
        questions: components["schemas"]["QuizQuestionAttr"][];
      };
    /** QuizQuestionBizFindAllByQuizId.[] */
    QuizQuestionBizFindAllByQuizId: ({
      /** quizQuestionId */
      quizQuestionId: string;
      /** quizId */
      quizId: string;
      /** title */
      title?: string;
      /** type */
      type: "multipleChoice";
      /** choices */
      choices: components["schemas"]["QuizQuestionChoice"][];
      /** order */
      order: number;
    } & components["schemas"]["Timestamp"])[];
    /** QuizQuestionBizUpdateById */
    QuizQuestionBizUpdateById: {
      /** quizQuestionId */
      quizQuestionId: string;
      /** quizId */
      quizId: string;
      /** title */
      title?: string;
      /** type */
      type: "multipleChoice";
      /** choices */
      choices: components["schemas"]["QuizQuestionChoice"][];
      /** order */
      order: number;
    } & components["schemas"]["Timestamp"];
    /** ReportBizGetOneById */
    ReportBizGetOneById: components["schemas"]["ReportAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** ReportExtension */
    ReportExtension: "pdf" | "html";
    /** ReportGeneratorBizGetLocalPath */
    ReportGeneratorBizGetLocalPath: string;
    /** ReportGeneratorBizGetLocalPDFPath */
    ReportGeneratorBizGetLocalPDFPath: string;
    /** ReportGeneratorBizGetLocalHTMLPath */
    ReportGeneratorBizGetLocalHTMLPath: string;
    /** ReportGeneratorBizGetReportTitle */
    ReportGeneratorBizGetReportTitle: string;
    /** RoleBizGet */
    RoleBizGet: {
      /** RoleBizGet.data */
      data: components["schemas"]["RoleAttr"][];
      /** RoleBizGet.pagination */
      pagination: {
        /** RoleBizGet.pagination.limit */
        limit: number;
        /** RoleBizGet.pagination.page */
        page: number;
        /** RoleBizGet.pagination.totalPages */
        totalPages: number;
        /** RoleBizGet.pagination.count */
        count: number;
      };
    };
    RoleBizGetOneById: components["schemas"]["RoleAttr"];
    RoleBizCreate: components["schemas"]["RoleAttr"];
    RoleBizUpdateById: components["schemas"]["RoleAttr"];
    /** RoleBizCreateDefaultRole.[] */
    RoleBizCreateDefaultRole: components["schemas"]["RoleAttr"][];
    /** SearchBizGet.[] */
    SearchBizGet: components["schemas"]["SearchAttr"][];
    SearchBizCreate: components["schemas"]["SearchAttr"];
    SearchBizUpdateById: components["schemas"]["SearchAttr"];
    SearchBizGetOneById: components["schemas"]["SearchAttr"];
    /** TeamBizGet */
    TeamBizGet: {
      /** TeamBizGet.data */
      data: ({
        /** id */
        id: string;
        /** tenantId */
        tenantId: string;
        /** name */
        name: string;
        /** description */
        description?: string | null;
        /** isActive */
        isActive: boolean;
        /**
         * deletedAt
         * Format: date-time
         * @description ISO date time
         * @example 2006-01-02T15:04:05.000Z
         */
        deletedAt?: components["schemas"]["Date"] | null;
      } & components["schemas"]["Timestamp"])[];
      /** TeamBizGet.pagination */
      pagination: {
        /** TeamBizGet.pagination.limit */
        limit: number;
        /** TeamBizGet.pagination.page */
        page: number;
        /** TeamBizGet.pagination.totalPages */
        totalPages: number;
        /** TeamBizGet.pagination.count */
        count: number;
      };
    };
    /** TeamBizGetOneById */
    TeamBizGetOneById: {
      /** id */
      id: string;
      /** tenantId */
      tenantId: string;
      /** name */
      name: string;
      /** description */
      description?: string | null;
      /** isActive */
      isActive: boolean;
      /**
       * deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
    } & components["schemas"]["Timestamp"];
    /** TeamBizCreate */
    TeamBizCreate: {
      /** TeamBizCreate.members */
      members: ({
        /** teamId */
        teamId: string;
        /** userId */
        userId: string;
        /** isManager */
        isManager: boolean;
        /**
         * deletedAt
         * Format: date-time
         * @description ISO date time
         * @example 2006-01-02T15:04:05.000Z
         */
        deletedAt?: components["schemas"]["Date"] | null;
      } & components["schemas"]["Timestamp"])[];
      /** TeamBizCreate.id */
      id: string;
      /** TeamBizCreate.tenantId */
      tenantId: string;
      /** TeamBizCreate.name */
      name: string;
      /** TeamBizCreate.description */
      description?: string | null;
      /** TeamBizCreate.isActive */
      isActive: boolean;
      /**
       * TeamBizCreate.deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /** TeamBizUpdateById */
    TeamBizUpdateById: {
      /** id */
      id: string;
      /** tenantId */
      tenantId: string;
      /** name */
      name: string;
      /** description */
      description?: string | null;
      /** isActive */
      isActive: boolean;
      /**
       * deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
    } & components["schemas"]["Timestamp"];
    /** TeamMemberBizGetByTeamId */
    TeamMemberBizGetByTeamId: {
      /** TeamMemberBizGetByTeamId.data */
      data: ({
        /** teamId */
        teamId: string;
        /** userId */
        userId: string;
        /** isManager */
        isManager: boolean;
        /**
         * deletedAt
         * Format: date-time
         * @description ISO date time
         * @example 2006-01-02T15:04:05.000Z
         */
        deletedAt?: components["schemas"]["Date"] | null;
      } & components["schemas"]["Timestamp"] & {
          user: components["schemas"]["UserAttr"];
        })[];
      /** TeamMemberBizGetByTeamId.pagination */
      pagination: {
        /** TeamMemberBizGetByTeamId.pagination.limit */
        limit: number;
        /** TeamMemberBizGetByTeamId.pagination.page */
        page: number;
        /** TeamMemberBizGetByTeamId.pagination.totalPages */
        totalPages: number;
        /** TeamMemberBizGetByTeamId.pagination.count */
        count: number;
      };
    };
    /** TeamMemberBizGetByUserId.[] */
    TeamMemberBizGetByUserId: ({
      /** teamId */
      teamId: string;
      /** userId */
      userId: string;
      /** isManager */
      isManager: boolean;
      /**
       * deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
    } & components["schemas"]["Timestamp"] & {
        team: components["schemas"]["TeamAttr"];
      })[];
    /** TeamMemberBizCreateByCompositeIds */
    TeamMemberBizCreateByCompositeIds: {
      /** teamId */
      teamId: string;
      /** userId */
      userId: string;
      /** isManager */
      isManager: boolean;
      /**
       * deletedAt
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
    } & components["schemas"]["Timestamp"];
    /** TenantBizGet */
    TenantBizGet: {
      /** TenantBizGet.data */
      data: (components["schemas"]["TenantAttrs"] &
        components["schemas"]["ModelTimestamp"] & {
          /** users, users.[] */
          users?: components["schemas"]["UserAttr"][];
        })[];
      /** TenantBizGet.pagination */
      pagination: {
        /** TenantBizGet.pagination.limit */
        limit: number;
        /** TenantBizGet.pagination.page */
        page: number;
        /** TenantBizGet.pagination.totalPages */
        totalPages: number;
        /** TenantBizGet.pagination.count */
        count: number;
      };
    };
    /** TenantBizGetOneById */
    TenantBizGetOneById: components["schemas"]["TenantAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** TenantBizUpdateById */
    TenantBizUpdateById: components["schemas"]["TenantAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** TenantBizCreateTenant */
    TenantBizCreateTenant: components["schemas"]["TenantAttrs"] &
      components["schemas"]["ModelTimestamp"];
    TenantConfigBizGetOneByTenantId: components["schemas"]["TenantConfigAttr"];
    /** TenantDealStageBizGetAllByPipelineId.[] */
    TenantDealStageBizGetAllByPipelineId: components["schemas"]["TenantDealStageAttrs"][];
    TenantDealStageBizGetOneById: components["schemas"]["TenantDealStageAttrs"];
    /** TenantIntegrationCreateBizAttr */
    TenantIntegrationCreateBizAttr: {
      /** TenantIntegrationCreateBizAttr.enabled */
      enabled: boolean;
      /** TenantIntegrationCreateBizAttr.credentials */
      credentials: {
        /** TenantIntegrationCreateBizAttr.credentials.client_id */
        client_id: string;
        /** TenantIntegrationCreateBizAttr.credentials.client_secret */
        client_secret: string;
      };
    };
    /** TenantIntegrationBizGet */
    TenantIntegrationBizGet: {
      /** TenantIntegrationBizGet.data */
      data: ({
        /** id */
        id: string;
        /** tenant_id */
        tenant_id: string;
        /** type */
        type: "FISERV";
        credentials: components["schemas"]["TenantIntegrationCredential"];
        /** enabled */
        enabled: boolean;
      } & components["schemas"]["ModelTimestamp"])[];
      /** TenantIntegrationBizGet.pagination */
      pagination: {
        /** TenantIntegrationBizGet.pagination.limit */
        limit: number;
        /** TenantIntegrationBizGet.pagination.page */
        page: number;
        /** TenantIntegrationBizGet.pagination.totalPages */
        totalPages: number;
        /** TenantIntegrationBizGet.pagination.count */
        count: number;
      };
    };
    /** TenantIntegrationBizGetOneByType */
    TenantIntegrationBizGetOneByType: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id: string;
      /** type */
      type: "FISERV";
      credentials: components["schemas"]["TenantIntegrationCredential"];
      /** enabled */
      enabled: boolean;
    } & components["schemas"]["ModelTimestamp"];
    /** TenantIntegrationBizCreate */
    TenantIntegrationBizCreate: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id: string;
      /** type */
      type: "FISERV";
      credentials: components["schemas"]["TenantIntegrationCredential"];
      /** enabled */
      enabled: boolean;
    } & components["schemas"]["ModelTimestamp"];
    /** TenantIntegrationBizUpdateByType */
    TenantIntegrationBizUpdateByType: {
      /** id */
      id: string;
      /** tenant_id */
      tenant_id: string;
      /** type */
      type: "FISERV";
      credentials: components["schemas"]["TenantIntegrationCredential"];
      /** enabled */
      enabled: boolean;
    } & components["schemas"]["ModelTimestamp"];
    /** TenantIntegrationBizDeleteByType */
    TenantIntegrationBizDeleteByType: number;
    /** UserBizGetAllByGroupId.[] */
    UserBizGetAllByGroupId: (components["schemas"]["UserAttrs"] &
      components["schemas"]["ModelTimestamp"])[];
    /** UserBizGet */
    UserBizGet: {
      /** UserBizGet.data */
      data: (components["schemas"]["UserAttrs"] &
        components["schemas"]["ModelTimestamp"] & {
          tenant: components["schemas"]["TenantAttr"];
          role?: components["schemas"]["RoleAttr"];
          group?: components["schemas"]["GroupAttr"];
        })[];
      /** UserBizGet.pagination */
      pagination: {
        /** UserBizGet.pagination.limit */
        limit: number;
        /** UserBizGet.pagination.page */
        page: number;
        /** UserBizGet.pagination.totalPages */
        totalPages: number;
        /** UserBizGet.pagination.count */
        count: number;
      };
    };
    /** UserBizGetOneById */
    UserBizGetOneById: components["schemas"]["UserAttrs"] &
      components["schemas"]["ModelTimestamp"] & {
        role: components["schemas"]["RoleAttr"];
        group: components["schemas"]["GroupAttr"];
      };
    /** UserBizGetOneAuthorizationById */
    UserBizGetOneAuthorizationById: unknown;
    /** UserBizUpdateById */
    UserBizUpdateById: components["schemas"]["UserAttrs"] &
      components["schemas"]["ModelTimestamp"];
    UserCredentialBizGetOneById: components["schemas"]["UserCredentialAttr"];
    /** VideoBizCreate */
    VideoBizCreate: unknown;
    /** RootGroup */
    RootGroup: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"];
    /** GroupNode */
    GroupNode: components["schemas"]["GroupAttrs"] &
      components["schemas"]["ModelTimestamp"] & {
        /** children */
        children: components["schemas"]["GroupNode"][];
      };
    /** Includeable */
    Includeable: { [key: string]: unknown };
    /** T */
    T: { [key: string]: unknown };
    /**
     * ModelTimestamp
     * @description Older models which used underscored: true
     */
    ModelTimestamp: {
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    };
    /** Timestamp */
    Timestamp: {
      createdAt: components["schemas"]["Date"];
      updatedAt: components["schemas"]["Date"];
    };
    /**
     * Order
     * @description Allows ordering by a column in ascending or descending order.
     * And will also allow ordering by nulls first or last if needed.
     */
    Order: [
      string,
      (
        | "asc"
        | "desc"
        | "asc nulls first"
        | "asc nulls last"
        | "desc nulls first"
        | "desc nulls last"
      )
    ];
    /**
     * Search
     * @description Value provided is used to perform an ILIKE search on fields such as:
     * * title
     * * description
     * * name
     * Dependent on the resource being queried.
     */
    Search: string;
    /** AssociationRestriction */
    AssociationRestriction: "include" | "required";
    /**
     * Favorites
     * @description Whether favorites should be included, excluded, or required in the response.
     * * include - favorites will be included in the response
     * * exclude - favorites will be excluded from the response
     * * required - favorites will be required in the response
     * If self=true, favorites will be limited to the current user.
     * Else, favorites will include all users who have favorited the course.
     */
    Favorites: "include" | "required";
    /**
     * Progress
     * @description Whether progress should be included in the response.
     * If self=true, progress will be limited to the current user.
     * Else, progress will all course attempts.
     */
    Progress: "include" | "required";
    /** Self */
    Self: {
      /**
       * Self.self
       * @description Filters result by self. As users with elevated permissions can query data
       * across a tenant(s) and user(s), there may be situations where a user
       * would like to see data related only about themselves.
       * This includes data created by them or data assigned to them.
       */
      self?: boolean;
    };
    /** CreatedBySelf */
    CreatedBySelf: {
      /** CreatedBySelf.createdBySelf */
      createdBySelf?: boolean;
    };
    /** Pagination */
    Pagination: {
      /**
       * Pagination.limit
       * @description Curent pagination limit
       */
      limit: number;
      /**
       * Pagination.page
       * @description Current pagination page
       */
      page: number;
    };
    /** PaginationResponse */
    PaginationResponse: {
      /**
       * PaginationResponse.limit
       * @description Curent pagination limit
       */
      limit: number;
      /**
       * PaginationResponse.page
       * @description Current pagination page
       */
      page: number;
      /**
       * PaginationResponse.totalPages
       * @description Total pagination pages
       */
      totalPages: number;
      /**
       * PaginationResponse.count
       * @description Total pagination size
       */
      count: number;
    };
    /** Resources */
    Resources: "contact" | "deal" | "organization";
    /** ResourceKeys */
    ResourceKeys: "organization_id" | "deal_id" | "contact_id";
    /** ContextFields */
    ContextFields: {
      /** ContextFields.tenantId */
      tenantId?: string;
      /** ContextFields.userId */
      userId?: string;
      /** ContextFields.ownedIds, ContextFields.ownedIds.[] */
      ownedIds?: string[];
      /** ContextFields.organizationId */
      organizationId?: string;
      /** ContextFields.contactId */
      contactId?: string;
      /** ContextFields.accessibleUserIds, ContextFields.accessibleUserIds.[] */
      accessibleUserIds?: string[];
    };
    /** MerchantOutput */
    MerchantOutput: {
      /** MerchantOutput.type */
      type: "MERCHANT";
      /** MerchantOutput.name */
      name: string;
      /** MerchantOutput.requestDate */
      requestDate: string;
      /** MerchantOutput.totalTransactions */
      totalTransactions: number;
      /** MerchantOutput.totalFees */
      totalFees: number;
      /** MerchantOutput.averageFee */
      averageFee: number;
      /** MerchantOutput.totalDollarsProcessed */
      totalDollarsProcessed: number;
      /** MerchantOutput.averageTransaction */
      averageTransaction: number;
      /** MerchantOutput.effectiveRate */
      effectiveRate: number;
      /** MerchantOutput.authorizationAttempts */
      authorizationAttempts: number;
      /** MerchantOutput.authorizationApprovals */
      authorizationApprovals: number;
      /** MerchantOutput.authorizationToApprovalRate */
      authorizationToApprovalRate: number;
      /** MerchantOutput.refundAmount */
      refundAmount: number;
      /** MerchantOutput.salesAmount */
      salesAmount: number;
      /** MerchantOutput.refundPercentage */
      refundPercentage: number;
      /** MerchantOutput.chargeBackCount */
      chargeBackCount: number;
      /** MerchantOutput.chargeBackPercentage */
      chargeBackPercentage: number;
      /** MerchantOutput.interchangeFees */
      interchangeFees: number;
      /** MerchantOutput.serviceFees */
      serviceFees: number;
      /** MerchantOutput.processorFees */
      processorFees: number;
      /** MerchantOutput.feesPercentageNotControlledByBank */
      feesPercentageNotControlledByBank: number;
      /** MerchantOutput.networks */
      networks: {
        /** MerchantOutput.networks.[].type */
        type: "MASTERCARD" | "VISA" | "AMEX" | "MISCELLANEOUS";
        /** MerchantOutput.networks.[].dollarsProcessed */
        dollarsProcessed: number;
        /** MerchantOutput.networks.[].interchangeFees */
        interchangeFees: number;
        /** MerchantOutput.networks.[].networkCharges */
        networkCharges: number;
        /** MerchantOutput.networks.[].feePercentage */
        feePercentage: number;
      }[];
    };
    /** TreasuryOutput */
    TreasuryOutput: {
      /** TreasuryOutput.type */
      type: "TREASURY";
      /** TreasuryOutput.client_name */
      client_name: string;
      /** TreasuryOutput.proposed_bank_name */
      proposed_bank_name: string;
      /** TreasuryOutput.annual_services_savings */
      annual_services_savings: number;
      /** TreasuryOutput.annual_estimated_savings */
      annual_estimated_savings: number;
      /** TreasuryOutput.services */
      services: (components["schemas"]["ReportTreasuryService"] & {
        /** annual_savings */
        annual_savings: number;
      })[];
    };
    /** ReportOutput */
    ReportOutput: {
      /** ReportOutput.type */
      type: "TREASURY" | "MERCHANT";
    };
    /** PlaybackIdPolicy */
    PlaybackIdPolicy: "public" | "signed";
    /** AssetMp4Support */
    AssetMp4Support: "none" | "standard";
    /** AssetMasterAccess */
    AssetMasterAccess: "none" | "temporary";
    /** TrackStatus */
    TrackStatus: "preparing" | "ready" | "errored";
    /** LatencyMode */
    LatencyMode: "standard" | "low" | "reduced";
    /** RecordingTimesType */
    RecordingTimesType: "content" | "slate";
    /** Track */
    Track:
      | components["schemas"]["VideoTrack"]
      | components["schemas"]["AudioTrack"]
      | components["schemas"]["TextTrack"];
    /** SpaceStatus */
    SpaceStatus: "active" | "idle";
    /** BroadcastStatus */
    BroadcastStatus: "active" | "idle";
    /** BroadcastLayout */
    BroadcastLayout: "gallery" | "active-speaker";
    /** BroadcastResolution */
    BroadcastResolution:
      | "1920x1080"
      | "1280x720"
      | "1080x1920"
      | "720x1280"
      | "1080x1080"
      | "720x720";
    /** RecordingTimes */
    RecordingTimes: {
      /** RecordingTimes.started_at */
      started_at: string;
      /** RecordingTimes.duration */
      duration: number;
      type?: components["schemas"]["RecordingTimesType"];
    };
    /** SigningKey */
    SigningKey: {
      /** SigningKey.id */
      id: string;
      /** SigningKey.created_at */
      created_at: string;
      /** SigningKey.private_key */
      private_key?: string;
    };
    /** Identifier */
    Identifier: {
      /** Identifier.type */
      type: "asset" | "live_stream";
      /** Identifier.id */
      id: string;
    };
    /** PlaybackIdentifier */
    PlaybackIdentifier: {
      /** PlaybackIdentifier.policy */
      policy: "public" | "signed";
      object: components["schemas"]["Identifier"];
      /** PlaybackIdentifier.id */
      id: string;
    };
    /** PlaybackId */
    PlaybackId: {
      /** PlaybackId.id */
      id: string;
      /** PlaybackId.policy */
      policy: "public" | "signed";
    };
    /** AudioTrack */
    AudioTrack: {
      /** AudioTrack.id */
      id: string;
      /** AudioTrack.passthrough */
      passthrough: string;
      /** AudioTrack.status */
      status: "preparing" | "ready" | "errored";
      /** AudioTrack.type */
      type: "audio";
      /** AudioTrack.duration */
      duration: number;
      /** AudioTrack.max_channels */
      max_channels: number;
      /** AudioTrack.max_channel_layout */
      max_channel_layout: string;
    };
    /** TextTrack */
    TextTrack: {
      /** TextTrack.id */
      id: string;
      /** TextTrack.passthrough */
      passthrough: string;
      /** TextTrack.status */
      status: "preparing" | "ready" | "errored";
      /** TextTrack.type */
      type: "text";
      /** TextTrack.text_type */
      text_type: "subtitles";
      /** TextTrack.language_code */
      language_code: string;
      /** TextTrack.closed_captions */
      closed_captions: boolean;
      /** TextTrack.name */
      name: string;
    };
    /** VideoTrack */
    VideoTrack: {
      /** VideoTrack.id */
      id: string;
      /** VideoTrack.passthrough */
      passthrough: string;
      /** VideoTrack.status */
      status: "preparing" | "ready" | "errored";
      /** VideoTrack.type */
      type: "video";
      /** VideoTrack.duration */
      duration: number;
      /** VideoTrack.max_width */
      max_width: number;
      /** VideoTrack.max_height */
      max_height: number;
      /** VideoTrack.max_frame_rate */
      max_frame_rate: number;
    };
    /** InputOverlaySettings */
    InputOverlaySettings: {
      /** InputOverlaySettings.vertical_align */
      vertical_align?: "top" | "bottom" | "middle";
      /** InputOverlaySettings.vertical_margin */
      vertical_margin?: string;
      /** InputOverlaySettings.horizontal_align */
      horizontal_align?: "left" | "right" | "center";
      /** InputOverlaySettings.horizontal_margin */
      horizontal_margin?: string;
      /** InputOverlaySettings.width */
      width?: string;
      /** InputOverlaySettings.height */
      height?: string;
      /** InputOverlaySettings.opacity */
      opacity?: string;
    };
    /** InputSettings */
    InputSettings: {
      /** InputSettings.url */
      url: string;
      /** InputSettings.start_time */
      start_time?: number;
      /** InputSettings.end_time */
      end_time?: number;
      overlay_settings?: components["schemas"]["InputOverlaySettings"];
      /** InputSettings.type */
      type?: "text" | "video" | "audio";
      /** InputSettings.text_type */
      text_type?: "subtitles";
      /** InputSettings.language_code */
      language_code?: string;
      /** InputSettings.name */
      name?: string;
      /** InputSettings.closed_captions */
      closed_captions?: boolean;
      /** InputSettings.passthrough */
      passthrough?: string;
    };
    /** CreateAssetParams */
    CreateAssetParams: {
      /** CreateAssetParams.input */
      input: string | components["schemas"]["InputSettings"][];
      /** CreateAssetParams.playback_policy */
      playback_policy?:
        | components["schemas"]["PlaybackIdPolicy"]
        | components["schemas"]["PlaybackIdPolicy"][];
      /** CreateAssetParams.passthrough */
      passthrough?: string;
      mp4_support?: components["schemas"]["AssetMp4Support"];
      /** CreateAssetParams.normalize_audio */
      normalize_audio?: boolean;
      /** CreateAssetParams.test */
      test?: boolean;
      master_access?: components["schemas"]["AssetMasterAccess"];
      /** CreateAssetParams.per_title_encode */
      per_title_encode?: boolean;
    };
    /** UpdateAssetParams */
    UpdateAssetParams: {
      /** UpdateAssetParams.passthrough */
      passthrough?: string;
    };
    /** StaticRendition */
    StaticRendition: {
      /** StaticRendition.name */
      name: "low.mp4" | "medium.mp4" | "high.mp4";
      /** StaticRendition.ext */
      ext: "mp4";
      /** StaticRendition.height */
      height: number;
      /** StaticRendition.width */
      width: number;
      /** StaticRendition.bitrate */
      bitrate: number;
      /** StaticRendition.filesize */
      filesize: number;
    };
    /** StaticRenditions */
    StaticRenditions: {
      /** StaticRenditions.status */
      status: "preparing" | "ready" | "errored";
      /** StaticRenditions.files */
      files: components["schemas"]["StaticRendition"][];
    };
    /** NonStandardInputReasons */
    NonStandardInputReasons: {
      /** NonStandardInputReasons.video_codec */
      video_codec?: string;
      /** NonStandardInputReasons.audio_codec */
      audio_codec?: string;
      /** NonStandardInputReasons.video_gop_size */
      video_gop_size?: string;
      /** NonStandardInputReasons.video_frame_rate */
      video_frame_rate?: string;
      /** NonStandardInputReasons.video_resolution */
      video_resolution?: string;
      /** NonStandardInputReasons.video_bitrate */
      video_bitrate?: string;
      /** NonStandardInputReasons.pixel_aspect_ratio */
      pixel_aspect_ratio?: string;
      /** NonStandardInputReasons.video_edit_list */
      video_edit_list?: string;
      /** NonStandardInputReasons.audio_edit_list */
      audio_edit_list?: string;
      /** NonStandardInputReasons.unexpected_media_file_parameters */
      unexpected_media_file_parameters?: string;
    };
    /** AssetMaster */
    AssetMaster: {
      /** AssetMaster.status */
      status: "preparing" | "ready" | "errored";
      /** AssetMaster.url */
      url: string;
    };
    /** AssetError */
    AssetError: {
      /** AssetError.type */
      type: string;
      /** AssetError.messages */
      messages: string[];
    };
    /** Asset */
    Asset: {
      /** Asset.id */
      id: string;
      /** Asset.created_at */
      created_at: string;
      /** Asset.status */
      status: "preparing" | "ready" | "errored";
      /** Asset.duration */
      duration?: number;
      /** Asset.max_stored_resolution */
      max_stored_resolution?: "Audio only" | "SD" | "HD" | "FHD" | "UHD";
      /** Asset.max_stored_frame_rate */
      max_stored_frame_rate?: number;
      /** Asset.aspect_ratio */
      aspect_ratio?: string;
      /** Asset.per_title_encode */
      per_title_encode?: boolean;
      /** Asset.is_live */
      is_live?: boolean;
      /** Asset.source_asset_id */
      source_asset_id?: string;
      /** Asset.playback_ids */
      playback_ids?: components["schemas"]["PlaybackId"][];
      /** Asset.tracks */
      tracks?: components["schemas"]["Track"][];
      /** Asset.mp4_support */
      mp4_support: "none" | "standard";
      static_renditions?: components["schemas"]["StaticRenditions"];
      /** Asset.master_access */
      master_access: "none" | "temporary";
      master?: components["schemas"]["AssetMaster"];
      /** Asset.passthrough */
      passthrough?: string;
      errors?: components["schemas"]["AssetError"];
      /** Asset.upload_id */
      upload_id?: string;
      /** Asset.live_stream_id */
      live_stream_id?: string;
      /** Asset.normalize_audio */
      normalize_audio?: boolean;
      /** Asset.recording_times */
      recording_times?: components["schemas"]["RecordingTimes"][];
      non_standard_input_reasons?: components["schemas"]["NonStandardInputReasons"];
      /** Asset.test */
      test: boolean;
    };
    /** InputTrack */
    InputTrack: {
      /** InputTrack.type */
      type?: string;
      /** InputTrack.duration */
      duration?: number;
      /** InputTrack.encoding */
      encoding?: string;
      /** InputTrack.width */
      width?: number;
      /** InputTrack.height */
      height?: number;
      /** InputTrack.frame_rate */
      frame_rate?: number;
      /** InputTrack.sample_rate */
      sample_rate?: number;
      /** InputTrack.sample_size */
      sample_size?: number;
      /** InputTrack.channels */
      channels?: number;
    };
    /** InputFile */
    InputFile: {
      /** InputFile.container_format */
      container_format?: string;
      /** InputFile.tracks */
      tracks?: components["schemas"]["InputTrack"][];
    };
    /** InputInfo */
    InputInfo: {
      settings: components["schemas"]["InputOverlaySettings"];
      file: components["schemas"]["InputFile"];
    };
    /** ListAssetParams */
    ListAssetParams: {
      /** ListAssetParams.limit */
      limit?: number;
      /** ListAssetParams.page */
      page?: number;
      /** ListAssetParams.live_stream_id */
      live_stream_id?: string;
      /** ListAssetParams.upload_id */
      upload_id?: string;
    };
    /** CreatePlaybackIdParams */
    CreatePlaybackIdParams: {
      /** CreatePlaybackIdParams.policy */
      policy: "public" | "signed";
    };
    /** CreateTrackParams */
    CreateTrackParams: {
      /** CreateTrackParams.url */
      url: string;
      /** CreateTrackParams.type */
      type: "text";
      /** CreateTrackParams.text_type */
      text_type: "subtitles";
      /** CreateTrackParams.language_code */
      language_code: string;
      /** CreateTrackParams.name */
      name?: string;
      /** CreateTrackParams.closed_captions */
      closed_captions?: boolean;
      /** CreateTrackParams.passthrough */
      passthrough?: string;
    };
    /** UpdateMp4SupportParams */
    UpdateMp4SupportParams: {
      /** UpdateMp4SupportParams.mp4_support */
      mp4_support: "none" | "standard";
    };
    /** UpdateMasterAccessParams */
    UpdateMasterAccessParams: {
      /** UpdateMasterAccessParams.master_access */
      master_access: "none" | "temporary";
    };
    /** ListDeliveryUsageParams */
    ListDeliveryUsageParams: {
      /** ListDeliveryUsageParams.limit */
      limit?: number;
      /** ListDeliveryUsageParams.page */
      page?: number;
      /** ListDeliveryUsageParams.asset_id */
      asset_id?: string;
      /** ListDeliveryUsageParams.timeframe */
      timeframe: number[];
    };
    /** DeliveryReport */
    DeliveryReport: {
      /** DeliveryReport.live_stream_id */
      live_stream_id?: string;
      /** DeliveryReport.asset_id */
      asset_id: string;
      /** DeliveryReport.passthrough */
      passthrough?: string;
      /** DeliveryReport.created_at */
      created_at: string;
      /** DeliveryReport.asset_state */
      asset_state: string;
      /** DeliveryReport.asset_duration */
      asset_duration: number;
      /** DeliveryReport.delivered_seconds */
      delivered_seconds: number;
    };
    /** SimulcastTargetParams */
    SimulcastTargetParams: {
      /** SimulcastTargetParams.url */
      url: string;
      /** SimulcastTargetParams.stream_key */
      stream_key?: string;
      /** SimulcastTargetParams.passthrough */
      passthrough?: string;
    };
    /** SimulcastTarget */
    SimulcastTarget: {
      /** SimulcastTarget.id */
      id?: string;
      /** SimulcastTarget.passthrough */
      passthrough?: string;
      /** SimulcastTarget.status */
      status: "errored" | "idle" | "starting" | "broadcasting";
      /** SimulcastTarget.stream_key */
      stream_key?: string;
      /** SimulcastTarget.url */
      url: string;
    };
    /** LiveStreamGeneratedSubtitleSettings */
    LiveStreamGeneratedSubtitleSettings: {
      /** LiveStreamGeneratedSubtitleSettings.name */
      name: string;
      /** LiveStreamGeneratedSubtitleSettings.passthrough */
      passthrough?: string;
      /** LiveStreamGeneratedSubtitleSettings.language_code */
      language_code?: string;
      /** LiveStreamGeneratedSubtitleSettings.transcription_vocabulary_ids */
      transcription_vocabulary_ids?: string[];
    };
    /** LiveStream */
    LiveStream: {
      /** LiveStream.id */
      id?: string;
      /** LiveStream.created_at */
      created_at?: string;
      /** LiveStream.stream_key */
      stream_key?: string;
      /** LiveStream.active_asset_id */
      active_asset_id?: string;
      /** LiveStream.recent_asset_ids */
      recent_asset_ids?: string[];
      /** LiveStream.status */
      status?: string;
      /** LiveStream.playback_ids */
      playback_ids?: components["schemas"]["PlaybackId"][];
      new_asset_settings?: components["schemas"]["Asset"];
      /** LiveStream.passthrough */
      passthrough?: string;
      /** LiveStream.reconnect_window */
      reconnect_window?: number;
      /** LiveStream.reduced_latency */
      reduced_latency?: boolean;
      latency_mode?: components["schemas"]["LatencyMode"];
      /** LiveStream.simulcast_targets */
      simulcast_targets?: components["schemas"]["SimulcastTarget"][];
      /** LiveStream.test */
      test?: boolean;
      /** LiveStream.generated_subtitles */
      generated_subtitles?: components["schemas"]["LiveStreamGeneratedSubtitleSettings"][];
      /** LiveStream.use_slate_for_standard_latency */
      use_slate_for_standard_latency?: boolean;
      /** LiveStream.reconnect_slate_url */
      reconnect_slate_url?: string;
    };
    /** LiveStreamEmbeddedSubtitleSettings */
    LiveStreamEmbeddedSubtitleSettings: {
      /** LiveStreamEmbeddedSubtitleSettings.name */
      name: string;
      /** LiveStreamEmbeddedSubtitleSettings.passthrough */
      passthrough?: string;
      /** LiveStreamEmbeddedSubtitleSettings.language_code */
      language_code?: string;
      /** LiveStreamEmbeddedSubtitleSettings.language_channel */
      language_channel?: "cc1";
    };
    /** UpdateLiveStreamEmbeddedSubtitlesParams */
    UpdateLiveStreamEmbeddedSubtitlesParams: {
      /** UpdateLiveStreamEmbeddedSubtitlesParams.embedded_subtitles */
      embedded_subtitles: components["schemas"]["LiveStreamEmbeddedSubtitleSettings"][];
    };
    /** UpdateLiveStreamGeneratedSubtitlesParams */
    UpdateLiveStreamGeneratedSubtitlesParams: {
      /** UpdateLiveStreamGeneratedSubtitlesParams.generated_subtitles */
      generated_subtitles: components["schemas"]["LiveStreamGeneratedSubtitleSettings"][];
    };
    /** CreateLiveStreamParams */
    CreateLiveStreamParams: {
      /** CreateLiveStreamParams.reconnect_window */
      reconnect_window?: number;
      /** CreateLiveStreamParams.playback_policy */
      playback_policy?:
        | components["schemas"]["PlaybackIdPolicy"]
        | components["schemas"]["PlaybackIdPolicy"][];
      /** CreateLiveStreamParams.new_asset_settings */
      new_asset_settings?: unknown;
      /** CreateLiveStreamParams.passthrough */
      passthrough?: string;
      /** CreateLiveStreamParams.reduced_latency */
      reduced_latency?: boolean;
      latency_mode?: components["schemas"]["LatencyMode"];
      /** CreateLiveStreamParams.simulcast_targets */
      simulcast_targets?: components["schemas"]["SimulcastTargetParams"][];
      /** CreateLiveStreamParams.test */
      test?: boolean;
      /** CreateLiveStreamParams.audio_only */
      audio_only?: boolean;
      /** CreateLiveStreamParams.max_continuous_duration */
      max_continuous_duration?: number;
      /** CreateLiveStreamParams.embedded_subtitles */
      embedded_subtitles?: components["schemas"]["LiveStreamEmbeddedSubtitleSettings"][];
      /** CreateLiveStreamParams.use_slate_for_standard_latency */
      use_slate_for_standard_latency?: boolean;
      /** CreateLiveStreamParams.reconnect_slate_url */
      reconnect_slate_url?: string;
    };
    /** UpdateLiveStreamParams */
    UpdateLiveStreamParams: {
      /** UpdateLiveStreamParams.passthrough */
      passthrough?: string;
      latency_mode?: components["schemas"]["LatencyMode"];
      /** UpdateLiveStreamParams.reconnect_window */
      reconnect_window?: number;
      /** UpdateLiveStreamParams.max_continuous_duration */
      max_continuous_duration?: number;
      /** UpdateLiveStreamParams.use_slate_for_standard_latency */
      use_slate_for_standard_latency?: boolean;
      /** UpdateLiveStreamParams.reconnect_slate_url */
      reconnect_slate_url?: string;
    };
    /** ListLiveStreamParams */
    ListLiveStreamParams: {
      /** ListLiveStreamParams.limit */
      limit?: number;
      /** ListLiveStreamParams.page */
      page?: number;
      /** ListLiveStreamParams.live_stream_id */
      live_stream_id?: string;
      /** ListLiveStreamParams.stream_key */
      stream_key?: string;
      /** ListLiveStreamParams.status */
      status?: string;
      /** ListLiveStreamParams.upload_id */
      upload_id?: string;
    };
    /** Upload */
    Upload: {
      /** Upload.id */
      id: string;
      /** Upload.timeout */
      timeout: number;
      /** Upload.status */
      status:
        | "errored"
        | "waiting"
        | "asset_created"
        | "cancelled"
        | "timed_out";
      new_asset_settings: components["schemas"]["CreateAssetParams"];
      /** Upload.asset_id */
      asset_id?: string;
      /** Upload.error */
      error?: {
        /** Upload.error.type */
        type?: string;
        /** Upload.error.message */
        message?: string;
      };
      /** Upload.cors_origin */
      cors_origin?: string;
      /** Upload.url */
      url: string;
      /** Upload.test */
      test?: boolean;
    };
    /** CreateUploadParams */
    CreateUploadParams: {
      /** CreateUploadParams.timeout */
      timeout?: string;
      /** CreateUploadParams.cors_origin */
      cors_origin?: string;
      /** CreateUploadParams.new_asset_settings */
      new_asset_settings?: unknown;
      /** CreateUploadParams.test */
      test?: boolean;
    };
    /** ListUploadParams */
    ListUploadParams: {
      /** ListUploadParams.limit */
      limit?: number;
      /** ListUploadParams.page */
      page?: number;
      /** ListUploadParams.upload_id */
      upload_id?: string;
    };
    /** GetAssetPlaybackIdResponse */
    GetAssetPlaybackIdResponse: {
      data: components["schemas"]["PlaybackId"];
    };
    /** GetLiveStreamPlaybackIdResponse */
    GetLiveStreamPlaybackIdResponse: {
      data: components["schemas"]["PlaybackId"];
    };
    /** ReferrerDomainRestriction */
    ReferrerDomainRestriction: {
      /** ReferrerDomainRestriction.allowed_domains */
      allowed_domains?: string[];
      /** ReferrerDomainRestriction.allow_no_referrer */
      allow_no_referrer?: boolean;
    };
    /** CreatePlaybackRestrictionParams */
    CreatePlaybackRestrictionParams: {
      referrer?: components["schemas"]["ReferrerDomainRestriction"];
    };
    /** PlaybackRestriction */
    PlaybackRestriction: {
      /** PlaybackRestriction.id */
      id: string;
      /** PlaybackRestriction.created_at */
      created_at: string;
      /** PlaybackRestriction.updated_at */
      updated_at?: string;
      referrer?: components["schemas"]["ReferrerDomainRestriction"];
    };
    /** PlaybackRestrictionResponse */
    PlaybackRestrictionResponse: {
      data: components["schemas"]["PlaybackRestriction"];
    };
    /** ListPlaybackRestrictionsResponse */
    ListPlaybackRestrictionsResponse: {
      /** ListPlaybackRestrictionsResponse.data */
      data: components["schemas"]["PlaybackRestriction"][];
    };
    /** Broadcast */
    Broadcast: {
      /** Broadcast.id */
      id: string;
      /** Broadcast.live_stream_id */
      live_stream_id: string;
      /** Broadcast.status */
      status: "active" | "idle";
      /** Broadcast.layout */
      layout: "gallery" | "active-speaker";
      /** Broadcast.resolution */
      resolution:
        | "1920x1080"
        | "1280x720"
        | "1080x1920"
        | "720x1280"
        | "1080x1080"
        | "720x720";
      /** Broadcast.passthrough */
      passthrough?: string;
      /** Broadcast.background */
      background?: string;
    };
    /** Space */
    Space: {
      /** Space.id */
      id: string;
      /** Space.created_at */
      created_at: string;
      /** Space.type */
      type: "server";
      /** Space.status */
      status: "active" | "idle";
      /** Space.passthrough */
      passthrough?: string;
      /** Space.broadcasts */
      broadcasts?: components["schemas"]["Broadcast"][];
    };
    /** CreateBroadcastRequest */
    CreateBroadcastRequest: {
      /** CreateBroadcastRequest.live_stream_id */
      live_stream_id: string;
      /** CreateBroadcastRequest.passthrough */
      passthrough?: string;
      layout?: components["schemas"]["BroadcastLayout"];
      resolution?: components["schemas"]["BroadcastResolution"];
    };
    /** CreateSpaceRequest */
    CreateSpaceRequest: {
      /** CreateSpaceRequest.type */
      type?: "server";
      /** CreateSpaceRequest.passthrough */
      passthrough?: string;
      /** CreateSpaceRequest.broadcasts */
      broadcasts?: components["schemas"]["CreateBroadcastRequest"][];
    };
    /** SpaceResponse */
    SpaceResponse: {
      data: components["schemas"]["Space"];
    };
    /** BroadcastResponse */
    BroadcastResponse: {
      data: components["schemas"]["Broadcast"];
    };
    /** ListSpacesRequest */
    ListSpacesRequest: {
      /** ListSpacesRequest.limit */
      limit?: number;
      /** ListSpacesRequest.page */
      page?: number;
    };
    /** ListSpacesResponse */
    ListSpacesResponse: {
      /** ListSpacesResponse.data */
      data: components["schemas"]["Space"][];
    };
    /** StartSpaceBroadcastResponse */
    StartSpaceBroadcastResponse: {
      /** StartSpaceBroadcastResponse.data */
      data: { [key: string]: unknown };
    };
    /** StopSpaceBroadcastResponse */
    StopSpaceBroadcastResponse: {
      /** StopSpaceBroadcastResponse.data */
      data: { [key: string]: unknown };
    };
    /** TranscriptionVocabulary */
    TranscriptionVocabulary: {
      /** TranscriptionVocabulary.id */
      id: string;
      /** TranscriptionVocabulary.name */
      name: string;
      /** TranscriptionVocabulary.phrases */
      phrases: string[];
      /** TranscriptionVocabulary.created_at */
      created_at: string;
      /** TranscriptionVocabulary.updated_at */
      updated_at?: string;
    };
    /** UpsertTranscriptionVocabularyParams */
    UpsertTranscriptionVocabularyParams: {
      /** UpsertTranscriptionVocabularyParams.name */
      name: string;
      /** UpsertTranscriptionVocabularyParams.phrases */
      phrases: string[];
      /** UpsertTranscriptionVocabularyParams.passthrough */
      passthrough?: string;
    };
    /** ListTranscriptionVocabulariesResponse */
    ListTranscriptionVocabulariesResponse: {
      /** ListTranscriptionVocabulariesResponse.data */
      data: components["schemas"]["TranscriptionVocabulary"][];
    };
    /** TranscriptionVocabularyResponse */
    TranscriptionVocabularyResponse: {
      data: components["schemas"]["TranscriptionVocabulary"];
    };
    /**
     * Format: date-time
     * @description ISO date time
     * @example 2006-01-02T15:04:05.000Z
     */
   Date: Date;
    GetUsers: {
      /**
       * UserAttr.id
       * Format: uuid
       */
      id: string;
      /**
       * UserAttr.tenant_id
       * Format: uuid
       */
      tenant_id: string;
      /**
       * UserAttr.roleId
       * Format: uuid
       */
      roleId?: string | null;
      /**
       * UserAttr.groupId
       * Format: uuid
       */
      groupId?: string | null;
      /** UserAttr.first_name */
      first_name?: string | null;
      /** UserAttr.last_name */
      last_name?: string | null;
      /**
       * UserAttr.name
       * @description Virtual result, `${first_name} ${last_name}`
       */
      name?: string | null;
      /** UserAttr.email */
      email: string;
      /** UserAttr.title */
      title?: string | null;
      /** UserAttr.avatar */
      avatar?: string | null;
      /** UserAttr.status */
      status: string;
      /**
       * UserAttr.last_access
       * Format: date-time
       * @description ISO date time
       * @example 2006-01-02T15:04:05.000Z
       */
      deletedAt?: components["schemas"]["Date"] | null;
      /** UserAttr.last_page */
      last_page?: string | null;
      /** UserAttr.phone */
      phone?: string | null;
      created_at: components["schemas"]["Date"];
      updated_at: components["schemas"]["Date"];
    } & {
      tenant: components["schemas"]["TenantAttr"];
    } & {
      role?: components["schemas"]["RoleAttr"];
    };
  };
}

export interface operations {
  /**
   * Creates an upload location on our third party API video provider, Mux.
   * The returned entry will have a Mux upload id and a Mux upload url. The
   * Mux upload url is where you should upload the video file to.
   */
  createVideo: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * VideoAttr.videoId
             * Format: uuid
             */
            videoId: string;
            /** VideoAttr.externalUrl */
            externalUrl: string | null;
            /** VideoAttr.muxUploadId */
            muxUploadId: string | null;
            /** VideoAttr.muxUploadUrl */
            muxUploadUrl: string | null;
            /**
             * VideoAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * VideoAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * VideoCreateBiz.externalUrl
           * @description Whether video is publicly accessible.
           */
          externalUrl?: string;
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query: {
        limit: number;
        page: number;
        search?: string;
        order?: components["schemas"]["Order"];
        status?:
          | "deleted"
          | "active"
          | "inactive"
          | "suspended"
          | "invited"
          | "deactivated"
          | "invite_cancelled";
        excludeAdmins?: boolean;
        roleId?: string | null;
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            users: ({
              /**
               * UserAttr.id
               * Format: uuid
               */
              id: string;
              /**
               * UserAttr.tenant_id
               * Format: uuid
               */
              tenant_id: string;
              /**
               * UserAttr.roleId
               * Format: uuid
               */
              roleId?: string | null;
              /**
               * UserAttr.groupId
               * Format: uuid
               */
              groupId?: string | null;
              /** UserAttr.first_name */
              first_name?: string | null;
              /** UserAttr.last_name */
              last_name?: string | null;
              /**
               * UserAttr.name
               * @description Virtual result, `${first_name} ${last_name}`
               */
              name?: string | null;
              /** UserAttr.email */
              email: string;
              /** UserAttr.title */
              title?: string | null;
              /** UserAttr.avatar */
              avatar?: string | null;
              /** UserAttr.status */
              status: string;
              /**
               * UserAttr.last_access
               * Format: date-time
               * @description ISO date time
               * @example 2006-01-02T15:04:05.000Z
               */
              deletedAt?: components["schemas"]["Date"] | null;
              /** UserAttr.last_page */
              last_page?: string | null;
              /** UserAttr.phone */
              phone?: string | null;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            } & {
              tenant: components["schemas"]["TenantAttr"];
            } & {
              role?: components["schemas"]["RoleAttr"];
            })[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  inviteUsers: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** UserInviteBiz.firstName */
          firstName: string;
          /** UserInviteBiz.lastName */
          lastName: string;
          /** UserInviteBiz.email */
          email: string;
          /** UserInviteBiz.groupId */
          groupId: string;
          /** UserInviteBiz.roleId */
          roleId: string;
        }[];
      };
    };
  };
  getIntegrations: {
    parameters: {
      query: {
        page: number;
        limit: number;
        tenant_id?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
            data: {
              id: string;
              tenant_id: string;
              type: "FISERV";
              credentials: {
                url: string;
                client_id: string;
                client_secret: string;
              };
              enabled: boolean;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getTenants: {
    parameters: {
      query: {
        limit: number;
        page: number;
        search?: string;
        order?: components["schemas"]["Order"];
        includeOwners?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** TenantBizGet.data */
            data: (components["schemas"]["TenantAttrs"] &
              components["schemas"]["ModelTimestamp"] & {
                /** users, users.[] */
                users?: components["schemas"]["UserAttr"][];
              })[];
            /** TenantBizGet.pagination */
            pagination: {
              /** TenantBizGet.pagination.limit */
              limit: number;
              /** TenantBizGet.pagination.page */
              page: number;
              /** TenantBizGet.pagination.totalPages */
              totalPages: number;
              /** TenantBizGet.pagination.count */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Tenant not found */
            error: "Tenant not found";
          };
        };
      };
    };
  };
  createTenant: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            /** invalid payloads */
            error: "invalid payloads";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** Tenant already exist */
            error: "Tenant already exist";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** TenantCreateBiz.description */
          description?: string | null;
          /** TenantCreateBiz.icon */
          icon?: string | null;
          /** TenantCreateBiz.use_logo */
          use_logo?: boolean | null;
          /** TenantCreateBiz.settings */
          settings?: { [key: string]: unknown } | null;
          /** TenantCreateBiz.name */
          name: string;
          /** TenantCreateBiz.type */
          type: string;
          /** TenantCreateBiz.domain */
          domain: string;
          /** TenantCreateBiz.modules */
          modules: string;
          /** TenantCreateBiz.colors */
          colors: {
            /** TenantCreateBiz.colors.name */
            name: string;
            /** TenantCreateBiz.colors.primaryColor */
            primaryColor: string;
            /** TenantCreateBiz.colors.secondaryColor */
            secondaryColor: string;
          };
          /** TenantCreateBiz.logo */
          logo: string;
        } & ({
          owner: {
            first_name?: string;
            last_name?: string;
            email: string;
          };
        } & { [key: string]: unknown });
      };
    };
  };
  getTeams: {
    parameters: {
      query: {
        limit: number;
        page: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * TeamAttr.id
               * Format: uuid
               */
              id: string;
              /**
               * TeamAttr.tenantId
               * Format: uuid
               */
              tenantId: string;
              /** TeamAttr.name */
              name: string;
              /** TeamAttr.description */
              description?: string | null;
              /** TeamAttr.isActive */
              isActive: boolean;
              /**
               * TeamAttr.deletedAt
               * Format: date-time
               * @description ISO date time
               * @example 2006-01-02T15:04:05.000Z
               */
              deletedAt?: components["schemas"]["Date"] | null;
              createdAt: components["schemas"]["Date"];
              updatedAt: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createTeam: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** TeamBizCreate.members */
            members: ({
              /** teamId */
              teamId: string;
              /** userId */
              userId: string;
              /** isManager */
              isManager: boolean;
              /**
               * deletedAt
               * Format: date-time
               * @description ISO date time
               * @example 2006-01-02T15:04:05.000Z
               */
              deletedAt?: components["schemas"]["Date"] | null;
            } & components["schemas"]["Timestamp"])[];
            /** TeamBizCreate.id */
            id: string;
            /** TeamBizCreate.tenantId */
            tenantId: string;
            /** TeamBizCreate.name */
            name: string;
            /** TeamBizCreate.description */
            description?: string | null;
            /** TeamBizCreate.isActive */
            isActive: boolean;
            /**
             * TeamBizCreate.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** maximum of one manager is allowed */
            error: "maximum of one manager is allowed";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** TeamCreateBiz.name */
          name: string;
          /** TeamCreateBiz.description */
          description?: string | null;
          /** TeamCreateBiz.isActive */
          isActive?: boolean;
          /** TeamCreateBiz.members */
          members: {
            /** TeamCreateBiz.members.[].userId */
            userId: string;
            /** TeamCreateBiz.members.[].isManager */
            isManager?: boolean;
          }[];
        };
      };
    };
  };
  getStatus: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
    };
  };
  getStages: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** TenantDealStageAttrs.id */
            id?: string;
            /** TenantDealStageAttrs.name */
            name: string;
            /** TenantDealStageAttrs.description */
            description?: string;
            /** TenantDealStageAttrs.active */
            active?: boolean;
            /** TenantDealStageAttrs.position */
            position: number;
            /** TenantDealStageAttrs.probability */
            probability?: number;
            /** TenantDealStageAttrs.pipelineId */
            pipelineId: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createStages: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TenantDealStageAttr.id
             * Format: uuid
             */
            id?: string;
            /** TenantDealStageAttr.name */
            name: string;
            /** TenantDealStageAttr.description */
            description?: string;
            /** TenantDealStageAttr.active */
            active?: boolean;
            /** TenantDealStageAttr.position */
            position: number;
            /** TenantDealStageAttr.probability */
            probability?: number;
            /**
             * TenantDealStageAttr.pipelineId
             * Format: uuid
             */
            pipelineId: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** TenantDealStageCreateBiz.name */
          name: string;
          /** TenantDealStageCreateBiz.description */
          description?: string;
          /** TenantDealStageCreateBiz.position */
          position: number;
          /** TenantDealStageCreateBiz.active */
          active?: boolean;
          /** TenantDealStageCreateBiz.probability */
          probability?: number;
          /**
           * TenantDealStageCreateBiz.pipelineId
           * Format: uuid
           */
          pipelineId: string;
        }[];
      };
    };
  };
  getSearches: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** SearchAttr.id */
            id?: string;
            /** SearchAttr.type */
            type: string;
            /** SearchAttr.name */
            name: string;
            /** SearchAttr.value */
            value: string;
            /** SearchAttr.userId */
            userId: string;
            /** SearchAttr.tenantId */
            tenantId: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createSearch: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** SearchAttr.id */
            id?: string;
            /** SearchAttr.type */
            type: string;
            /** SearchAttr.name */
            name: string;
            /** SearchAttr.value */
            value: string;
            /** SearchAttr.userId */
            userId: string;
            /** SearchAttr.tenantId */
            tenantId: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** SearchCreateBiz.name */
          name: string;
          /** SearchCreateBiz.type */
          type: string;
          /** SearchCreateBiz.value */
          value: string;
        };
      };
    };
  };
  getRoles: {
    parameters: {
      query: {
        limit: number;
        page: number;
        order?: components["schemas"]["Order"];
        search?: string;
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * RoleAttr.id
               * Format: uuid
               */
              id?: string;
              /**
               * RoleAttr.tenant_id
               * Format: uuid
               */
              tenant_id: string;
              /** RoleAttr.name */
              name: string;
              /** RoleAttr.icon */
              icon?: string;
              /** RoleAttr.description */
              description?: string;
              /** RoleAttr.ip_access */
              ip_access?: string;
              /** RoleAttr.enforce_tfa */
              enforce_tfa: boolean;
              /** RoleAttr.admin_access */
              admin_access: boolean;
              /** RoleAttr.owner_access */
              owner_access: boolean;
              /**
               * RoleAttr.app_access
               * @description Used for application users. If the role has associated permissions,
               * those permissions will superseded default app_access permissions.
               */
              app_access: boolean;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createRole: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * RoleAttr.id
             * Format: uuid
             */
            id?: string;
            /**
             * RoleAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** RoleAttr.name */
            name: string;
            /** RoleAttr.icon */
            icon?: string;
            /** RoleAttr.description */
            description?: string;
            /** RoleAttr.ip_access */
            ip_access?: string;
            /** RoleAttr.enforce_tfa */
            enforce_tfa: boolean;
            /** RoleAttr.admin_access */
            admin_access: boolean;
            /** RoleAttr.owner_access */
            owner_access: boolean;
            /**
             * RoleAttr.app_access
             * @description Used for application users. If the role has associated permissions,
             * those permissions will superseded default app_access permissions.
             */
            app_access: boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** RoleCreateBiz.name */
          name: string;
          /** RoleCreateBiz.description */
          description?: string;
          /** RoleCreateBiz.admin_access */
          admin_access: boolean;
          /** RoleCreateBiz.owner_access */
          owner_access: boolean;
        };
      };
    };
  };
  searchContacts: {
    parameters: {
      query: {
        name?: string;
        employer?: string;
        keyword?: string;
        location?: string;
        type?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: unknown } & {
            data: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  searchQuery: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: unknown } & {
            data: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          query?: { [key: string]: unknown };
        };
      };
    };
  };
  contacts: {
    parameters: {
      query: {
        name?: string;
        first_name?: string;
        last_name?: string;
        employer?: string;
        title?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: unknown } & {
            data: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  companies: {
    parameters: {
      query: {
        name: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: unknown } & {
            data: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createPipelineTeam: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** PipelineTeamAttr.teamId */
            teamId: string;
            /** PipelineTeamAttr.pipelineId */
            pipelineId: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** PipelineTeamCreateBiz.teamId */
          teamId: string;
          /** PipelineTeamCreateBiz.pipelineId */
          pipelineId: string;
        }[];
      };
    };
  };
  getPipelines: {
    parameters: {
      query: {
        limit: number;
        page: number;
        order?: components["schemas"]["Order"];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /** PipelineAttr.id */
              id: string;
              /** PipelineAttr.name */
              name: string;
              /** PipelineAttr.description */
              description?: string;
              /** PipelineAttr.isDefault */
              isDefault: boolean;
              /** PipelineAttr.global */
              global: boolean;
              /** PipelineAttr.tenantId */
              tenantId: string;
              /** PipelineAttr.createdById */
              createdById: string;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createPipeline: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** PipelineAttr.id */
            id: string;
            /** PipelineAttr.name */
            name: string;
            /** PipelineAttr.description */
            description?: string;
            /** PipelineAttr.isDefault */
            isDefault: boolean;
            /** PipelineAttr.global */
            global: boolean;
            /** PipelineAttr.tenantId */
            tenantId: string;
            /** PipelineAttr.createdById */
            createdById: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** PipelineCreateBiz.name */
          name: string;
          /** PipelineCreateBiz.description */
          description?: string;
          /** PipelineCreateBiz.global */
          global?: boolean;
        };
      };
    };
  };
  getAssociatedOrganizationOwners: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: { [key: string]: unknown }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  import: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "File not provided" | "Invalid mime type";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": { [key: string]: unknown };
        "application/json": {};
      };
    };
  };
  /** Get organizations' field list */
  getOrganizationsFields: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              id: string;
              created_by: string;
              value_type: "number" | "string" | "boolean" | "date" | "object";
              key: string;
              field_type:
                | "CHAR"
                | "TEXT"
                | "NUMBER"
                | "DATE"
                | "TIME"
                | "CURRENCY"
                | "EMAIL"
                | "URL"
                | "PHONE"
                | "CHECKBOX";
              order: number;
              /** @description Total organizations that have used this field */
              total_organizations: number;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Upsert a(n) organizations field */
  upsertOrganizationsField: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            value_type: "number" | "string" | "boolean" | "date" | "object";
            key: string;
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "EMAIL"
              | "URL"
              | "PHONE"
              | "CHECKBOX";
            order: number;
          };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": {
            /** Unable to update field type when its in use */
            error: "Unable to update field type when its in use";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          key: string;
          field_type:
            | "CHAR"
            | "TEXT"
            | "NUMBER"
            | "DATE"
            | "TIME"
            | "CURRENCY"
            | "EMAIL"
            | "URL"
            | "PHONE"
            | "CHECKBOX";
          order: number;
        };
      };
    };
  };
  getRelations: {
    parameters: {
      query: {
        ids: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            relations: {
              contacts: number;
              deals: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getOrganizations: {
    parameters: {
      query: {
        page: number;
        limit: number;
        search?: string;
        recent_activity?: boolean;
        order?: unknown;
        is_customer: boolean;
        cif: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
            organizations: {
              id?: string;
              name?: string | null;
              modified_user_id?: string;
              created_by?: string;
              deleted?: boolean;
              assigned_user_id?: string;
              industry?: string;
              annual_revenue?: string;
              annual_revenue_merchant?: string;
              annual_revenue_treasury?: string;
              annual_revenue_business_card?: string;
              total_revenue?: string;
              phone_fax?: string;
              billing_address_street?: string;
              billing_address_city?: string;
              billing_address_state?: string;
              billing_address_postalcode?: string;
              billing_address_country?: string;
              rating?: string;
              phone_office?: string;
              phone_alternate?: string;
              website?: string;
              ownership?: string;
              employees?: number;
              ticker_symbol?: string;
              address_street?: string;
              address_suite?: string;
              address_city?: string;
              address_state?: string;
              address_postalcode?: string;
              address_country?: string;
              sic_code?: string;
              status?: string;
              naics_code?: string;
              cif?: string;
              branch?: string;
              avatar?: string;
              owners?: {
                user_id: string;
                organization_id: string;
                user: { [key: string]: unknown };
              }[];
              total_contacts?: number;
              total_open_deals?: number;
              total_closed_deals?: number;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  createOrganization: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id?: string;
            name?: string | null;
            modified_user_id?: string;
            created_by?: string;
            deleted?: boolean;
            assigned_user_id?: string;
            industry?: string;
            annual_revenue?: string;
            annual_revenue_merchant?: string;
            annual_revenue_treasury?: string;
            annual_revenue_business_card?: string;
            total_revenue?: string;
            phone_fax?: string;
            billing_address_street?: string;
            billing_address_city?: string;
            billing_address_state?: string;
            billing_address_postalcode?: string;
            billing_address_country?: string;
            rating?: string;
            phone_office?: string;
            phone_alternate?: string;
            website?: string;
            ownership?: string;
            employees?: number;
            ticker_symbol?: string;
            address_street?: string;
            address_suite?: string;
            address_city?: string;
            address_state?: string;
            address_postalcode?: string;
            address_country?: string;
            sic_code?: string;
            status?: string;
            naics_code?: string;
            cif?: string;
            branch?: string;
            avatar?: string;
            owners?: {
              user_id: string;
              organization_id: string;
              user: { [key: string]: unknown };
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          assigned_user_id?: string;
        } & { [key: string]: unknown };
      };
    };
  };
  deleteOrganizations: {
    parameters: {
      query: {
        ids: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getNotificationSettings: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  addNotificationSettings: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          settings: { [key: string]: unknown };
        } & { [key: string]: unknown };
      };
    };
  };
  sendReminder: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          date: string;
        } & { [key: string]: unknown };
      };
    };
  };
  getTLDRArticles: {
    parameters: {
      query: {
        page: number;
        limit: number;
        search?: string;
        order?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: unknown } & {
            data: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createTLDRArticle: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ArticleAttr.id
             * Format: string / md5 hash
             */
            id: string;
            /**
             * ArticleAttr.tenant_id
             * Format: uuid
             */
            tenant_id?: string;
            /**
             * ArticleAttr.user_id
             * Format: uuid
             */
            user_id?: string;
            /** ArticleAttr.title */
            title: string | null;
            /** ArticleAttr.blurb */
            blurb?: string;
            /** ArticleAttr.author */
            author?: string;
            /** ArticleAttr.body */
            body?: string;
            published: components["schemas"]["Date"];
            /** ArticleAttr.url */
            url: string;
            /** ArticleAttr.image */
            image?: string;
            /** ArticleAttr.source */
            source?: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * ArticleModifyBiz.tenant_id
           * Format: uuid
           */
          tenant_id?: string;
          /**
           * ArticleModifyBiz.user_id
           * Format: uuid
           */
          user_id?: string;
          /** ArticleModifyBiz.title */
          title?: string | null;
          /** ArticleModifyBiz.blurb */
          blurb?: string;
          /** ArticleModifyBiz.author */
          author?: string;
          /** ArticleModifyBiz.body */
          body?: string;
          published: components["schemas"]["Date"];
          /** ArticleModifyBiz.url */
          url: string;
          /** ArticleModifyBiz.image */
          image?: string;
          /** ArticleModifyBiz.source */
          source?: string;
        };
      };
    };
  };
  getNews: {
    parameters: {
      query: {
        name?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": { [key: string]: unknown } & {
            data: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  naicsUpload: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error:
              | "File not provided"
              | "Type not provided"
              | "Report date not provided";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            /** Unauthorized to upload */
            error: "Unauthorized to upload";
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          type?: "sp";
          report_date?: string;
        };
      };
    };
  };
  getNAICS: {
    parameters: {
      query: {
        limit: number;
        page: number;
        search?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /** NaicsAttr.code */
              code: string;
              /** NaicsAttr.title */
              title: string;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getGoogleAddress: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description address from google */
            address?: {
              address?: string;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getRelatedLessons: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonAttr.id */
            id: number;
            /** LessonAttr.title */
            title: string;
            /** LessonAttr.content */
            content?: string | null;
            /** LessonAttr.category_id */
            category_id?: number | null;
            /** LessonAttr.max_points */
            max_points?: number | null;
            /** LessonAttr.max_attempts */
            max_attempts?: number | null;
            /** LessonAttr.documents */
            documents?: string | null;
            /** LessonAttr.duration */
            duration?: number | null;
            /** LessonAttr.isPublic */
            isPublic: boolean;
            /** LessonAttr.tags */
            tags?: string | null;
            /** LessonAttr.icon */
            icon?: string | null;
            /** LessonAttr.status */
            status?: string;
            /**
             * LessonAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        search?: string;
        status?:
          | components["schemas"]["LessonQueryStatusQuery"]
          | components["schemas"]["LessonQueryStatusQuery"][];
        favorites?: components["schemas"]["AssociationRestriction"];
        progress?: components["schemas"]["AssociationRestriction"];
        order?: components["schemas"]["Order"][];
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /** LessonAttr.id */
              id: number;
              /** LessonAttr.title */
              title: string;
              /** LessonAttr.content */
              content?: string | null;
              /** LessonAttr.category_id */
              category_id?: number | null;
              /** LessonAttr.max_points */
              max_points?: number | null;
              /** LessonAttr.max_attempts */
              max_attempts?: number | null;
              /** LessonAttr.documents */
              documents?: string | null;
              /** LessonAttr.duration */
              duration?: number | null;
              /** LessonAttr.isPublic */
              isPublic: boolean;
              /** LessonAttr.tags */
              tags?: string | null;
              /** LessonAttr.icon */
              icon?: string | null;
              /** LessonAttr.status */
              status?: string;
              /**
               * LessonAttr.tenant_id
               * Format: uuid
               */
              tenant_id: string;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  createLesson: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonAttr.id */
            id: number;
            /** LessonAttr.title */
            title: string;
            /** LessonAttr.content */
            content?: string | null;
            /** LessonAttr.category_id */
            category_id?: number | null;
            /** LessonAttr.max_points */
            max_points?: number | null;
            /** LessonAttr.max_attempts */
            max_attempts?: number | null;
            /** LessonAttr.documents */
            documents?: string | null;
            /** LessonAttr.duration */
            duration?: number | null;
            /** LessonAttr.isPublic */
            isPublic: boolean;
            /** LessonAttr.tags */
            tags?: string | null;
            /** LessonAttr.icon */
            icon?: string | null;
            /** LessonAttr.status */
            status?: string;
            /**
             * LessonAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** LessonCreateBiz.icon */
          icon?: string | null;
          /** LessonCreateBiz.title */
          title: string;
          /** LessonCreateBiz.status */
          status?: string;
          /** LessonCreateBiz.isPublic */
          isPublic?: boolean;
          /** LessonCreateBiz.category_id */
          category_id?: number | null;
          /** LessonCreateBiz.content */
          content?: string | null;
          /** LessonCreateBiz.max_points */
          max_points?: number | null;
          /** LessonCreateBiz.max_attempts */
          max_attempts?: number | null;
          /** LessonCreateBiz.documents */
          documents?: string | null;
          /** LessonCreateBiz.duration */
          duration?: number | null;
          /** LessonCreateBiz.tags */
          tags?: string | null;
        };
      };
    };
  };
  getAllLabels: {
    parameters: {
      query: {
        type: "contact" | "organization";
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * LabelAttr.id
             * Format: uuid
             */
            id: string;
            /** LabelAttr.name */
            name: string;
            /** LabelAttr.color */
            color: string;
            /** LabelAttr.type */
            type?: ("contact" | "organization") | null;
            /**
             * LabelAttr.assigned_user_id
             * Format: uuid
             */
            assigned_user_id?: string | null;
            /**
             * LabelAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createLabel: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * LabelAttr.id
             * Format: uuid
             */
            id: string;
            /** LabelAttr.name */
            name: string;
            /** LabelAttr.color */
            color: string;
            /** LabelAttr.type */
            type?: ("contact" | "organization") | null;
            /**
             * LabelAttr.assigned_user_id
             * Format: uuid
             */
            assigned_user_id?: string | null;
            /**
             * LabelAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** Label already exists */
            error: "Label already exists";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** LabelCreateBiz.name */
          name: string;
          /** LabelCreateBiz.type */
          type?: ("contact" | "organization") | null;
          /** LabelCreateBiz.color */
          color: string;
        };
      };
    };
  };
  getGroupHierarchy: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * GroupAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * GroupAttr.parent_id
             * Format: uuid
             */
            parent_id?: string | null;
            /** GroupAttr.name */
            name: string;
            /** GroupAttr.has_sibling_access */
            has_sibling_access: boolean;
            /** GroupAttr.description */
            description?: string | null;
            /** GroupAttr.tenant_id */
            tenant_id: string;
            /**
             * GroupAttr.deleted_on
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deleted_on?: components["schemas"]["Date"] | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getGroups: {
    parameters: {
      query: {
        limit: number;
        page: number;
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * GroupAttr.id
               * Format: uuid
               */
              id: string;
              /**
               * GroupAttr.parent_id
               * Format: uuid
               */
              parent_id?: string | null;
              /** GroupAttr.name */
              name: string;
              /** GroupAttr.has_sibling_access */
              has_sibling_access: boolean;
              /** GroupAttr.description */
              description?: string | null;
              /** GroupAttr.tenant_id */
              tenant_id: string;
              /**
               * GroupAttr.deleted_on
               * Format: date-time
               * @description ISO date time
               * @example 2006-01-02T15:04:05.000Z
               */
              deleted_on?: components["schemas"]["Date"] | null;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createGroup: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * GroupAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * GroupAttr.parent_id
             * Format: uuid
             */
            parent_id?: string | null;
            /** GroupAttr.name */
            name: string;
            /** GroupAttr.has_sibling_access */
            has_sibling_access: boolean;
            /** GroupAttr.description */
            description?: string | null;
            /** GroupAttr.tenant_id */
            tenant_id: string;
            /**
             * GroupAttr.deleted_on
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deleted_on?: components["schemas"]["Date"] | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * GroupCreateBiz.parent_id
           * Format: uuid
           * @description There can only be 1 root group per tenant. A root group is defined as a
           * group with a "null" parent_id.
           */
          parent_id?: string | null;
          /** GroupCreateBiz.name */
          name: string;
          /** GroupCreateBiz.has_sibling_access */
          has_sibling_access?: boolean;
          /** GroupCreateBiz.description */
          description?: string | null;
        };
      };
    };
  };
  uploadFile: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": { [key: string]: unknown };
        "application/json": {};
      };
    };
  };
  /** set array of fields preference. */
  setFieldPreference: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          type: components["schemas"]["FieldType"];
          /** SetFieldPreference.fieldIds */
          fieldIds: string[];
        };
      };
    };
  };
  getFieldOptions: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            name: string;
            description: string;
            /** FieldFieldType */
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "URL"
              | "CHECKBOX"
              | "EMAIL"
              | "PHONE";
            value_type: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Creates a default fields for the tenant you are logged in for. */
  createDefaultFields: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** FieldAttr.id */
            id?: string;
            /** FieldAttr.key */
            key: string;
            /** FieldAttr.field_type */
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "URL"
              | "CHECKBOX"
              | "EMAIL"
              | "PHONE";
            /** FieldAttr.value_type */
            value_type: "string" | "number" | "boolean" | "object" | "date";
            /** FieldAttr.order */
            order?: number;
            /** FieldAttr.type */
            type:
              | "contact"
              | "deal"
              | "organization"
              | "product"
              | "task"
              | "call"
              | "event";
            /** FieldAttr.tenant_id */
            tenant_id?: string;
            /** FieldAttr.mandatory */
            mandatory?: boolean;
            /** FieldAttr.usedField */
            usedField?: boolean;
            /** FieldAttr.isFixed */
            isFixed?: boolean;
            /** FieldAttr.columnName */
            columnName: string;
            /** FieldAttr.isCustom */
            isCustom?: boolean;
            /** FieldAttr.section */
            section: string;
            /** FieldAttr.preferred */
            preferred?: boolean;
            /** FieldAttr.created_by */
            created_by: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** FieldDefaultCreateBiz.type */
          type?:
            | "contact"
            | "deal"
            | "organization"
            | "product"
            | "task"
            | "call"
            | "event";
        };
      };
    };
  };
  getFields: {
    parameters: {
      query: {
        type:
          | "contact"
          | "deal"
          | "organization"
          | "product"
          | "task"
          | "call"
          | "event";
        preferred?: boolean;
        usedField?: boolean;
        order?: components["schemas"]["Order"];
        limit: number;
        page: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /** FieldAttr.id */
              id?: string;
              /** FieldAttr.key */
              key: string;
              /** FieldAttr.field_type */
              field_type:
                | "CHAR"
                | "TEXT"
                | "NUMBER"
                | "DATE"
                | "TIME"
                | "CURRENCY"
                | "URL"
                | "CHECKBOX"
                | "EMAIL"
                | "PHONE";
              /** FieldAttr.value_type */
              value_type: "string" | "number" | "boolean" | "object" | "date";
              /** FieldAttr.order */
              order?: number;
              /** FieldAttr.type */
              type:
                | "contact"
                | "deal"
                | "organization"
                | "product"
                | "task"
                | "call"
                | "event";
              /** FieldAttr.tenant_id */
              tenant_id?: string;
              /** FieldAttr.mandatory */
              mandatory?: boolean;
              /** FieldAttr.usedField */
              usedField?: boolean;
              /** FieldAttr.isFixed */
              isFixed?: boolean;
              /** FieldAttr.columnName */
              columnName: string;
              /** FieldAttr.isCustom */
              isCustom?: boolean;
              /** FieldAttr.section */
              section: string;
              /** FieldAttr.preferred */
              preferred?: boolean;
              /** FieldAttr.created_by */
              created_by: string;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createField: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** FieldAttr.id */
            id?: string;
            /** FieldAttr.key */
            key: string;
            /** FieldAttr.field_type */
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "URL"
              | "CHECKBOX"
              | "EMAIL"
              | "PHONE";
            /** FieldAttr.value_type */
            value_type: "string" | "number" | "boolean" | "object" | "date";
            /** FieldAttr.order */
            order?: number;
            /** FieldAttr.type */
            type:
              | "contact"
              | "deal"
              | "organization"
              | "product"
              | "task"
              | "call"
              | "event";
            /** FieldAttr.tenant_id */
            tenant_id?: string;
            /** FieldAttr.mandatory */
            mandatory?: boolean;
            /** FieldAttr.usedField */
            usedField?: boolean;
            /** FieldAttr.isFixed */
            isFixed?: boolean;
            /** FieldAttr.columnName */
            columnName: string;
            /** FieldAttr.isCustom */
            isCustom?: boolean;
            /** FieldAttr.section */
            section: string;
            /** FieldAttr.preferred */
            preferred?: boolean;
            /** FieldAttr.created_by */
            created_by: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** FieldCreateBiz.type */
          type:
            | "contact"
            | "deal"
            | "organization"
            | "product"
            | "task"
            | "call"
            | "event";
          /** FieldCreateBiz.created_by */
          created_by: string;
          /** FieldCreateBiz.tenant_id */
          tenant_id?: string;
          /** FieldCreateBiz.order */
          order?: number;
          /** FieldCreateBiz.key */
          key: string;
          /** FieldCreateBiz.field_type */
          field_type:
            | "CHAR"
            | "TEXT"
            | "NUMBER"
            | "DATE"
            | "TIME"
            | "CURRENCY"
            | "URL"
            | "CHECKBOX"
            | "EMAIL"
            | "PHONE";
          /** FieldCreateBiz.value_type */
          value_type: "string" | "number" | "boolean" | "object" | "date";
          /** FieldCreateBiz.mandatory */
          mandatory?: boolean;
          /** FieldCreateBiz.usedField */
          usedField?: boolean;
          /** FieldCreateBiz.isFixed */
          isFixed?: boolean;
          /** FieldCreateBiz.columnName */
          columnName: string;
          /** FieldCreateBiz.isCustom */
          isCustom?: boolean;
          /** FieldCreateBiz.section */
          section: string;
          /** FieldCreateBiz.preferred */
          preferred?: boolean;
        };
      };
    };
  };
  getFeedFile: {
    parameters: {
      query: {
        page: number;
        limit: number;
        contact_id?: string;
        deal_id?: string;
        organization_id?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  getAssociatedDealOwners: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: { [key: string]: unknown }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createDefaultDashboards: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * DashboardAttr.id
             * Format: uuid
             */
            id: string;
            /** DashboardAttr.name */
            name: string;
            /** DashboardAttr.type */
            type: "dashboard" | "insight";
            /** DashboardAttr.enabled */
            enabled: boolean;
            /**
             * DashboardAttr.organizationId
             * Format: uuid
             */
            organizationId?: string | null;
            /**
             * DashboardAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * DashboardAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** DashboardDefaultBiz.types */
          type: "insight";
          /** DashboardDefaultBiz.organizationId */
          organizationId: string;
        } |
          {
            /** DashboardDefaultBiz.type */
            type: "dashboard";
          }
      };
    };
  };
  getDashboards: {
    parameters: {
      query: {
        page: number;
        limit: number;
        type?: "dashboard" | "insight";
        organizationId?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * DashboardAttr.id
               * Format: uuid
               */
              id: string;
              /** DashboardAttr.name */
              name: string;
              /** DashboardAttr.type */
              type: "dashboard" | "insight";
              /** DashboardAttr.enabled */
              enabled: boolean;
              /**
               * DashboardAttr.organizationId
               * Format: uuid
               */
              organizationId?: string | null;
              /**
               * DashboardAttr.createdById
               * Format: uuid
               */
              createdById: string;
              /**
               * DashboardAttr.tenantId
               * Format: uuid
               */
              tenantId: string;
              createdAt: components["schemas"]["Date"];
              updatedAt: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  createDashboard: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * DashboardAttr.id
             * Format: uuid
             */
            id: string;
            /** DashboardAttr.name */
            name: string;
            /** DashboardAttr.type */
            type: "dashboard" | "insight";
            /** DashboardAttr.enabled */
            enabled: boolean;
            /**
             * DashboardAttr.organizationId
             * Format: uuid
             */
            organizationId?: string | null;
            /**
             * DashboardAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * DashboardAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** DashboardCreateBiz.name */
          name: string;
          /** DashboardCreateBiz.type */
          type: "dashboard" | "insight";
          /**
           * DashboardCreateBiz.organizationId
           * Format: uuid
           */
          organizationId?: string | null;
          /** DashboardCreateBiz.enabled */
          enabled?: boolean;
        };
      };
    };
  };
  getCourses: {
    parameters: {
      query: {
        limit: number;
        page: number;
        favorites?: components["schemas"]["AssociationRestriction"];
        lessonId?: number | number[];
        lessons?: components["schemas"]["AssociationRestriction"];
        order?: components["schemas"]["Order"][];
        progress?: components["schemas"]["AssociationRestriction"];
        search?: string;
        status?:
          | components["schemas"]["CourseQueryStatusQuery"]
          | components["schemas"]["CourseQueryStatusQuery"][];
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** CourseBizGet.data */
            data: (components["schemas"]["CourseAttrs"] &
              components["schemas"]["ModelTimestamp"] & {
                /** totalLessons */
                totalLessons: number;
              } & {
                badge?: components["schemas"]["BadgeAttr"];
                category?: components["schemas"]["CategoryAttr"];
                /** preference, preference.[] */
                preference?: components["schemas"]["CoursePreferenceAttr"][];
                /** progress, progress.[] */
                progress?: components["schemas"]["CourseProgressAttr"][];
                quiz?: components["schemas"]["QuizAttr"];
              })[];
            /** CourseBizGet.pagination */
            pagination: {
              /** CourseBizGet.pagination.limit */
              limit: number;
              /** CourseBizGet.pagination.page */
              page: number;
              /** CourseBizGet.pagination.totalPages */
              totalPages: number;
              /** CourseBizGet.pagination.count */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createCourse: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * CourseAttr.id
             * Format: uuid
             */
            id: string;
            /** CourseAttr.name */
            name?: string | null;
            /** CourseAttr.description */
            description?: string | null;
            /** CourseAttr.status */
            status?: string;
            /** CourseAttr.is_learning_path */
            is_learning_path?: boolean;
            /** CourseAttr.isPublic */
            isPublic: boolean;
            /** CourseAttr.deleted */
            deleted?: boolean;
            /** CourseAttr.category_id */
            category_id?: number | null;
            /** CourseAttr.badge_id */
            badge_id?: string | null;
            /** CourseAttr.tenant_id */
            tenant_id: string;
            /** CourseAttr.categoryIds */
            categoryIds?: number[];
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** CourseCreateBiz.name */
          name?: string | null;
          /** CourseCreateBiz.description */
          description?: string | null;
          /** CourseCreateBiz.deleted */
          deleted?: boolean;
          /** CourseCreateBiz.status */
          status?: string;
          /** CourseCreateBiz.isPublic */
          isPublic?: boolean;
          /** CourseCreateBiz.is_learning_path */
          is_learning_path?: boolean;
          /** CourseCreateBiz.category_id */
          category_id?: number | null;
          /** CourseCreateBiz.badge_id */
          badge_id?: string | null;
          /** CourseCreateBiz.categoryIds */
          categoryIds?: number[];
        };
      };
    };
  };
  getAssociatedContactOwners: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: { [key: string]: unknown }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  contactImport: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** ContactBizBulkImport.totalItems */
            totalItems: number;
            /** ContactBizBulkImport.itemsFailed */
            itemsFailed: {
              /** ContactBizBulkImport.itemsFailed.[].first_name */
              first_name?: string;
              /** ContactBizBulkImport.itemsFailed.[].last_name */
              last_name?: string;
              /** ContactBizBulkImport.itemsFailed.[].email_work */
              email_work?: string;
              /** ContactBizBulkImport.itemsFailed.[].assigned_user_id */
              assigned_user_id?: string;
              /** ContactBizBulkImport.itemsFailed.[].modified_user_id */
              modified_user_id?: string;
              /** ContactBizBulkImport.itemsFailed.[].created_by */
              created_by?: string;
              /** ContactBizBulkImport.itemsFailed.[].organization_id */
              organization_id?: string | null;
              /** ContactBizBulkImport.itemsFailed.[].tenant_id */
              tenant_id?: string;
              /** ContactBizBulkImport.itemsFailed.[].title */
              title?: string;
              /** ContactBizBulkImport.itemsFailed.[].email_other */
              email_other?: string;
              /** ContactBizBulkImport.itemsFailed.[].phone_home */
              phone_home?: string;
              /** ContactBizBulkImport.itemsFailed.[].phone_mobile */
              phone_mobile?: string;
              /** ContactBizBulkImport.itemsFailed.[].phone_work */
              phone_work?: string;
              /** ContactBizBulkImport.itemsFailed.[].phone_other */
              phone_other?: string;
              /** ContactBizBulkImport.itemsFailed.[].external_id */
              external_id?: string;
            }[];
            /** ContactBizBulkImport.contacts */
            contacts: components["schemas"]["ContactAttr"][];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "File not provided" | "Invalid mime type";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
          updateExisting?: boolean;
        };
        "application/json": {
          update_existing?: boolean;
          contacts: {
            /** ContactImportBiz.title */
            title?: string;
            /** ContactImportBiz.first_name */
            first_name: string;
            /** ContactImportBiz.last_name */
            last_name: string;
            /** ContactImportBiz.email_work */
            email_work: string;
            /** ContactImportBiz.email_other */
            email_other?: string;
            /** ContactImportBiz.phone_home */
            phone_home?: string;
            /** ContactImportBiz.phone_mobile */
            phone_mobile?: string;
            /** ContactImportBiz.phone_work */
            phone_work?: string;
            /** ContactImportBiz.phone_other */
            phone_other?: string;
            /** ContactImportBiz.external_id */
            external_id?: string;
            /** ContactImportBiz.organization */
            organization?: {
              /** ContactImportBiz.organization.name */
              name: string;
              /** ContactImportBiz.organization.industry */
              industry?: string;
              /** ContactImportBiz.organization.total_revenue */
              total_revenue?: string;
              /** ContactImportBiz.organization.employees */
              employees?: number;
              /** ContactImportBiz.organization.address_street */
              address_street?: string;
              /** ContactImportBiz.organization.address_city */
              address_city?: string;
              /** ContactImportBiz.organization.address_state */
              address_state?: string;
              /** ContactImportBiz.organization.address_postalcode */
              address_postalcode?: string;
              /** ContactImportBiz.organization.address_country */
              address_country?: string;
              /** ContactImportBiz.organization.naics_code */
              naics_code?: string;
              /** ContactImportBiz.organization.branch */
              branch?: string;
            };
          }[];
        };
      };
    };
  };
  /** Get contacts' field list */
  getContactsFields: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              id: string;
              created_by: string;
              value_type: "number" | "string" | "boolean" | "date" | "object";
              key: string;
              field_type:
                | "CHAR"
                | "TEXT"
                | "NUMBER"
                | "DATE"
                | "TIME"
                | "CURRENCY"
                | "EMAIL"
                | "URL"
                | "PHONE"
                | "CHECKBOX";
              order: number;
              /** @description Total contacts that have used this field */
              total_contacts: number;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Upsert a(n) contacts field */
  upsertContactsField: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            value_type: "number" | "string" | "boolean" | "date" | "object";
            key: string;
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "EMAIL"
              | "URL"
              | "PHONE"
              | "CHECKBOX";
            order: number;
          };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": {
            /** Unable to update field type when its in use */
            error: "Unable to update field type when its in use";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          key: string;
          field_type:
            | "CHAR"
            | "TEXT"
            | "NUMBER"
            | "DATE"
            | "TIME"
            | "CURRENCY"
            | "EMAIL"
            | "URL"
            | "PHONE"
            | "CHECKBOX";
          order: number;
        };
      };
    };
  };
  getCategories: {
    parameters: {
      query: {
        limit: number;
        page: number;
        extraData?: string[];
        order?: components["schemas"]["Order"];
        search?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** CategoryBizGet.data */
            data: ({
              /** id */
              id: number;
              /** tenant_id */
              tenant_id: string;
              /** title */
              title?: string | null;
              /** description */
              description?: string | null;
              /** status */
              status?: string | null;
              /** logo */
              logo?: string | null;
              /** icon */
              icon?: string | null;
              /** position */
              position?: number | null;
            } & components["schemas"]["ModelTimestamp"] & {
                /** isPublic */
                isPublic: boolean;
                /** totalCourses */
                totalCourses: number;
                /** totalLessons */
                totalLessons: number;
              })[];
            /** CategoryBizGet.pagination */
            pagination: {
              /** CategoryBizGet.pagination.limit */
              limit: number;
              /** CategoryBizGet.pagination.page */
              page: number;
              /** CategoryBizGet.pagination.totalPages */
              totalPages: number;
              /** CategoryBizGet.pagination.count */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  createCategory: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** CategoryAttr.id */
            id: number;
            /**
             * CategoryAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** CategoryAttr.title */
            title?: string | null;
            /** CategoryAttr.description */
            description?: string | null;
            /** CategoryAttr.status */
            status?: string | null;
            /** CategoryAttr.logo */
            logo?: string | null;
            /** CategoryAttr.icon */
            icon?: string | null;
            /** CategoryAttr.position */
            position?: number | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** CategoryCreateBiz.title */
          title: string;
          /** CategoryCreateBiz.logo */
          logo?: string | null;
          /** CategoryCreateBiz.icon */
          icon?: string | null;
          /** CategoryCreateBiz.description */
          description?: string | null;
        };
      };
    };
  };
  getBadges: {
    parameters: {
      query: {
        page: number;
        limit: number;
        search?: string;
        order?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * BadgeAttr.id
               * Format: uuid
               */
              id: string;
              /**
               * BadgeAttr.tenant_id
               * Format: uuid
               */
              tenant_id: string;
              /** BadgeAttr.name */
              name?: string | null;
              /** BadgeAttr.description */
              description?: string | null;
              /** BadgeAttr.status */
              status?: string | null;
              /** BadgeAttr.badge_url */
              badge_url?: string | null;
              /** BadgeAttr.deleted */
              deleted: boolean;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createBadge: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * BadgeAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * BadgeAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** BadgeAttr.name */
            name?: string | null;
            /** BadgeAttr.description */
            description?: string | null;
            /** BadgeAttr.status */
            status?: string | null;
            /** BadgeAttr.badge_url */
            badge_url?: string | null;
            /** BadgeAttr.deleted */
            deleted: boolean;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** BadgeModifyBiz.name */
          name?: string | null;
          /** BadgeModifyBiz.description */
          description?: string | null;
          /** BadgeModifyBiz.status */
          status?: string | null;
          /** BadgeModifyBiz.badge_url */
          badge_url?: string | null;
        };
      };
    };
  };
  /** Introspects a given token to check its contents and validity */
  tokenIntrospection: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            scope: "guest";
            email: string;
            contact_id: string;
            shared_by: {
              id: string;
              email: string;
              first_name?: string | null;
              last_name?: string | null;
            };
            resource_access: {
              organization: {
                id: string;
              }[];
            };
          };
        };
      };
      /** Invalid token provided */
      400: {
        content: {
          "application/json": {
            /** Invalid token information */
            error: "Invalid token information";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          token: string;
        };
      };
    };
  };
  resetPassword: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          password: string;
        };
      };
    };
  };
  changePassword: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** User not found */
            error: "User not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** UserCredentialChangePassword.newPassword */
          newPassword: string;
          /** UserCredentialChangePassword.currentPassword */
          currentPassword: string;
        };
      };
    };
  };
  logout: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          refresh_token: string;
        };
      };
    };
  };
  login: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            access_token: string;
            refresh_token: string;
            expires: number;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          grant_type: "password";
          client_id?: string;
          username: string;
          password: string;
          otp?: string;
        };
      };
    };
  };
  acceptInvite: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Bad request */
      409: {
        content: {
          "application/json": {
            /** User is already registered */
            error: "User is already registered";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          password: string;
          first_name: string;
          last_name: string;
        };
      };
    };
  };
  /** Create a guest JWT based on the grant type. Guest should have been previously invited by another owner. */
  createGuestToken: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Invalid input provided */
      400: {
        content: {
          "application/json": {
            error: "Invalid guest information" | "Invalid token provided";
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Guest not found */
            error: "Guest not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          grant_type: "guest_generate";
          /** @description The URL the guest user should be navigated to */
          redirect_url: string;
          username: string;
        };
      };
    };
  };
  getAuthContextUser: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * UserAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * UserAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /**
             * UserAttr.roleId
             * Format: uuid
             */
            roleId?: string | null;
            /**
             * UserAttr.groupId
             * Format: uuid
             */
            groupId?: string | null;
            /** UserAttr.first_name */
            first_name?: string | null;
            /** UserAttr.last_name */
            last_name?: string | null;
            /**
             * UserAttr.name
             * @description Virtual result, `${first_name} ${last_name}`
             */
            name?: string | null;
            /** UserAttr.email */
            email: string;
            /** UserAttr.title */
            title?: string | null;
            /** UserAttr.avatar */
            avatar?: string | null;
            /** UserAttr.status */
            status: string;
            /**
             * UserAttr.last_access
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            /** UserAttr.last_page */
            last_page?: string | null;
            /** UserAttr.phone */
            phone?: string | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getAuthContextTenant: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TenantAttr.id
             * Format: uuid
             */
            id?: string;
            /** TenantAttr.name */
            name: string;
            /** TenantAttr.type */
            type: string;
            /** TenantAttr.domain */
            domain: string;
            /** TenantAttr.modules */
            modules: string;
            /** TenantAttr.colors */
            colors: {
              /** TenantAttr.colors.name */
              name: string;
              /** TenantAttr.colors.primaryColor */
              primaryColor: string;
              /** TenantAttr.colors.secondaryColor */
              secondaryColor: string;
            };
            /** TenantAttr.logo */
            logo: string;
            /** TenantAttr.icon */
            icon?: string | null;
            /** TenantAttr.use_logo */
            use_logo?: boolean | null;
            /** TenantAttr.description */
            description?: string | null;
            /** TenantAttr.settings */
            settings?: { [key: string]: unknown } | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /**
   * Returns a list of events relevant to the current logged in user.
   * This is either because the user owns the resource, is the assigned user, or owns the resource (if applicable).
   */
  getAuthContextNotifications: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** AuditNotificationBizGet.data */
            data: (components["schemas"]["AuditNotificationAttr"] & {
              audit: components["schemas"]["AuditAttr"];
            })[];
            /** AuditNotificationBizGet.pagination */
            pagination: {
              /** AuditNotificationBizGet.pagination.limit */
              limit: number;
              /** AuditNotificationBizGet.pagination.page */
              page: number;
              /** AuditNotificationBizGet.pagination.totalPages */
              totalPages: number;
              /** AuditNotificationBizGet.pagination.count */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getAnalytics: {
    parameters: {
      query: {
        type?:
          | "AssignedUser"
          | "CreatedBy"
          | "Contact"
          | "Course"
          | "CourseProgress"
          | "Deal"
          | "Lesson"
          | "LessonProgress"
          | "Organization"
          | "Category"
          | "DealStage"
          | "Tenant"
          | "TenantDealStage"
          | "User"
          | "Training"
          | "Activities"
          | "Notes"
          | "Product";
        isPublic?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * AnalyticAttr.id
             * Format: uuid
             */
            id: string;
            /** AnalyticAttr.name */
            name: string;
            /** AnalyticAttr.type */
            type:
              | "AssignedUser"
              | "CreatedBy"
              | "Contact"
              | "Course"
              | "CourseProgress"
              | "Deal"
              | "Lesson"
              | "LessonProgress"
              | "Organization"
              | "Category"
              | "DealStage"
              | "Tenant"
              | "TenantDealStage"
              | "User"
              | "Training"
              | "Activities"
              | "Notes"
              | "Product";
            /** AnalyticAttr.relatedTypes */
            relatedTypes: (
              | "AssignedUser"
              | "CreatedBy"
              | "Contact"
              | "Course"
              | "CourseProgress"
              | "Deal"
              | "Lesson"
              | "LessonProgress"
              | "Organization"
              | "Category"
              | "DealStage"
              | "Tenant"
              | "TenantDealStage"
              | "User"
              | "Training"
              | "Activities"
              | "Notes"
              | "Product"
            )[];
            /** AnalyticAttr.displayType */
            displayType:
              | "kpi_standard"
              | "kpi_scorecard"
              | "kpi_growth_index"
              | "kpi_rankings"
              | "kpi_basic"
              | "chart_column"
              | "chart_donut"
              | "chart_pie"
              | "chart_bar"
              | "chart_line"
              | "chart_table"
              | "chart_funnel"
              | "chart_area"
              | "chart_heat";
            /** AnalyticAttr.icon */
            icon: string;
            /**
             * AnalyticAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * AnalyticAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            /** AnalyticAttr.isMulti */
            isMulti: boolean;
            /** AnalyticAttr.dimensions */
            dimensions: string[];
            /** AnalyticAttr.limit */
            limit: number;
            /** AnalyticAttr.measures */
            measures: string[];
            /** AnalyticAttr.order */
            order: [string, "asc" | "desc"][];
            /** AnalyticAttr.segments */
            segments: string[];
            /** AnalyticAttr.timeDimensions */
            timeDimensions: []
              | [
                  {
                    dateRange: components["schemas"]["AnalyticDateRange"];
                    /** AnalyticAttr.timeDimensions.0.dimension */
                    dimension: string;
                    granularity?: components["schemas"]["AnalyticGranularity"];
                  }
                ]
              | [
                  {
                    compareDateRange: components["schemas"]["AnalyticCompareDateRange"];
                    /** AnalyticAttr.timeDimensions.0.dimension */
                    dimension: string;
                    granularity?: components["schemas"]["AnalyticGranularity"];
                  }
                ];
            /** AnalyticAttr.filters */
            filters: (
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "set";
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notSet";
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "equals";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notEquals";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "contains";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notContains";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "startsWith";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "endsWith";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "gt";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "gte";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "lt";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "lte";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "beforeDate";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "afterDate";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
            )[];
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getActivityRequests: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * ActivityRequestAttr.activityRequestId
               * Format: uuid
               */
              activityRequestId: string;
              /**
               * ActivityRequestAttr.organizationId
               * Format: uuid
               */
              organizationId: string;
              /**
               * ActivityRequestAttr.availability
               * @description This is the available time of the contact, not the owner. Availability can
               * span across multiple days and multiple friendly time ranges. i.e. a MWF with
               * morning and afternoon.
               */
              availability: {
                /** ActivityRequestAttr.availability.days */
                days: (
                  | "monday"
                  | "tuesday"
                  | "wednesday"
                  | "thursday"
                  | "friday"
                  | "saturday"
                  | "sunday"
                )[];
                /** ActivityRequestAttr.availability.timePeriods */
                timePeriods: ("morning" | "afternoon" | "evening")[];
              };
              /** ActivityRequestAttr.notes */
              notes?: string | null;
              /**
               * ActivityRequestAttr.createdByContactId
               * Format: uuid
               */
              createdByContactId: string;
              /**
               * ActivityRequestAttr.tenantId
               * Format: uuid
               */
              tenantId: string;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  createActivityRequest: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ActivityRequestAttr.activityRequestId
             * Format: uuid
             */
            activityRequestId: string;
            /**
             * ActivityRequestAttr.organizationId
             * Format: uuid
             */
            organizationId: string;
            /**
             * ActivityRequestAttr.availability
             * @description This is the available time of the contact, not the owner. Availability can
             * span across multiple days and multiple friendly time ranges. i.e. a MWF with
             * morning and afternoon.
             */
            availability: {
              /** ActivityRequestAttr.availability.days */
              days: (
                | "monday"
                | "tuesday"
                | "wednesday"
                | "thursday"
                | "friday"
                | "saturday"
                | "sunday"
              )[];
              /** ActivityRequestAttr.availability.timePeriods */
              timePeriods: ("morning" | "afternoon" | "evening")[];
            };
            /** ActivityRequestAttr.notes */
            notes?: string | null;
            /**
             * ActivityRequestAttr.createdByContactId
             * Format: uuid
             */
            createdByContactId: string;
            /**
             * ActivityRequestAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** ActivityRequestCreateBiz.notes */
          notes?: string | null;
          /**
           * ActivityRequestCreateBiz.availability
           * @description This is the available time of the contact, not the owner. Availability can
           * span across multiple days and multiple friendly time ranges. i.e. a MWF with
           * morning and afternoon.
           */
          availability: {
            /** ActivityRequestCreateBiz.availability.days */
            days: (
              | "monday"
              | "tuesday"
              | "wednesday"
              | "thursday"
              | "friday"
              | "saturday"
              | "sunday"
            )[];
            /** ActivityRequestCreateBiz.availability.timePeriods */
            timePeriods: ("morning" | "afternoon" | "evening")[];
          };
        };
      };
    };
  };
  getActivities: {
    parameters: {
      query: {
        limit: number;
        page: number;
        organizationId?: string;
        contactId?: string;
        dealId?: string;
        order?: components["schemas"]["Order"];
        type?: string;
        done?: boolean;
        startDate?: components["schemas"]["Date"];
        endDate?: components["schemas"]["Date"];
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * ActivityAttr.id
               * Format: uuid
               */
              id: string;
              /** ActivityAttr.name */
              name: string;
              /** ActivityAttr.type */
              type: string;
              /**
               * ActivityAttr.assigned_user_id
               * Format: uuid
               */
              assigned_user_id: string;
              /**
               * ActivityAttr.modified_user_id
               * Format: uuid
               */
              modified_user_id: string;
              /**
               * ActivityAttr.created_by
               * Format: uuid
               */
              created_by: string;
              /**
               * ActivityAttr.organization_id
               * Format: uuid
               */
              organization_id?: string;
              /**
               * ActivityAttr.deal_id
               * Format: uuid
               */
              deal_id?: string;
              /** ActivityAttr.contact_id */
              contact_id?: string;
              start_date: components["schemas"]["Date"];
              end_date: components["schemas"]["Date"];
              /** ActivityAttr.guests */
              guests: string;
              /** ActivityAttr.location */
              location?: string;
              /** ActivityAttr.conference_link */
              conference_link?: string;
              /** ActivityAttr.description */
              description?: string;
              /** ActivityAttr.free_busy */
              free_busy: string;
              /** ActivityAttr.notes */
              notes?: string;
              /** ActivityAttr.rich_note */
              rich_note?: { [key: string]: unknown };
              /** ActivityAttr.owner */
              owner?: string;
              /** ActivityAttr.lead */
              lead?: string;
              /** ActivityAttr.done */
              done: boolean;
              /** ActivityAttr.priority */
              priority: boolean;
              /** ActivityAttr.online_meet */
              online_meet: boolean;
              /**
               * ActivityAttr.feed_id
               * Format: uuid
               */
              feed_id: string;
              /**
               * ActivityAttr.tenant_id
               * Format: uuid
               */
              tenant_id: string;
              deleted_on?: components["schemas"]["Date"] | null;
              canceledOn?: components["schemas"]["Date"];
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  createActivity: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": {
            /** Owner required */
            error: "Owner required";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          organization_id?: string | null;
          deal_id?: string | null;
          contact_id?: string | null;
          name: string;
          type: string;
          start_date: string;
          guests?: string;
          location?: string;
          conference_link?: string;
          description?: string;
          free_busy?: string;
          notes?: string;
          rich_note?: { [key: string]: unknown } | null;
          owner?: string;
          lead?: string;
          done?: boolean;
          contact_info?: { [key: string]: unknown } | null;
          repeat?: string;
          priority?: boolean;
          online_meet?: boolean;
        };
      };
    };
  };
  getMemberTeams: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamMemberAttr.teamId
             * Format: uuid
             */
            teamId: string;
            /**
             * TeamMemberAttr.userId
             * Format: uuid
             */
            userId: string;
            /**
             * TeamMemberAttr.isManager
             * @description Only one manager is allowed per team
             */
            isManager: boolean;
            /**
             * TeamMemberAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** MemberTeam not found */
            error: "MemberTeam not found";
          };
        };
      };
    };
  };
  createMemberTeams: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamMemberAttr.teamId
             * Format: uuid
             */
            teamId: string;
            /**
             * TeamMemberAttr.userId
             * Format: uuid
             */
            userId: string;
            /**
             * TeamMemberAttr.isManager
             * @description Only one manager is allowed per team
             */
            isManager: boolean;
            /**
             * TeamMemberAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * MemberTeamCreateBiz.isManager
           * @description Only one manager is allowed per team
           */
          isManager?: boolean;
          /**
           * MemberTeamCreateBiz.teamId
           * Format: uuid
           */
          teamId: string;
        }[];
      };
    };
  };
  changeUserPassword: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            /** Password or generate required */
            error: "Password or generate required";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** User not found */
            error: "User not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json":
          | {
              /** UserCredentialResetPasswordBiz.password */
              password: string;
            }
          | {
              /** UserCredentialResetPasswordBiz.generate */
              generate: true;
            };
      };
    };
  };
  impersonation: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            access_token: string;
            refresh_token: string;
            expires: number;
            /** Format: uuid */
            id: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** User not found */
            error: "User not found";
          };
        };
      };
    };
  };
  /** Get a user's signed avatar URL. */
  getUserAvatar: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description Signed image URL */
            url?: string;
            /** @description ISO date of when avatar link expires */
            expiry?: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** User not found */
            error: "User not found";
          };
        };
      };
    };
  };
  getUser: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * UserAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * UserAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /**
             * UserAttr.roleId
             * Format: uuid
             */
            roleId?: string | null;
            /**
             * UserAttr.groupId
             * Format: uuid
             */
            groupId?: string | null;
            /** UserAttr.first_name */
            first_name?: string | null;
            /** UserAttr.last_name */
            last_name?: string | null;
            /**
             * UserAttr.name
             * @description Virtual result, `${first_name} ${last_name}`
             */
            name?: string | null;
            /** UserAttr.email */
            email: string;
            /** UserAttr.title */
            title?: string | null;
            /** UserAttr.avatar */
            avatar?: string | null;
            /** UserAttr.status */
            status: string;
            /**
             * UserAttr.last_access
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            /** UserAttr.last_page */
            last_page?: string | null;
            /** UserAttr.phone */
            phone?: string | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** User not found */
            error: "User not found";
          };
        };
      };
    };
  };
  updateUser: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * UserAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * UserAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /**
             * UserAttr.roleId
             * Format: uuid
             */
            roleId?: string | null;
            /**
             * UserAttr.groupId
             * Format: uuid
             */
            groupId?: string | null;
            /** UserAttr.first_name */
            first_name?: string | null;
            /** UserAttr.last_name */
            last_name?: string | null;
            /**
             * UserAttr.name
             * @description Virtual result, `${first_name} ${last_name}`
             */
            name?: string | null;
            /** UserAttr.email */
            email: string;
            /** UserAttr.title */
            title?: string | null;
            /** UserAttr.avatar */
            avatar?: string | null;
            /** UserAttr.status */
            status: string;
            /**
             * UserAttr.last_access
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            /** UserAttr.last_page */
            last_page?: string | null;
            /** UserAttr.phone */
            phone?: string | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** User not found */
            error: "User not found";
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            error:
              | "email already in use"
              | "unable to change active user's email";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** UserModifyBiz.title */
          title?: string | null;
          /** UserModifyBiz.first_name */
          first_name?: string | null;
          /** UserModifyBiz.last_name */
          last_name?: string | null;
          /** UserModifyBiz.avatar */
          avatar?: string | null;
          /**
           * UserModifyBiz.roleId
           * Format: uuid
           */
          roleId?: string | null;
          /**
           * UserModifyBiz.groupId
           * Format: uuid
           */
          groupId?: string | null;
          /** UserModifyBiz.email */
          email?: string;
          /**
           * UserModifyBiz.last_access
           * Format: date-time
           * @description ISO date time
           * @example 2006-01-02T15:04:05.000Z
           */
          deletedAt?: components["schemas"]["Date"] | null;
          /** UserModifyBiz.last_page */
          last_page?: string | null;
          /** UserModifyBiz.phone */
          phone?: string | null;
        };
      };
    };
  };
  getTenantBySubdomain: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            tenant?: unknown;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Tenant not found */
            error: "Tenant not found";
          };
        };
      };
    };
  };
  getIntegration: {
    parameters: {
      path: {
        type: "FISERV";
      };
      query: {
        tenant_id?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            tenant_id: string;
            type: "FISERV";
            credentials: {
              url: string;
              client_id: string;
              client_secret: string;
            };
            enabled: boolean;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Integration not found */
            error: "Integration not found";
          };
        };
      };
    };
  };
  updateIntegration: {
    parameters: {
      path: {
        type: "FISERV";
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            tenant_id: string;
            type: "FISERV";
            credentials: {
              url: string;
              client_id: string;
              client_secret: string;
            };
            enabled: boolean;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            /** Unauthorized */
            error: "Unauthorized";
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Integration not found */
            error: "Integration not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          tenant_id?: string;
          credentials?: {
            /** @default https://prod.api.fiservapps.com */
            url: string;
            client_id: string;
            client_secret: string;
          };
          enabled?: boolean;
        };
      };
    };
  };
  createIntegration: {
    parameters: {
      path: {
        type: "FISERV";
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            tenant_id: string;
            type: "FISERV";
            credentials: {
              url: string;
              client_id: string;
              client_secret: string;
            };
            enabled: boolean;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            /** Unauthorized */
            error: "Unauthorized";
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** Integration already exists */
            error: "Integration already exists";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          tenant_id?: string;
          credentials: {
            /** @default https://prod.api.fiservapps.com */
            url?: string;
            client_id: string;
            client_secret: string;
          };
          enabled: boolean;
        };
      };
    };
  };
  deleteIntegration: {
    parameters: {
      path: {
        type: "FISERV";
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            /** Unauthorized */
            error: "Unauthorized";
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Integration not found */
            error: "Integration not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          tenant_id?: string;
        };
      };
    };
  };
  getTenantConfig: {
    parameters: {
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** TenantConfigAttr.tenantId */
            tenantId: string;
            /** TenantConfigAttr.quiz */
            quiz: {
              /** TenantConfigAttr.quiz.maxPoints */
              maxPoints: number;
              /** TenantConfigAttr.quiz.maxAttempts */
              maxAttempts: number;
              /** TenantConfigAttr.quiz.passingScore */
              passingScore: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            error: "Tenant not found" | "TenantConfig not found";
          };
        };
      };
    };
  };
  upsertTenantConfig: {
    parameters: {
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** TenantConfigAttr.tenantId */
            tenantId: string;
            /** TenantConfigAttr.quiz */
            quiz: {
              /** TenantConfigAttr.quiz.maxPoints */
              maxPoints: number;
              /** TenantConfigAttr.quiz.maxAttempts */
              maxAttempts: number;
              /** TenantConfigAttr.quiz.passingScore */
              passingScore: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Tenant not found */
            error: "Tenant not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** TenantConfigModifyBiz.quiz */
          quiz: {
            /** TenantConfigModifyBiz.quiz.maxPoints */
            maxPoints: number;
            /** TenantConfigModifyBiz.quiz.maxAttempts */
            maxAttempts: number;
            /** TenantConfigModifyBiz.quiz.passingScore */
            passingScore: number;
          };
        };
      };
    };
  };
  getTenantById: {
    parameters: {
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TenantAttr.id
             * Format: uuid
             */
            id?: string;
            /** TenantAttr.name */
            name: string;
            /** TenantAttr.type */
            type: string;
            /** TenantAttr.domain */
            domain: string;
            /** TenantAttr.modules */
            modules: string;
            /** TenantAttr.colors */
            colors: {
              /** TenantAttr.colors.name */
              name: string;
              /** TenantAttr.colors.primaryColor */
              primaryColor: string;
              /** TenantAttr.colors.secondaryColor */
              secondaryColor: string;
            };
            /** TenantAttr.logo */
            logo: string;
            /** TenantAttr.icon */
            icon?: string | null;
            /** TenantAttr.use_logo */
            use_logo?: boolean | null;
            /** TenantAttr.description */
            description?: string | null;
            /** TenantAttr.settings */
            settings?: { [key: string]: unknown } | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": {
            /** unable to view this tenant */
            error: "unable to view this tenant";
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Tenant not found */
            error: "Tenant not found";
          };
        };
      };
    };
  };
  updateTenant: {
    parameters: {
      path: {
        tenantId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TenantAttr.id
             * Format: uuid
             */
            id?: string;
            /** TenantAttr.name */
            name: string;
            /** TenantAttr.type */
            type: string;
            /** TenantAttr.domain */
            domain: string;
            /** TenantAttr.modules */
            modules: string;
            /** TenantAttr.colors */
            colors: {
              /** TenantAttr.colors.name */
              name: string;
              /** TenantAttr.colors.primaryColor */
              primaryColor: string;
              /** TenantAttr.colors.secondaryColor */
              secondaryColor: string;
            };
            /** TenantAttr.logo */
            logo: string;
            /** TenantAttr.icon */
            icon?: string | null;
            /** TenantAttr.use_logo */
            use_logo?: boolean | null;
            /** TenantAttr.description */
            description?: string | null;
            /** TenantAttr.settings */
            settings?: { [key: string]: unknown } | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Tenant not found */
            error: "Tenant not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** TenantModifyBiz.name */
          name?: string;
          /** TenantModifyBiz.type */
          type?: string;
          /** TenantModifyBiz.description */
          description?: string | null;
          /** TenantModifyBiz.icon */
          icon?: string | null;
          /** TenantModifyBiz.domain */
          domain?: string;
          /** TenantModifyBiz.modules */
          modules?: string;
          colors?: components["schemas"]["TenantColor"];
          /** TenantModifyBiz.logo */
          logo?: string;
          /** TenantModifyBiz.use_logo */
          use_logo?: boolean | null;
          /** TenantModifyBiz.settings */
          settings?: { [key: string]: unknown } | null;
        };
      };
    };
  };
  /** Use bulk team member creation instead. */
  createTeamMember: {
    parameters: {
      path: {
        teamId: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamMemberAttr.teamId
             * Format: uuid
             */
            teamId: string;
            /**
             * TeamMemberAttr.userId
             * Format: uuid
             */
            userId: string;
            /**
             * TeamMemberAttr.isManager
             * @description Only one manager is allowed per team
             */
            isManager: boolean;
            /**
             * TeamMemberAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** maximum of one manager is allowed */
            error: "maximum of one manager is allowed";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * TeamMemberCreateBiz.isManager
           * @description Only one manager is allowed per team
           */
          isManager?: boolean;
        };
      };
    };
  };
  /** Use bulk team member creation instead. */
  deleteTeamMember: {
    parameters: {
      path: {
        teamId: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
    };
  };
  getTeamMembers: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        teamId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** TeamMemberBizGetByTeamId.data */
            data: ({
              /** teamId */
              teamId: string;
              /** userId */
              userId: string;
              /** isManager */
              isManager: boolean;
              /**
               * deletedAt
               * Format: date-time
               * @description ISO date time
               * @example 2006-01-02T15:04:05.000Z
               */
              deletedAt?: components["schemas"]["Date"] | null;
            } & components["schemas"]["Timestamp"] & {
                user: components["schemas"]["UserAttr"];
              })[];
            /** TeamMemberBizGetByTeamId.pagination */
            pagination: {
              /** TeamMemberBizGetByTeamId.pagination.limit */
              limit: number;
              /** TeamMemberBizGetByTeamId.pagination.page */
              page: number;
              /** TeamMemberBizGetByTeamId.pagination.totalPages */
              totalPages: number;
              /** TeamMemberBizGetByTeamId.pagination.count */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
    };
  };
  /**
   * This is a declarative route.
   * It will replace all members of the team with the ones provided.
   */
  updateTeamMembers: {
    parameters: {
      path: {
        teamId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamMemberAttr.teamId
             * Format: uuid
             */
            teamId: string;
            /**
             * TeamMemberAttr.userId
             * Format: uuid
             */
            userId: string;
            /**
             * TeamMemberAttr.isManager
             * @description Only one manager is allowed per team
             */
            isManager: boolean;
            /**
             * TeamMemberAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** maximum of one manager is allowed */
            error: "maximum of one manager is allowed";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * TeamMemberUpsertBiz.userId
           * Format: uuid
           */
          userId: string;
          /**
           * TeamMemberUpsertBiz.isManager
           * @description Only one manager is allowed per team
           */
          isManager?: boolean;
        }[];
      };
    };
  };
  getTeam: {
    parameters: {
      path: {
        teamId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * TeamAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            /** TeamAttr.name */
            name: string;
            /** TeamAttr.description */
            description?: string | null;
            /** TeamAttr.isActive */
            isActive: boolean;
            /**
             * TeamAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
    };
  };
  updateTeam: {
    parameters: {
      path: {
        teamId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * TeamAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            /** TeamAttr.name */
            name: string;
            /** TeamAttr.description */
            description?: string | null;
            /** TeamAttr.isActive */
            isActive: boolean;
            /**
             * TeamAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** TeamModifyBiz.name */
          name?: string;
          /** TeamModifyBiz.description */
          description?: string | null;
          /** TeamModifyBiz.isActive */
          isActive?: boolean;
        };
      };
    };
  };
  deleteTeam: {
    parameters: {
      path: {
        teamId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Team not found */
            error: "Team not found";
          };
        };
      };
    };
  };
  deleteStage: {
    parameters: {
      path: {
        stageId: string;
      };
      query: {
        transferId?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Stage not found */
            error: "Stage not found";
          };
        };
      };
    };
  };
  updateSearch: {
    parameters: {
      path: {
        searchId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** SearchAttr.id */
            id?: string;
            /** SearchAttr.type */
            type: string;
            /** SearchAttr.name */
            name: string;
            /** SearchAttr.value */
            value: string;
            /** SearchAttr.userId */
            userId: string;
            /** SearchAttr.tenantId */
            tenantId: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Search not found */
            error: "Search not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** SearchModifyBiz.name */
          name?: string;
          /** SearchModifyBiz.type */
          type?: string;
          /** SearchModifyBiz.value */
          value?: string;
        };
      };
    };
  };
  deleteSearch: {
    parameters: {
      path: {
        searchId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Search not found */
            error: "Search not found";
          };
        };
      };
    };
  };
  getRolePermissions: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * PermissionAttr.role
             * Format: uuid
             */
            role: string;
            /** PermissionAttr.collection */
            collection:
              | "notes"
              | "dashboard"
              | "accounts"
              | "activities"
              | "analytics"
              | "categories"
              | "contacts"
              | "courses"
              | "dashboards"
              | "deals"
              | "lessons"
              | "products"
              | "prospects"
              | "quizzes"
              | "reports"
              | "insights";
            /** PermissionAttr.action */
            action: "create" | "delete" | "view" | "manage" | "edit";
            /**
             * PermissionAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Role not found */
            error: "Role not found";
          };
        };
      };
    };
  };
  /**
   * This is a declarative route.
   * It will replace all permissions of the role with the ones provided.
   */
  updateRolePermissions: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * PermissionAttr.role
             * Format: uuid
             */
            role: string;
            /** PermissionAttr.collection */
            collection:
              | "notes"
              | "dashboard"
              | "accounts"
              | "activities"
              | "analytics"
              | "categories"
              | "contacts"
              | "courses"
              | "dashboards"
              | "deals"
              | "lessons"
              | "products"
              | "prospects"
              | "quizzes"
              | "reports"
              | "insights";
            /** PermissionAttr.action */
            action: "create" | "delete" | "view" | "manage" | "edit";
            /**
             * PermissionAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Role not found */
            error: "Role not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** PermissionUpsertBiz.collection */
          collection:
            | "notes"
            | "dashboard"
            | "accounts"
            | "activities"
            | "analytics"
            | "categories"
            | "contacts"
            | "courses"
            | "dashboards"
            | "deals"
            | "lessons"
            | "products"
            | "prospects"
            | "quizzes"
            | "reports"
            | "insights";
          /** PermissionUpsertBiz.action */
          action: "create" | "delete" | "view" | "manage" | "edit";
        }[];
      };
    };
  };
  getRole: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * RoleAttr.id
             * Format: uuid
             */
            id?: string;
            /**
             * RoleAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** RoleAttr.name */
            name: string;
            /** RoleAttr.icon */
            icon?: string;
            /** RoleAttr.description */
            description?: string;
            /** RoleAttr.ip_access */
            ip_access?: string;
            /** RoleAttr.enforce_tfa */
            enforce_tfa: boolean;
            /** RoleAttr.admin_access */
            admin_access: boolean;
            /** RoleAttr.owner_access */
            owner_access: boolean;
            /**
             * RoleAttr.app_access
             * @description Used for application users. If the role has associated permissions,
             * those permissions will superseded default app_access permissions.
             */
            app_access: boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Role not found */
            error: "Role not found";
          };
        };
      };
    };
  };
  updateRole: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * RoleAttr.id
             * Format: uuid
             */
            id?: string;
            /**
             * RoleAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** RoleAttr.name */
            name: string;
            /** RoleAttr.icon */
            icon?: string;
            /** RoleAttr.description */
            description?: string;
            /** RoleAttr.ip_access */
            ip_access?: string;
            /** RoleAttr.enforce_tfa */
            enforce_tfa: boolean;
            /** RoleAttr.admin_access */
            admin_access: boolean;
            /** RoleAttr.owner_access */
            owner_access: boolean;
            /**
             * RoleAttr.app_access
             * @description Used for application users. If the role has associated permissions,
             * those permissions will superseded default app_access permissions.
             */
            app_access: boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": {
            /** Unauthorized to update role */
            error: "Unauthorized to update role";
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Role not found */
            error: "Role not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** RoleModifyBiz.name */
          name?: string;
          /** RoleModifyBiz.description */
          description?: string;
          /** RoleModifyBiz.admin_access */
          admin_access?: boolean;
          /** RoleModifyBiz.owner_access */
          owner_access?: boolean;
        } & {
          /**
           * @deprecated
           * @description Use admin_access
           */
          isAdmin?: boolean;
          /**
           * @deprecated
           * @description Use owner_access
           */
          isOwner?: boolean;
        };
      };
    };
  };
  deleteRole: {
    parameters: {
      path: {
        roleId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Role not found */
            error: "Role not found";
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            /** Role is assigned to user */
            error: "Role is assigned to user";
          };
        };
      };
    };
  };
  getReport: {
    parameters: {
      path: {
        report_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Report not found */
            error: "Report not found";
          };
        };
      };
    };
  };
  getMuxVideoByUploadId: {
    parameters: {
      path: {
        uploadId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** Asset.id */
            id: string;
            /** Asset.created_at */
            created_at: string;
            /** Asset.status */
            status: "preparing" | "ready" | "errored";
            /** Asset.duration */
            duration?: number;
            /** Asset.max_stored_resolution */
            max_stored_resolution?: "Audio only" | "SD" | "HD" | "FHD" | "UHD";
            /** Asset.max_stored_frame_rate */
            max_stored_frame_rate?: number;
            /** Asset.aspect_ratio */
            aspect_ratio?: string;
            /** Asset.per_title_encode */
            per_title_encode?: boolean;
            /** Asset.is_live */
            is_live?: boolean;
            /** Asset.source_asset_id */
            source_asset_id?: string;
            /** Asset.playback_ids */
            playback_ids?: components["schemas"]["PlaybackId"][];
            /** Asset.tracks */
            tracks?: components["schemas"]["Track"][];
            /** Asset.mp4_support */
            mp4_support: "none" | "standard";
            static_renditions?: components["schemas"]["StaticRenditions"];
            /** Asset.master_access */
            master_access: "none" | "temporary";
            master?: components["schemas"]["AssetMaster"];
            /** Asset.passthrough */
            passthrough?: string;
            errors?: components["schemas"]["AssetError"];
            /** Asset.upload_id */
            upload_id?: string;
            /** Asset.live_stream_id */
            live_stream_id?: string;
            /** Asset.normalize_audio */
            normalize_audio?: boolean;
            /** Asset.recording_times */
            recording_times?: components["schemas"]["RecordingTimes"][];
            non_standard_input_reasons?: components["schemas"]["NonStandardInputReasons"];
            /** Asset.test */
            test: boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** upload not found */
            error: "upload not found";
          };
        };
      };
    };
  };
  getPipelineTeam: {
    parameters: {
      path: {
        pipelineId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * TeamAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * TeamAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            /** TeamAttr.name */
            name: string;
            /** TeamAttr.description */
            description?: string | null;
            /** TeamAttr.isActive */
            isActive: boolean;
            /**
             * TeamAttr.deletedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deletedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** PipelineTeam not found */
            error: "PipelineTeam not found";
          };
        };
      };
    };
  };
  deletePipelineTeam: {
    parameters: {
      path: {
        pipelineId: string;
        teamId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline Team not found */
            error: "Pipeline Team not found";
          };
        };
      };
    };
  };
  setDefaultPipeline: {
    parameters: {
      path: {
        pipelineId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** PipelineAttr.id */
            id: string;
            /** PipelineAttr.name */
            name: string;
            /** PipelineAttr.description */
            description?: string;
            /** PipelineAttr.isDefault */
            isDefault: boolean;
            /** PipelineAttr.global */
            global: boolean;
            /** PipelineAttr.tenantId */
            tenantId: string;
            /** PipelineAttr.createdById */
            createdById: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline not found */
            error: "Pipeline not found";
          };
        };
      };
    };
  };
  getPipelineDealCount: {
    parameters: {
      path: {
        pipelineId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            totalDeals?: number;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline not found */
            error: "Pipeline not found";
          };
        };
      };
    };
  };
  getPipeline: {
    parameters: {
      path: {
        pipelineId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** PipelineAttr.id */
            id: string;
            /** PipelineAttr.name */
            name: string;
            /** PipelineAttr.description */
            description?: string;
            /** PipelineAttr.isDefault */
            isDefault: boolean;
            /** PipelineAttr.global */
            global: boolean;
            /** PipelineAttr.tenantId */
            tenantId: string;
            /** PipelineAttr.createdById */
            createdById: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline not found */
            error: "Pipeline not found";
          };
        };
      };
    };
  };
  updatePipeline: {
    parameters: {
      path: {
        pipelineId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** PipelineAttr.id */
            id: string;
            /** PipelineAttr.name */
            name: string;
            /** PipelineAttr.description */
            description?: string;
            /** PipelineAttr.isDefault */
            isDefault: boolean;
            /** PipelineAttr.global */
            global: boolean;
            /** PipelineAttr.tenantId */
            tenantId: string;
            /** PipelineAttr.createdById */
            createdById: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline not found */
            error: "Pipeline not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** PipelineModifyBiz.name */
          name?: string;
          /** PipelineModifyBiz.description */
          description?: string;
          /** PipelineModifyBiz.global */
          global?: boolean;
        };
      };
    };
  };
  clonePipeline: {
    parameters: {
      path: {
        pipelineId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** PipelineAttr.id */
            id: string;
            /** PipelineAttr.name */
            name: string;
            /** PipelineAttr.description */
            description?: string;
            /** PipelineAttr.isDefault */
            isDefault: boolean;
            /** PipelineAttr.global */
            global: boolean;
            /** PipelineAttr.tenantId */
            tenantId: string;
            /** PipelineAttr.createdById */
            createdById: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline not found */
            error: "Pipeline not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
  };
  deletePipeline: {
    parameters: {
      path: {
        pipelineId: string;
      };
      query: {
        transferId?: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Pipeline not found */
            error: "Pipeline not found";
          };
        };
      };
    };
  };
  /** Get a(n) organizations' field list */
  getOrganizationsField: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            value_type: "number" | "string" | "boolean" | "date" | "object";
            key: string;
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "EMAIL"
              | "URL"
              | "PHONE"
              | "CHECKBOX";
            order: number;
            /** @description Total organizations that have used this field */
            total_organizations: number;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Remove a(n) organization field */
  removeOrganizationsField: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  getOrganizationReport: {
    parameters: {
      path: {
        organization_id: string;
        report_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            organization_id: string;
            created_by: string;
            file_id?: string;
            type: "TREASURY";
            /** @description User input for report calculation */
            input: {
              type: "TREASURY";
              client_name: string;
              proposed_bank_name: string;
              /** @description ISO timestamp */
              date?: string;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              average_balance: number;
              services: {
                id: number;
                name: string;
                total_items: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                proposed_item_fee: number;
              }[];
            };
            /** @description In "YYYYMM" format */
            month?: string;
            /** @description Output calculations based on user input */
            output?: {
              type: "TREASURY";
              client_name: string;
              proposed_bank_name: string;
              /** @description ISO timestamp */
              date?: string;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              annual_services_savings: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              annual_estimated_savings: number;
              services: {
                id: number;
                name?: string;
                total_items: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                proposed_item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                annual_savings: number;
              }[];
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Report not found */
            error: "Report not found";
          };
        };
      };
    };
  };
  updateOrganizationReport: {
    parameters: {
      path: {
        organization_id: string;
        report_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            organization_id: string;
            created_by: string;
            file_id?: string;
            type: "TREASURY";
            /** @description User input for report calculation */
            input: {
              type: "TREASURY";
              client_name: string;
              proposed_bank_name: string;
              /** @description ISO timestamp */
              date?: string;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              average_balance: number;
              services: {
                id: number;
                name: string;
                total_items: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                proposed_item_fee: number;
              }[];
            };
            /** @description In "YYYYMM" format */
            month?: string;
            /** @description Output calculations based on user input */
            output: {
              type: "TREASURY";
              client_name: string;
              proposed_bank_name: string;
              /** @description ISO timestamp */
              date?: string;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              annual_services_savings: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              annual_estimated_savings: number;
              services: {
                id: number;
                name?: string;
                total_items: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                proposed_item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                annual_savings: number;
              }[];
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
      /** Not processable */
      422: {
        content: {
          "application/json": {
            /** Not processable */
            error: "Not processable";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description User input for report calculation */
          input: {
            type: "TREASURY";
            client_name: string;
            proposed_bank_name: string;
            /** @description ISO timestamp */
            date?: string;
            /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
            average_balance: number;
            services: {
              id: number;
              name: string;
              total_items: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              item_fee: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              proposed_item_fee: number;
            }[];
          };
          /** @description In "YYYYMM" format */
          month: string;
        };
      };
    };
  };
  deleteOrganizationReport: {
    parameters: {
      path: {
        organization_id: string;
        report_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            error: "Organization not found" | "Report not found";
          };
        };
      };
    };
  };
  getOrganizationReports: {
    parameters: {
      query: {
        page: number;
        limit: number;
        type?: "TREASURY";
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
            data: {
              id: string;
              organization_id: string;
              created_by: string;
              file_id?: string;
              type: "TREASURY";
              /** @description User input for report calculation */
              input: {
                type: "TREASURY";
                client_name: string;
                proposed_bank_name: string;
                /** @description ISO timestamp */
                date?: string;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                average_balance: number;
                services: {
                  id: number;
                  name: string;
                  total_items: number;
                  /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                  item_fee: number;
                  /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                  proposed_item_fee: number;
                }[];
              };
              /** @description In "YYYYMM" format */
              month?: string;
              /** @description Output calculations based on user input */
              output?: {
                type: "TREASURY";
                client_name: string;
                proposed_bank_name: string;
                /** @description ISO timestamp */
                date?: string;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                annual_services_savings: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                annual_estimated_savings: number;
                services: {
                  id: number;
                  name?: string;
                  total_items: number;
                  /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                  item_fee: number;
                  /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                  proposed_item_fee: number;
                  /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                  annual_savings: number;
                }[];
              };
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
    };
  };
  createOrganizationReport: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            organization_id: string;
            created_by: string;
            file_id?: string;
            type: "TREASURY";
            /** @description User input for report calculation */
            input: {
              type: "TREASURY";
              client_name: string;
              proposed_bank_name: string;
              /** @description ISO timestamp */
              date?: string;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              average_balance: number;
              services: {
                id: number;
                name: string;
                total_items: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                proposed_item_fee: number;
              }[];
            };
            /** @description In "YYYYMM" format */
            month?: string;
            /** @description Output calculations based on user input */
            output: {
              type: "TREASURY";
              client_name: string;
              proposed_bank_name: string;
              /** @description ISO timestamp */
              date?: string;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              annual_services_savings: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              annual_estimated_savings: number;
              services: {
                id: number;
                name?: string;
                total_items: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                proposed_item_fee: number;
                /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
                annual_savings: number;
              }[];
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
      /** Not Processable */
      422: {
        content: {
          "application/json": {
            /** Report not processable */
            error: "Report not processable";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description User input for report calculation */
          input: {
            type: "TREASURY";
            client_name: string;
            proposed_bank_name: string;
            /** @description ISO timestamp */
            date?: string;
            /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
            average_balance: number;
            services: {
              id: number;
              name: string;
              total_items: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              item_fee: number;
              /** @description Whole number representing a tenth of a cent. e.g.: $123.45 is represented as a whole number of 123450 */
              proposed_item_fee: number;
            }[];
          };
          /** @description In "YYYYMM" format */
          month: string;
        };
      };
    };
  };
  /** Add a(n) organization owner */
  addOrganizationOwner: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            user_id: string;
            organization_id: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  /** Remove a(n) organization owner */
  removeOrganizationOwner: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Owner not found */
            error: "Owner not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  /** Get a organization's owner list */
  getOrganizationOwners: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              user_id: string;
              organization_id: string;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getOrganizationInights: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** OrganizationBizGetInsights.sp */
            sp: {
              /** id */
              id: string;
              /** aggregation_type */
              aggregation_type?: "AVERAGE" | null;
              report_date: components["schemas"]["Date"];
              /** days_sales_out */
              days_sales_out?: number | null;
              /** days_payable_out */
              days_payable_out?: number | null;
              /** working_capital */
              working_capital?: number | null;
              /** working_capital_ratio */
              working_capital_ratio?: number | null;
            } & components["schemas"]["ModelTimestamp"];
            /** OrganizationBizGetInsights.rpmg */
            rpmg:
              | (components["schemas"]["RpmgVerticalAttr"] & {
                  naics: components["schemas"]["NaicsAttr"];
                  summary: components["schemas"]["RpmgSummaryAttr"];
                  /** transaction_summary */
                  transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
                    transaction: components["schemas"]["RpmgTransactionAttr"];
                  })[];
                })
              | (components["schemas"]["RpmgVerticalAttr"] & {
                  /** naics */
                  naics: unknown | null;
                  summary: components["schemas"]["RpmgSummaryAttr"];
                  /** transaction_summary */
                  transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
                    transaction: components["schemas"]["RpmgTransactionAttr"];
                  })[];
                });
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
    };
  };
  organizationIsFollower: {
    parameters: {
      path: {
        organization_id: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            isFollower: boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  startFollowingOrganization: {
    parameters: {
      path: {
        organization_id: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  stopFollowingOrganization: {
    parameters: {
      path: {
        organization_id: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  getOrganizationFollowers: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              user_id?: string;
              organization_id?: string;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Get a organization's field */
  getOrganizationField: {
    parameters: {
      path: {
        organization_id: string;
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            organization_id: string;
            field_id: string;
            value: string | number | boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Remove a(n) organization field */
  removeOrganizationField: {
    parameters: {
      path: {
        organization_id: string;
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Get a organization's field list */
  getOrganizationFields: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              id: string;
              created_by: string;
              organization_id: string;
              field_id: string;
              value: string | number | boolean;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Upsert a(n) organization field */
  upsertOrganizationField: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            organization_id: string;
            field_id: string;
            value: string | number | boolean;
          };
        };
      };
      /** Invalid input provided */
      400: {
        content: {
          "application/json": {
            /** Invalid value provided for specified field */
            error: "Invalid value provided for specified field";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          field_id: string;
          value: string | number | boolean;
        };
      };
    };
  };
  getOrganizationContacts: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
    };
  };
  getOrganizationById: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description Organization model */
            organization: {
              id?: string;
              name?: string | null;
              modified_user_id?: string;
              created_by?: string;
              deleted?: boolean;
              assigned_user_id?: string;
              industry?: string;
              annual_revenue?: string;
              annual_revenue_merchant?: string;
              annual_revenue_treasury?: string;
              annual_revenue_business_card?: string;
              total_revenue?: string;
              phone_fax?: string;
              billing_address_street?: string;
              billing_address_city?: string;
              billing_address_state?: string;
              billing_address_postalcode?: string;
              billing_address_country?: string;
              rating?: string;
              phone_office?: string;
              phone_alternate?: string;
              website?: string;
              ownership?: string;
              employees?: number;
              ticker_symbol?: string;
              address_street?: string;
              address_suite?: string;
              address_city?: string;
              address_state?: string;
              address_postalcode?: string;
              address_country?: string;
              sic_code?: string;
              status?: string;
              naics_code?: string;
              cif?: string;
              branch?: string;
              avatar?: string;
              owners?: {
                user_id: string;
                organization_id: string;
                user: { [key: string]: unknown };
              }[];
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Organization not found */
            error: "Organization not found";
          };
        };
      };
    };
  };
  updateOrganization: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id?: string;
            name?: string | null;
            modified_user_id?: string;
            created_by?: string;
            deleted?: boolean;
            assigned_user_id?: string;
            industry?: string;
            annual_revenue?: string;
            annual_revenue_merchant?: string;
            annual_revenue_treasury?: string;
            annual_revenue_business_card?: string;
            total_revenue?: string;
            phone_fax?: string;
            billing_address_street?: string;
            billing_address_city?: string;
            billing_address_state?: string;
            billing_address_postalcode?: string;
            billing_address_country?: string;
            rating?: string;
            phone_office?: string;
            phone_alternate?: string;
            website?: string;
            ownership?: string;
            employees?: number;
            ticker_symbol?: string;
            address_street?: string;
            address_suite?: string;
            address_city?: string;
            address_state?: string;
            address_postalcode?: string;
            address_country?: string;
            sic_code?: string;
            status?: string;
            naics_code?: string;
            cif?: string;
            branch?: string;
            avatar?: string;
            owners?: {
              user_id: string;
              organization_id: string;
              user: { [key: string]: unknown };
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Organization name */
          name?: string;
          /** @description Status */
          status?: string | null;
          /** @description Organization industry */
          industry?: string | null;
          address_city?: string | null;
          address_country?: string | null;
          address_postalcode?: string | null;
          address_state?: string | null;
          address_street?: string | null;
          address_suite?: string | null;
          sic_code?: string | null;
          naics_code?: string | null;
          employees?: number | null;
          annual_revenue_merchant?: (string | number) | null;
          annual_revenue_treasury?: (string | number) | null;
          annual_revenue_business_card?: (string | number) | null;
          total_revenue?: (string | number) | null;
          is_customer?: boolean | null;
          cif?: string | null;
          branch?: string | null;
          avatar?: string | null;
          label_id?: string | null;
          ticker_symbol?: string | null;
        };
      };
    };
  };
  deleteOrganization: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** Organization deleted */
      204: never;
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  deleteArticle: {
    parameters: {
      path: {
        articleId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Article not found */
            error: "Article not found";
          };
        };
      };
    };
  };
  getNAICSTypeSummaryByCode: {
    parameters: {
      path: {
        code: string;
        type: "rpmg" | "sp";
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json":
            | (
                | (components["schemas"]["RpmgVerticalAttr"] & {
                    naics: components["schemas"]["NaicsAttr"];
                    summary: components["schemas"]["RpmgSummaryAttr"];
                    /** transaction_summary */
                    transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
                      transaction: components["schemas"]["RpmgTransactionAttr"];
                    })[];
                  })
                | (components["schemas"]["RpmgVerticalAttr"] & {
                    /** naics */
                    naics: unknown | null;
                    summary: components["schemas"]["RpmgSummaryAttr"];
                    /** transaction_summary */
                    transaction_summary: (components["schemas"]["RpmgTransactionAttr"] & {
                      transaction: components["schemas"]["RpmgTransactionAttr"];
                    })[];
                  })
              )
            | ({
                /** id */
                id: string;
                /** aggregation_type */
                aggregation_type?: "AVERAGE" | null;
                report_date: components["schemas"]["Date"];
                /** days_sales_out */
                days_sales_out?: number | null;
                /** days_payable_out */
                days_payable_out?: number | null;
                /** working_capital */
                working_capital?: number | null;
                /** working_capital_ratio */
                working_capital_ratio?: number | null;
              } & components["schemas"]["ModelTimestamp"]);
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** NAICS not found */
            error: "NAICS not found";
          };
        };
      };
    };
  };
  getNAICSByCode: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            code: string;
            title: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** NAICS not found */
            error: "NAICS not found";
          };
        };
      };
    };
  };
  getMerchantReport: {
    parameters: {
      path: {
        site_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** MerchantOutput.type */
            type: "MERCHANT";
            /** MerchantOutput.name */
            name: string;
            /** MerchantOutput.requestDate */
            requestDate: string;
            /** MerchantOutput.totalTransactions */
            totalTransactions: number;
            /** MerchantOutput.totalFees */
            totalFees: number;
            /** MerchantOutput.averageFee */
            averageFee: number;
            /** MerchantOutput.totalDollarsProcessed */
            totalDollarsProcessed: number;
            /** MerchantOutput.averageTransaction */
            averageTransaction: number;
            /** MerchantOutput.effectiveRate */
            effectiveRate: number;
            /** MerchantOutput.authorizationAttempts */
            authorizationAttempts: number;
            /** MerchantOutput.authorizationApprovals */
            authorizationApprovals: number;
            /** MerchantOutput.authorizationToApprovalRate */
            authorizationToApprovalRate: number;
            /** MerchantOutput.refundAmount */
            refundAmount: number;
            /** MerchantOutput.salesAmount */
            salesAmount: number;
            /** MerchantOutput.refundPercentage */
            refundPercentage: number;
            /** MerchantOutput.chargeBackCount */
            chargeBackCount: number;
            /** MerchantOutput.chargeBackPercentage */
            chargeBackPercentage: number;
            /** MerchantOutput.interchangeFees */
            interchangeFees: number;
            /** MerchantOutput.serviceFees */
            serviceFees: number;
            /** MerchantOutput.processorFees */
            processorFees: number;
            /** MerchantOutput.feesPercentageNotControlledByBank */
            feesPercentageNotControlledByBank: number;
            /** MerchantOutput.networks */
            networks: {
              /** MerchantOutput.networks.[].type */
              type: "MASTERCARD" | "VISA" | "AMEX" | "MISCELLANEOUS";
              /** MerchantOutput.networks.[].dollarsProcessed */
              dollarsProcessed: number;
              /** MerchantOutput.networks.[].interchangeFees */
              interchangeFees: number;
              /** MerchantOutput.networks.[].networkCharges */
              networkCharges: number;
              /** MerchantOutput.networks.[].feePercentage */
              feePercentage: number;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** MerchantReport not found */
            error: "MerchantReport not found";
          };
        };
      };
    };
  };
  getLessonProgress: {
    parameters: {
      path: {
        lessonId: number;
      };
      query: {
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonProgressAttr.id */
            id: number;
            /** LessonProgressAttr.status */
            status: "in_progress" | "completed" | "failed" | "pending";
            started_at?: components["schemas"]["Date"];
            /**
             * LessonProgressAttr.completed_at
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            completed_at?: components["schemas"]["Date"] | null;
            last_attempted_at: components["schemas"]["Date"];
            /** LessonProgressAttr.progress */
            progress?: number | null;
            /** LessonProgressAttr.points */
            points?: number | null;
            /** LessonProgressAttr.score */
            score?: number | null;
            /** LessonProgressAttr.page_id */
            page_id?: number | null;
            /** LessonProgressAttr.lesson_id */
            lesson_id: number;
            /**
             * LessonProgressAttr.user_id
             * Format: uuid
             */
            user_id: string;
            /**
             * LessonProgressAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** LessonProgress not found */
            error: "LessonProgress not found";
          };
        };
      };
    };
  };
  continueLesson: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonProgressAttr.id */
            id: number;
            /** LessonProgressAttr.status */
            status: "in_progress" | "completed" | "failed" | "pending";
            started_at?: components["schemas"]["Date"];
            /**
             * LessonProgressAttr.completed_at
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            completed_at?: components["schemas"]["Date"] | null;
            last_attempted_at: components["schemas"]["Date"];
            /** LessonProgressAttr.progress */
            progress?: number | null;
            /** LessonProgressAttr.points */
            points?: number | null;
            /** LessonProgressAttr.score */
            score?: number | null;
            /** LessonProgressAttr.page_id */
            page_id?: number | null;
            /** LessonProgressAttr.lesson_id */
            lesson_id: number;
            /**
             * LessonProgressAttr.user_id
             * Format: uuid
             */
            user_id: string;
            /**
             * LessonProgressAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            error: "Lesson not found" | "LessonPage not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * LessonProgressUpsertBiz.page_id
           * @description When `null`, it will indicate user has requested a new lesson if user
           * has completed a previous lesson.
           */
          page_id: number | null;
        };
      };
    };
  };
  /** To be deprecated */
  checkPage: {
    parameters: {
      path: {
        lessonId: number;
        pageId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Lesson not found */
            error: "Lesson not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          answer: string;
        };
      };
    };
  };
  upsertLessonPages: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonPageAttr.id */
            id: number;
            /** LessonPageAttr.type */
            type: "video" | "quiz" | "slide" | "quiz_review";
            /** LessonPageAttr.title */
            title?: string;
            /** LessonPageAttr.content */
            content?: string | null;
            /** LessonPageAttr.order */
            order?: number;
            /** LessonPageAttr.videoId */
            videoId?: string | null;
            /**
             * LessonPageAttr.quizId
             * Format: uuid
             */
            quizId?: string | null;
            /** LessonPageAttr.contactAccessible */
            contactAccessible: boolean;
            /** LessonPageAttr.lesson_id */
            lesson_id: number;
            /**
             * LessonPageAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Lesson not found */
            error: "Lesson not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** LessonUpsertBiz.pages */
          pages: {
            /** LessonUpsertBiz.pages.[].type */
            type: "video" | "quiz" | "slide" | "quiz_review";
            /** LessonUpsertBiz.pages.[].order */
            order?: number;
            /** LessonUpsertBiz.pages.[].title */
            title?: string;
            /** LessonUpsertBiz.pages.[].quizId */
            quizId?: string | null;
            /** LessonUpsertBiz.pages.[].content */
            content?: string | null;
            /** LessonUpsertBiz.pages.[].contactAccessible */
            contactAccessible?: boolean;
            /** LessonUpsertBiz.pages.[].videoId */
            videoId?: string | null;
            /** LessonUpsertBiz.pages.[].lesson_id */
            lesson_id: number;
            /** LessonUpsertBiz.pages.[].id */
            id?: number;
          }[];
        };
      };
    };
  };
  /** Toggles a lesson from favorite to not favorite and vice versa */
  toggleFavoriteLesson: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonPreferenceAttr.lessonId */
            lessonId: number;
            /**
             * LessonPreferenceAttr.userId
             * Format: uuid
             */
            userId: string;
            /** LessonPreferenceAttr.isFavorite */
            isFavorite: boolean;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Lesson not found */
            error: "Lesson not found";
          };
        };
      };
    };
  };
  getLessonById: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LessonAttrs"] &
            components["schemas"]["ModelTimestamp"] & {
              /** pages */
              pages: (components["schemas"]["LessonPageAttrs"] &
                components["schemas"]["ModelTimestamp"] & {
                  video?: components["schemas"]["VideoAttr"];
                })[];
              category: components["schemas"]["CategoryAttr"];
            };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Lesson not found */
            error: "Lesson not found";
          };
        };
      };
    };
  };
  updateLessonById: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonAttr.id */
            id: number;
            /** LessonAttr.title */
            title: string;
            /** LessonAttr.content */
            content?: string | null;
            /** LessonAttr.category_id */
            category_id?: number | null;
            /** LessonAttr.max_points */
            max_points?: number | null;
            /** LessonAttr.max_attempts */
            max_attempts?: number | null;
            /** LessonAttr.documents */
            documents?: string | null;
            /** LessonAttr.duration */
            duration?: number | null;
            /** LessonAttr.isPublic */
            isPublic: boolean;
            /** LessonAttr.tags */
            tags?: string | null;
            /** LessonAttr.icon */
            icon?: string | null;
            /** LessonAttr.status */
            status?: string;
            /**
             * LessonAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Lesson not found */
            error: "Lesson not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** LessonModifyBiz.icon */
          icon?: string | null;
          /** LessonModifyBiz.title */
          title?: string;
          /** LessonModifyBiz.status */
          status?: string;
          /** LessonModifyBiz.isPublic */
          isPublic?: boolean;
          /** LessonModifyBiz.category_id */
          category_id?: number | null;
          /** LessonModifyBiz.content */
          content?: string | null;
          /** LessonModifyBiz.max_points */
          max_points?: number | null;
          /** LessonModifyBiz.max_attempts */
          max_attempts?: number | null;
          /** LessonModifyBiz.documents */
          documents?: string | null;
          /** LessonModifyBiz.duration */
          duration?: number | null;
          /** LessonModifyBiz.tags */
          tags?: string | null;
        };
      };
    };
  };
  deleteLessonById: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Lesson not found */
            error: "Lesson not found";
          };
        };
      };
    };
  };
  updateLabel: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            /** Unauthorized */
            error: "Unauthorized";
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Label not found */
            error: "Label not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** LabelModifyBiz.name */
          name?: string;
          /** LabelModifyBiz.type */
          type?: ("contact" | "organization") | null;
          /** LabelModifyBiz.color */
          color?: string;
        };
      };
    };
  };
  removeLabels: {
    parameters: {};
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Label not found */
            error: "Label not found";
          };
        };
      };
    };
  };
  getGroup: {
    parameters: {
      path: {
        groupId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * GroupAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * GroupAttr.parent_id
             * Format: uuid
             */
            parent_id?: string | null;
            /** GroupAttr.name */
            name: string;
            /** GroupAttr.has_sibling_access */
            has_sibling_access: boolean;
            /** GroupAttr.description */
            description?: string | null;
            /** GroupAttr.tenant_id */
            tenant_id: string;
            /**
             * GroupAttr.deleted_on
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deleted_on?: components["schemas"]["Date"] | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Group not found */
            error: "Group not found";
          };
        };
      };
    };
  };
  updateGroup: {
    parameters: {
      path: {
        groupId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * GroupAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * GroupAttr.parent_id
             * Format: uuid
             */
            parent_id?: string | null;
            /** GroupAttr.name */
            name: string;
            /** GroupAttr.has_sibling_access */
            has_sibling_access: boolean;
            /** GroupAttr.description */
            description?: string | null;
            /** GroupAttr.tenant_id */
            tenant_id: string;
            /**
             * GroupAttr.deleted_on
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            deleted_on?: components["schemas"]["Date"] | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Group not found */
            error: "Group not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** GroupModifyBiz.name */
          name?: string;
          /** GroupModifyBiz.description */
          description?: string | null;
          /** GroupModifyBiz.has_sibling_access */
          has_sibling_access?: boolean;
        };
      };
    };
  };
  deleteGroup: {
    parameters: {
      path: {
        groupId: string;
      };
      query: {
        transferId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Group not found */
            error: "Group not found";
          };
        };
      };
    };
  };
  getFieldById: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** FieldAttr.id */
            id?: string;
            /** FieldAttr.key */
            key: string;
            /** FieldAttr.field_type */
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "URL"
              | "CHECKBOX"
              | "EMAIL"
              | "PHONE";
            /** FieldAttr.value_type */
            value_type: "string" | "number" | "boolean" | "object" | "date";
            /** FieldAttr.order */
            order?: number;
            /** FieldAttr.type */
            type:
              | "contact"
              | "deal"
              | "organization"
              | "product"
              | "task"
              | "call"
              | "event";
            /** FieldAttr.tenant_id */
            tenant_id?: string;
            /** FieldAttr.mandatory */
            mandatory?: boolean;
            /** FieldAttr.usedField */
            usedField?: boolean;
            /** FieldAttr.isFixed */
            isFixed?: boolean;
            /** FieldAttr.columnName */
            columnName: string;
            /** FieldAttr.isCustom */
            isCustom?: boolean;
            /** FieldAttr.section */
            section: string;
            /** FieldAttr.preferred */
            preferred?: boolean;
            /** FieldAttr.created_by */
            created_by: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  updateField: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** FieldAttr.id */
            id?: string;
            /** FieldAttr.key */
            key: string;
            /** FieldAttr.field_type */
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "URL"
              | "CHECKBOX"
              | "EMAIL"
              | "PHONE";
            /** FieldAttr.value_type */
            value_type: "string" | "number" | "boolean" | "object" | "date";
            /** FieldAttr.order */
            order?: number;
            /** FieldAttr.type */
            type:
              | "contact"
              | "deal"
              | "organization"
              | "product"
              | "task"
              | "call"
              | "event";
            /** FieldAttr.tenant_id */
            tenant_id?: string;
            /** FieldAttr.mandatory */
            mandatory?: boolean;
            /** FieldAttr.usedField */
            usedField?: boolean;
            /** FieldAttr.isFixed */
            isFixed?: boolean;
            /** FieldAttr.columnName */
            columnName: string;
            /** FieldAttr.isCustom */
            isCustom?: boolean;
            /** FieldAttr.section */
            section: string;
            /** FieldAttr.preferred */
            preferred?: boolean;
            /** FieldAttr.created_by */
            created_by: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** FieldModifyBiz.type */
          type?:
            | "contact"
            | "deal"
            | "organization"
            | "product"
            | "task"
            | "call"
            | "event";
          /** FieldModifyBiz.created_by */
          created_by?: string;
          /** FieldModifyBiz.tenant_id */
          tenant_id?: string;
          /** FieldModifyBiz.order */
          order?: number;
          /** FieldModifyBiz.key */
          key?: string;
          /** FieldModifyBiz.field_type */
          field_type?:
            | "CHAR"
            | "TEXT"
            | "NUMBER"
            | "DATE"
            | "TIME"
            | "CURRENCY"
            | "URL"
            | "CHECKBOX"
            | "EMAIL"
            | "PHONE";
          /** FieldModifyBiz.value_type */
          value_type?: "string" | "number" | "boolean" | "object" | "date";
          /** FieldModifyBiz.mandatory */
          mandatory?: boolean;
          /** FieldModifyBiz.usedField */
          usedField?: boolean;
          /** FieldModifyBiz.isFixed */
          isFixed?: boolean;
          /** FieldModifyBiz.columnName */
          columnName?: string;
          /** FieldModifyBiz.isCustom */
          isCustom?: boolean;
          /** FieldModifyBiz.section */
          section?: string;
          /** FieldModifyBiz.preferred */
          preferred?: boolean;
        };
      };
    };
  };
  deleteField: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  getProductsByDealId: {
    parameters: {
      query: {
        limit: number;
        page: number;
      };
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * DealProductAttr.id
               * Format: uuid
               */
              id: string;
              /**
               * DealProductAttr.product_id
               * Format: uuid
               */
              product_id?: string;
              /** DealProductAttr.quantity */
              quantity?: number;
              /** DealProductAttr.price */
              price?: number;
              /**
               * DealProductAttr.deal_id
               * Format: uuid
               */
              deal_id?: string;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Deal not found */
            error: "Deal not found";
          };
        };
      };
    };
  };
  updateDealsPosition: {
    parameters: {
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          deal_type?: string;
          update_deal: {
            type: string;
            position: number;
            tenant_deal_stage_id: string;
            origin?: number;
            destination?: boolean;
            limit: number;
          }[];
          sales_stage?: string;
        };
      };
    };
  };
  /** Add a(n) deal owner */
  addDealOwner: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
        deal_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            user_id: string;
            deal_id: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  /** Remove a(n) deal owner */
  removeDealOwner: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
        deal_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Owner not found */
            error: "Owner not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  /** Get a deal's owner list */
  getDealOwners: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              user_id: string;
              deal_id: string;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  deleteDeal: {
    parameters: {
      path: {
        deal_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Deal not found */
            error: "Deal not found";
          };
        };
      };
    };
  };
  updateDashboardComponentAnalytic: {
    parameters: {
      path: {
        dashboardId: string;
        componentId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * AnalyticAttr.id
             * Format: uuid
             */
            id: string;
            /** AnalyticAttr.name */
            name: string;
            /** AnalyticAttr.type */
            type:
              | "AssignedUser"
              | "CreatedBy"
              | "Contact"
              | "Course"
              | "CourseProgress"
              | "Deal"
              | "Lesson"
              | "LessonProgress"
              | "Organization"
              | "Category"
              | "DealStage"
              | "Tenant"
              | "TenantDealStage"
              | "User"
              | "Training"
              | "Activities"
              | "Notes"
              | "Product";
            /** AnalyticAttr.relatedTypes */
            relatedTypes: (
              | "AssignedUser"
              | "CreatedBy"
              | "Contact"
              | "Course"
              | "CourseProgress"
              | "Deal"
              | "Lesson"
              | "LessonProgress"
              | "Organization"
              | "Category"
              | "DealStage"
              | "Tenant"
              | "TenantDealStage"
              | "User"
              | "Training"
              | "Activities"
              | "Notes"
              | "Product"
            )[];
            /** AnalyticAttr.displayType */
            displayType:
              | "kpi_standard"
              | "kpi_scorecard"
              | "kpi_growth_index"
              | "kpi_rankings"
              | "kpi_basic"
              | "chart_column"
              | "chart_donut"
              | "chart_pie"
              | "chart_bar"
              | "chart_line"
              | "chart_table"
              | "chart_funnel"
              | "chart_area"
              | "chart_heat";
            /** AnalyticAttr.icon */
            icon: string;
            /**
             * AnalyticAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * AnalyticAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            /** AnalyticAttr.isMulti */
            isMulti: boolean;
            /** AnalyticAttr.dimensions */
            dimensions: string[];
            /** AnalyticAttr.limit */
            limit: number;
            /** AnalyticAttr.measures */
            measures: string[];
            /** AnalyticAttr.order */
            order: [string, "asc" | "desc"][];
            /** AnalyticAttr.segments */
            segments: string[];
            /** AnalyticAttr.timeDimensions */
            timeDimensions: []
              | [
                  {
                    dateRange: components["schemas"]["AnalyticDateRange"];
                    /** AnalyticAttr.timeDimensions.0.dimension */
                    dimension: string;
                    granularity?: components["schemas"]["AnalyticGranularity"];
                  }
                ]
              | [
                  {
                    compareDateRange: components["schemas"]["AnalyticCompareDateRange"];
                    /** AnalyticAttr.timeDimensions.0.dimension */
                    dimension: string;
                    granularity?: components["schemas"]["AnalyticGranularity"];
                  }
                ];
            /** AnalyticAttr.filters */
            filters: (
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "set";
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notSet";
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "equals";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notEquals";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "contains";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notContains";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "startsWith";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "endsWith";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "gt";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "gte";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "lt";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "lte";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "beforeDate";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "afterDate";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
            )[];
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            error:
              | "Dashboard not found"
              | "Component not found"
              | "Analytic not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** AnalyticModifyBiz.name */
          name?: string;
          /** AnalyticModifyBiz.type */
          type?:
            | "AssignedUser"
            | "CreatedBy"
            | "Contact"
            | "Course"
            | "CourseProgress"
            | "Deal"
            | "Lesson"
            | "LessonProgress"
            | "Organization"
            | "Category"
            | "DealStage"
            | "Tenant"
            | "TenantDealStage"
            | "User"
            | "Training"
            | "Activities"
            | "Notes"
            | "Product";
          /** AnalyticModifyBiz.filters */
          filters?: (
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "set";
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "notSet";
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "equals";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "notEquals";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "contains";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "notContains";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "startsWith";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "endsWith";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "gt";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "gte";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "lt";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "lte";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "beforeDate";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
            | {
                /** AnalyticModifyBiz.filters.[].member */
                member: string;
                /** AnalyticModifyBiz.filters.[].operator */
                operator: "afterDate";
                /** AnalyticModifyBiz.filters.[].values */
                values: string[];
              }
          )[];
          /** AnalyticModifyBiz.isMulti */
          isMulti?: boolean;
          /** AnalyticModifyBiz.dimensions */
          dimensions?: string[];
          /** AnalyticModifyBiz.limit */
          limit?: number;
          /** AnalyticModifyBiz.measures */
          measures?: string[];
          order?: components["schemas"]["AnalyticOrder"];
          /** AnalyticModifyBiz.segments */
          segments?: string[];
          timeDimensions?: components["schemas"]["AnalyticTimeDimension"];
          /** AnalyticModifyBiz.relatedTypes */
          relatedTypes?: (
            | "AssignedUser"
            | "CreatedBy"
            | "Contact"
            | "Course"
            | "CourseProgress"
            | "Deal"
            | "Lesson"
            | "LessonProgress"
            | "Organization"
            | "Category"
            | "DealStage"
            | "Tenant"
            | "TenantDealStage"
            | "User"
            | "Training"
            | "Activities"
            | "Notes"
            | "Product"
          )[];
          /** AnalyticModifyBiz.displayType */
          displayType?:
            | "kpi_standard"
            | "kpi_scorecard"
            | "kpi_growth_index"
            | "kpi_rankings"
            | "kpi_basic"
            | "chart_column"
            | "chart_donut"
            | "chart_pie"
            | "chart_bar"
            | "chart_line"
            | "chart_table"
            | "chart_funnel"
            | "chart_area"
            | "chart_heat";
          /** AnalyticModifyBiz.icon */
          icon?: string;
        };
      };
    };
  };
  updateDashboardComponent: {
    parameters: {
      path: {
        dashboardId: string;
        componentId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json":
            | {
                /** DashboardBizUpdateComponent.component */
                component: {
                  /** id */
                  id: string;
                  /** name */
                  name: string;
                  /** enabled */
                  enabled: boolean;
                  /** analyticId */
                  analyticId?: string | null;
                  /** componentTextId */
                  componentTextId?: string | null;
                  /** createdById */
                  createdById: string;
                  /** tenantId */
                  tenantId: string;
                } & components["schemas"]["Timestamp"];
              }
            | {
                /** DashboardBizUpdateComponent.component */
                component?: unknown;
              };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Dashboard not found */
            error: "Dashboard not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          component?: components["schemas"]["ComponentModifyBiz"];
        };
      };
    };
  };
  deleteDashboardComponent: {
    parameters: {
      path: {
        dashboardId: string;
        componentId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            error: "Dashboard not found" | "Component not found";
          };
        };
      };
    };
  };
  getDashboardComponents: {
    parameters: {
      path: {
        dashboardId: string;
      };
      query: {
        page: number;
        limit: number;
        source?: "rpmg" | "spGlobal" | "fasterPayments" | "custom";
        enabled?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** DashboardBizGetComponentsById.data */
            data: ({
              /** dashboardId */
              dashboardId: string;
              /** componentId */
              componentId: string;
            } & components["schemas"]["Timestamp"] & {
                /** component */
                component: {
                  /** id */
                  id: string;
                  /** name */
                  name: string;
                  /** enabled */
                  enabled: boolean;
                  /** analyticId */
                  analyticId?: string | null;
                  /** componentTextId */
                  componentTextId?: string | null;
                  /** createdById */
                  createdById: string;
                  /** tenantId */
                  tenantId: string;
                } & components["schemas"]["Timestamp"] & {
                    analytic: components["schemas"]["AnalyticAttr"];
                  };
              })[];
            /** DashboardBizGetComponentsById.pagination */
            pagination: {
              /** DashboardBizGetComponentsById.pagination.limit */
              limit: number;
              /** DashboardBizGetComponentsById.pagination.page */
              page: number;
              /** DashboardBizGetComponentsById.pagination.totalPages */
              totalPages: number;
              /** DashboardBizGetComponentsById.pagination.count */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Dashboard not found */
            error: "Dashboard not found";
          };
        };
      };
    };
  };
  /** Component must be created using at least with one analytic or componentText */
  createDashboardComponent: {
    parameters: {
      path: {
        dashboardId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ComponentAttr.id
             * Format: uuid
             */
            id: string;
            /** ComponentAttr.name */
            name: string;
            /** ComponentAttr.enabled */
            enabled: boolean;
            /**
             * ComponentAttr.analyticId
             * Format: uuid
             */
            analyticId?: string | null;
            /**
             * ComponentAttr.componentTextId
             * Format: uuid
             */
            componentTextId?: string | null;
            /**
             * ComponentAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * ComponentAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            /** analytic or componentText required */
            error: "analytic or componentText required";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Dashboard not found */
            error: "Dashboard not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          analytic?: components["schemas"]["AnalyticCreateBiz"];
          /** DashboardAddComponentBiz.componentText */
          componentText?: {
            /** DashboardAddComponentBiz.componentText.icon */
            icon?: string | null;
            /** DashboardAddComponentBiz.componentText.source */
            source?: ("rpmg" | "spGlobal" | "fasterPayments" | "custom") | null;
            /** DashboardAddComponentBiz.componentText.position */
            position?: ("left" | "right" | "center" | "top" | "bottom") | null;
            /** DashboardAddComponentBiz.componentText.iconLabel */
            iconLabel?: string | null;
            /** DashboardAddComponentBiz.componentText.type */
            type:
              | "donut"
              | "calendar"
              | "percentText"
              | "iconText"
              | "donutSelection"
              | "bar";
            /** DashboardAddComponentBiz.componentText.text */
            text: string;
            request?: components["schemas"]["ComponentTextRequest"];
          };
          /** DashboardAddComponentBiz.component */
          component: {
            /** DashboardAddComponentBiz.component.name */
            name: string;
            /** DashboardAddComponentBiz.component.enabled */
            enabled?: boolean;
            /** DashboardAddComponentBiz.component.analyticId */
            analyticId?: string;
            /** DashboardAddComponentBiz.component.componentTextId */
            componentTextId?: string;
          };
        };
      };
    };
  };
  getDashboard: {
    parameters: {
      path: {
        dashboardId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * DashboardAttr.id
             * Format: uuid
             */
            id: string;
            /** DashboardAttr.name */
            name: string;
            /** DashboardAttr.type */
            type: "dashboard" | "insight";
            /** DashboardAttr.enabled */
            enabled: boolean;
            /**
             * DashboardAttr.organizationId
             * Format: uuid
             */
            organizationId?: string | null;
            /**
             * DashboardAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * DashboardAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Dashboard not found */
            error: "Dashboard not found";
          };
        };
      };
    };
  };
  updateDashboard: {
    parameters: {
      path: {
        dashboardId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * DashboardAttr.id
             * Format: uuid
             */
            id: string;
            /** DashboardAttr.name */
            name: string;
            /** DashboardAttr.type */
            type: "dashboard" | "insight";
            /** DashboardAttr.enabled */
            enabled: boolean;
            /**
             * DashboardAttr.organizationId
             * Format: uuid
             */
            organizationId?: string | null;
            /**
             * DashboardAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * DashboardAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Dashboard not found */
            error: "Dashboard not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** DashboardModifyBiz.name */
          name?: string;
        };
      };
    };
  };
  deleteDashboard: {
    parameters: {
      path: {
        dashboardId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Dashboard not found */
            error: "Dashboard not found";
          };
        };
      };
    };
  };
  submitCourseQuiz: {
    parameters: {
      path: {
        course_id: string;
        quizId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * QuizSubmissionAttr.quizSubmissionId
             * Format: uuid
             */
            quizSubmissionId: string;
            /**
             * QuizSubmissionAttr.userId
             * Format: uuid
             */
            userId: string;
            /**
             * QuizSubmissionAttr.quizId
             * Format: uuid
             */
            quizId: string;
            /**
             * QuizSubmissionAttr.score
             * @description Score is not calculated until all questions have been answered.
             */
            score?: number | null;
            /**
             * QuizSubmissionAttr.completedAt
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            completedAt?: components["schemas"]["Date"] | null;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            error: "Course not found" | "Quiz not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** QuizCreateSubmissionBiz.answers */
          answers: {
            /** QuizCreateSubmissionBiz.answers.[].quizQuestionId */
            quizQuestionId: string;
            /** QuizCreateSubmissionBiz.answers.[].id */
            id: string;
          }[];
        };
      };
    };
  };
  getCourseProgress: {
    parameters: {
      path: {
        course_id: string;
      };
      query: {
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** CourseProgressAttr.id */
            id: string;
            /** CourseProgressAttr.status */
            status: "in_progress" | "completed" | "failed";
            started_at?: components["schemas"]["Date"];
            /**
             * CourseProgressAttr.completed_at
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            completed_at?: components["schemas"]["Date"] | null;
            last_attempted_at: components["schemas"]["Date"];
            /** CourseProgressAttr.progress */
            progress?: number | null;
            /** CourseProgressAttr.points */
            points?: number | null;
            /** CourseProgressAttr.score */
            score?: number | null;
            /** CourseProgressAttr.courseContentId */
            courseContentId?: string | null;
            /**
             * CourseProgressAttr.course_id
             * Format: uuid
             */
            course_id: string;
            /**
             * CourseProgressAttr.user_id
             * Format: uuid
             */
            user_id: string;
            /**
             * CourseProgressAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** CourseProgress not found */
            error: "CourseProgress not found";
          };
        };
      };
    };
  };
  continueCourse: {
    parameters: {
      path: {
        course_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** CourseProgressAttr.id */
            id: string;
            /** CourseProgressAttr.status */
            status: "in_progress" | "completed" | "failed";
            started_at?: components["schemas"]["Date"];
            /**
             * CourseProgressAttr.completed_at
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            completed_at?: components["schemas"]["Date"] | null;
            last_attempted_at: components["schemas"]["Date"];
            /** CourseProgressAttr.progress */
            progress?: number | null;
            /** CourseProgressAttr.points */
            points?: number | null;
            /** CourseProgressAttr.score */
            score?: number | null;
            /** CourseProgressAttr.courseContentId */
            courseContentId?: string | null;
            /**
             * CourseProgressAttr.course_id
             * Format: uuid
             */
            course_id: string;
            /**
             * CourseProgressAttr.user_id
             * Format: uuid
             */
            user_id: string;
            /**
             * CourseProgressAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * CourseProgressUpsertBiz.courseContentId
           * @description When `null`, it will indicate user has requested a new lesson if user
           * has completed a previous course.
           */
          courseContentId?: string | null;
        };
      };
    };
  };
  getCourseLessonProgress: {
    parameters: {
      path: {
        course_id: string;
      };
      query: {
        self?: boolean;
        favorites?: components["schemas"]["AssociationRestriction"];
        lessonId?: number | number[];
        lessons?: components["schemas"]["AssociationRestriction"];
        order?: components["schemas"]["Order"][];
        progress?: components["schemas"]["AssociationRestriction"];
        search?: string;
        status?:
          | components["schemas"]["CourseQueryStatusQuery"]
          | components["schemas"]["CourseQueryStatusQuery"][];
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** LessonProgressAttr.id */
            id: number;
            /** LessonProgressAttr.status */
            status: "in_progress" | "completed" | "failed" | "pending";
            started_at?: components["schemas"]["Date"];
            /**
             * LessonProgressAttr.completed_at
             * Format: date-time
             * @description ISO date time
             * @example 2006-01-02T15:04:05.000Z
             */
            completed_at?: components["schemas"]["Date"] | null;
            last_attempted_at: components["schemas"]["Date"];
            /** LessonProgressAttr.progress */
            progress?: number | null;
            /** LessonProgressAttr.points */
            points?: number | null;
            /** LessonProgressAttr.score */
            score?: number | null;
            /** LessonProgressAttr.page_id */
            page_id?: number | null;
            /** LessonProgressAttr.lesson_id */
            lesson_id: number;
            /**
             * LessonProgressAttr.user_id
             * Format: uuid
             */
            user_id: string;
            /**
             * LessonProgressAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          }[];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
  };
  /** Toggles a course from favorite to not favorite and vice versa */
  toggleFavoriteCourse: {
    parameters: {
      path: {
        course_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * CoursePreferenceAttr.courseId
             * Format: uuid
             */
            courseId: string;
            /**
             * CoursePreferenceAttr.userId
             * Format: uuid
             */
            userId: string;
            /** CoursePreferenceAttr.isFavorite */
            isFavorite: boolean;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
  };
  getCourseContents: {
    parameters: {
      path: {
        course_id: string;
      };
      query: {
        limit: number;
        page: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * CourseContentAttr.courseContentId
               * Format: uuid
               */
              courseContentId: string;
              /**
               * CourseContentAttr.courseId
               * Format: uuid
               */
              courseId: string;
              /**
               * CourseContentAttr.quizId
               * Format: uuid
               */
              quizId?: string | null;
              /** CourseContentAttr.order */
              order: number;
              /**
               * CourseContentAttr.tenantId
               * Format: uuid
               */
              tenantId: string;
              createdAt: components["schemas"]["Date"];
              updatedAt: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
  };
  createCourseContent: {
    parameters: {
      path: {
        course_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * CourseContentAttr.courseContentId
             * Format: uuid
             */
            courseContentId: string;
            /**
             * CourseContentAttr.courseId
             * Format: uuid
             */
            courseId: string;
            /**
             * CourseContentAttr.quizId
             * Format: uuid
             */
            quizId?: string | null;
            /** CourseContentAttr.order */
            order: number;
            /**
             * CourseContentAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** CourseContentCreateQuizBiz.order */
          order: number;
          /** CourseContentCreateQuizBiz.quiz */
          quiz: {
            /** CourseContentCreateQuizBiz.quiz.maxAttempts */
            maxAttempts?: number | null;
            /** CourseContentCreateQuizBiz.quiz.questions */
            questions: components["schemas"]["QuizQuestionCreateBiz"][];
          };
        };
      };
    };
  };
  getCourseById: {
    parameters: {
      path: {
        course_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * CourseAttr.id
             * Format: uuid
             */
            id: string;
            /** CourseAttr.name */
            name?: string | null;
            /** CourseAttr.description */
            description?: string | null;
            /** CourseAttr.status */
            status?: string;
            /** CourseAttr.is_learning_path */
            is_learning_path?: boolean;
            /** CourseAttr.isPublic */
            isPublic: boolean;
            /** CourseAttr.deleted */
            deleted?: boolean;
            /** CourseAttr.category_id */
            category_id?: number | null;
            /** CourseAttr.badge_id */
            badge_id?: string | null;
            /** CourseAttr.tenant_id */
            tenant_id: string;
            /** CourseAttr.categoryIds */
            categoryIds?: number[];
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
  };
  deleteCourseById: {
    parameters: {
      path: {
        course_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Course not found */
            error: "Course not found";
          };
        };
      };
    };
  };
  /** Get a(n) contacts' field list */
  getContactsField: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            value_type: "number" | "string" | "boolean" | "date" | "object";
            key: string;
            field_type:
              | "CHAR"
              | "TEXT"
              | "NUMBER"
              | "DATE"
              | "TIME"
              | "CURRENCY"
              | "EMAIL"
              | "URL"
              | "PHONE"
              | "CHECKBOX";
            order: number;
            /** @description Total contacts that have used this field */
            total_contacts: number;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Remove a(n) contact field */
  removeContactsField: {
    parameters: {
      path: {
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Add a(n) contact owner */
  addContactOwner: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
        contact_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            user_id: string;
            contact_id: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  /** Remove a(n) contact owner */
  removeContactOwner: {
    parameters: {
      path: {
        user_id: string | ("self" | "me");
        contact_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Owner not found */
            error: "Owner not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  /** Get a contact's owner list */
  getContactOwners: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              user_id: string;
              contact_id: string;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  contactIsFollower: {
    parameters: {
      path: {
        contact_id: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            isFollower: boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  startFollowingContact: {
    parameters: {
      path: {
        contact_id: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  stopFollowingContact: {
    parameters: {
      path: {
        contact_id: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {};
      };
    };
  };
  getContactFollowers: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              user_id: string;
              contact_id: string;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Get a contact's field */
  getContactField: {
    parameters: {
      path: {
        contact_id: string;
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            contact_id: string;
            field_id: string;
            value: string | number | boolean;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Remove a(n) contact field */
  removeContactField: {
    parameters: {
      path: {
        contact_id: string;
        field_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
  };
  /** Get a contact's field list */
  getContactFields: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            data: {
              id: string;
              created_by: string;
              contact_id: string;
              field_id: string;
              value: string | number | boolean;
            }[];
            /** @description Pagination response object */
            pagination: {
              /** @description Pagination limit */
              limit: number;
              /** @description Current pagination page */
              page: number;
              /** @description Total pagination pages */
              totalPages: number;
              /** @description Total pagination size */
              count: number;
            };
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  /** Upsert a(n) contact field */
  upsertContactField: {
    parameters: {
      path: {
        contact_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            id: string;
            created_by: string;
            contact_id: string;
            field_id: string;
            value: string | number | boolean;
          };
        };
      };
      /** Invalid input provided */
      400: {
        content: {
          "application/json": {
            /** Invalid value provided for specified field */
            error: "Invalid value provided for specified field";
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Field not found */
            error: "Field not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          field_id: string;
          value: string | number | boolean;
        };
      };
    };
  };
  getComponent: {
    parameters: {
      path: {
        componentId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ComponentAttr.id
             * Format: uuid
             */
            id: string;
            /** ComponentAttr.name */
            name: string;
            /** ComponentAttr.enabled */
            enabled: boolean;
            /**
             * ComponentAttr.analyticId
             * Format: uuid
             */
            analyticId?: string | null;
            /**
             * ComponentAttr.componentTextId
             * Format: uuid
             */
            componentTextId?: string | null;
            /**
             * ComponentAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * ComponentAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Component not found */
            error: "Component not found";
          };
        };
      };
    };
  };
  updateComponent: {
    parameters: {
      path: {
        componentId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ComponentAttr.id
             * Format: uuid
             */
            id: string;
            /** ComponentAttr.name */
            name: string;
            /** ComponentAttr.enabled */
            enabled: boolean;
            /**
             * ComponentAttr.analyticId
             * Format: uuid
             */
            analyticId?: string | null;
            /**
             * ComponentAttr.componentTextId
             * Format: uuid
             */
            componentTextId?: string | null;
            /**
             * ComponentAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * ComponentAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Component not found */
            error: "Component not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** ComponentModifyBiz.name */
          name: string;
          /** ComponentModifyBiz.enabled */
          enabled: boolean;
        };
      };
    };
  };
  getCategoryVideos: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * VideoAttr.videoId
               * Format: uuid
               */
              videoId: string;
              /** VideoAttr.externalUrl */
              externalUrl: string | null;
              /** VideoAttr.muxUploadId */
              muxUploadId: string | null;
              /** VideoAttr.muxUploadUrl */
              muxUploadUrl: string | null;
              /**
               * VideoAttr.createdById
               * Format: uuid
               */
              createdById: string;
              /**
               * VideoAttr.tenantId
               * Format: uuid
               */
              tenantId: string;
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Category not found */
            error: "Category not found";
          };
        };
      };
    };
  };
  getCategoryLessons: {
    parameters: {
      path: {
        categoryId: number;
      };
      query: {
        limit: number;
        page: number;
        categoryIds?: number[];
        favorites?: components["schemas"]["AssociationRestriction"];
        order?: components["schemas"]["Order"][];
        progress?: components["schemas"]["AssociationRestriction"];
        search?: string;
        random?: boolean;
        self?: boolean;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /** LessonAttr.id */
              id: number;
              /** LessonAttr.title */
              title: string;
              /** LessonAttr.content */
              content?: string | null;
              /** LessonAttr.category_id */
              category_id?: number | null;
              /** LessonAttr.max_points */
              max_points?: number | null;
              /** LessonAttr.max_attempts */
              max_attempts?: number | null;
              /** LessonAttr.documents */
              documents?: string | null;
              /** LessonAttr.duration */
              duration?: number | null;
              /** LessonAttr.isPublic */
              isPublic: boolean;
              /** LessonAttr.tags */
              tags?: string | null;
              /** LessonAttr.icon */
              icon?: string | null;
              /** LessonAttr.status */
              status?: string;
              /**
               * LessonAttr.tenant_id
               * Format: uuid
               */
              tenant_id: string;
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Category not found */
            error: "Category not found";
          };
        };
      };
    };
  };
  getCategoryCourses: {
    parameters: {
      query: {
        page: number;
        limit: number;
        categoryIds?: number[];
        favorites?: components["schemas"]["AssociationRestriction"];
        order?: components["schemas"]["Order"][];
        progress?: components["schemas"]["AssociationRestriction"];
        search?: string;
        self?: boolean;
      };
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["PaginationResponse"];
            data: {
              /**
               * CourseAttr.id
               * Format: uuid
               */
              id: string;
              /** CourseAttr.name */
              name?: string | null;
              /** CourseAttr.description */
              description?: string | null;
              /** CourseAttr.status */
              status?: string;
              /** CourseAttr.is_learning_path */
              is_learning_path?: boolean;
              /** CourseAttr.isPublic */
              isPublic: boolean;
              /** CourseAttr.deleted */
              deleted?: boolean;
              /** CourseAttr.category_id */
              category_id?: number | null;
              /** CourseAttr.badge_id */
              badge_id?: string | null;
              /** CourseAttr.tenant_id */
              tenant_id: string;
              /** CourseAttr.categoryIds */
              categoryIds?: number[];
              created_at: components["schemas"]["Date"];
              updated_at: components["schemas"]["Date"];
            }[];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
  };
  getCategory: {
    parameters: {
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** id */
            id: number;
            /** tenant_id */
            tenant_id: string;
            /** title */
            title?: string | null;
            /** description */
            description?: string | null;
            /** status */
            status?: string | null;
            /** logo */
            logo?: string | null;
            /** icon */
            icon?: string | null;
            /** position */
            position?: number | null;
          } & components["schemas"]["ModelTimestamp"] & {
              /** isPublic */
              isPublic: boolean;
              /** totalCourses */
              totalCourses: number;
              /** totalLessons */
              totalLessons: number;
            };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Category not found */
            error: "Category not found";
          };
        };
      };
    };
  };
  updateCategory: {
    parameters: {
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** CategoryAttr.id */
            id: number;
            /**
             * CategoryAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** CategoryAttr.title */
            title?: string | null;
            /** CategoryAttr.description */
            description?: string | null;
            /** CategoryAttr.status */
            status?: string | null;
            /** CategoryAttr.logo */
            logo?: string | null;
            /** CategoryAttr.icon */
            icon?: string | null;
            /** CategoryAttr.position */
            position?: number | null;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Category not found */
            error: "Category not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** CategoryModifyBiz.title */
          title: string;
          /** CategoryModifyBiz.logo */
          logo?: string | null;
          /** CategoryModifyBiz.icon */
          icon?: string | null;
          /** CategoryModifyBiz.description */
          description?: string | null;
        };
      };
    };
  };
  deleteCategory: {
    parameters: {
      path: {
        categoryId: number;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Category not found */
            error: "Category not found";
          };
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": {
            error:
              | "Category is assigned to lessons"
              | "Category is assigned to courses";
          };
        };
      };
    };
  };
  getBadge: {
    parameters: {
      path: {
        badgeId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * BadgeAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * BadgeAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** BadgeAttr.name */
            name?: string | null;
            /** BadgeAttr.description */
            description?: string | null;
            /** BadgeAttr.status */
            status?: string | null;
            /** BadgeAttr.badge_url */
            badge_url?: string | null;
            /** BadgeAttr.deleted */
            deleted: boolean;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Badge not found */
            error: "Badge not found";
          };
        };
      };
    };
  };
  updateBadge: {
    parameters: {
      path: {
        badgeId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * BadgeAttr.id
             * Format: uuid
             */
            id: string;
            /**
             * BadgeAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            /** BadgeAttr.name */
            name?: string | null;
            /** BadgeAttr.description */
            description?: string | null;
            /** BadgeAttr.status */
            status?: string | null;
            /** BadgeAttr.badge_url */
            badge_url?: string | null;
            /** BadgeAttr.deleted */
            deleted: boolean;
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Badge not found */
            error: "Badge not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** BadgeModifyBiz.name */
          name?: string | null;
          /** BadgeModifyBiz.description */
          description?: string | null;
          /** BadgeModifyBiz.status */
          status?: string | null;
          /** BadgeModifyBiz.badge_url */
          badge_url?: string | null;
        };
      };
    };
  };
  deleteBadge: {
    parameters: {
      path: {
        badgeId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Badge not found */
            error: "Badge not found";
          };
        };
      };
    };
  };
  getAvatar: {
    parameters: {
      path: {
        avatar_id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** @description Signed image URL */
            url?: string;
            /** @description ISO date of when avatar link expires */
            expiry?: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
    };
  };
  getAnalytic: {
    parameters: {
      path: {
        analyticId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * AnalyticAttr.id
             * Format: uuid
             */
            id: string;
            /** AnalyticAttr.name */
            name: string;
            /** AnalyticAttr.type */
            type:
              | "AssignedUser"
              | "CreatedBy"
              | "Contact"
              | "Course"
              | "CourseProgress"
              | "Deal"
              | "Lesson"
              | "LessonProgress"
              | "Organization"
              | "Category"
              | "DealStage"
              | "Tenant"
              | "TenantDealStage"
              | "User"
              | "Training"
              | "Activities"
              | "Notes"
              | "Product";
            /** AnalyticAttr.relatedTypes */
            relatedTypes: (
              | "AssignedUser"
              | "CreatedBy"
              | "Contact"
              | "Course"
              | "CourseProgress"
              | "Deal"
              | "Lesson"
              | "LessonProgress"
              | "Organization"
              | "Category"
              | "DealStage"
              | "Tenant"
              | "TenantDealStage"
              | "User"
              | "Training"
              | "Activities"
              | "Notes"
              | "Product"
            )[];
            /** AnalyticAttr.displayType */
            displayType:
              | "kpi_standard"
              | "kpi_scorecard"
              | "kpi_growth_index"
              | "kpi_rankings"
              | "kpi_basic"
              | "chart_column"
              | "chart_donut"
              | "chart_pie"
              | "chart_bar"
              | "chart_line"
              | "chart_table"
              | "chart_funnel"
              | "chart_area"
              | "chart_heat";
            /** AnalyticAttr.icon */
            icon: string;
            /**
             * AnalyticAttr.createdById
             * Format: uuid
             */
            createdById: string;
            /**
             * AnalyticAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
            /** AnalyticAttr.isMulti */
            isMulti: boolean;
            /** AnalyticAttr.dimensions */
            dimensions: string[];
            /** AnalyticAttr.limit */
            limit: number;
            /** AnalyticAttr.measures */
            measures: string[];
            /** AnalyticAttr.order */
            order: [string, "asc" | "desc"][];
            /** AnalyticAttr.segments */
            segments: string[];
            /** AnalyticAttr.timeDimensions */
            timeDimensions: []
              | [
                  {
                    dateRange: components["schemas"]["AnalyticDateRange"];
                    /** AnalyticAttr.timeDimensions.0.dimension */
                    dimension: string;
                    granularity?: components["schemas"]["AnalyticGranularity"];
                  }
                ]
              | [
                  {
                    compareDateRange: components["schemas"]["AnalyticCompareDateRange"];
                    /** AnalyticAttr.timeDimensions.0.dimension */
                    dimension: string;
                    granularity?: components["schemas"]["AnalyticGranularity"];
                  }
                ];
            /** AnalyticAttr.filters */
            filters: (
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "set";
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notSet";
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "equals";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notEquals";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "contains";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "notContains";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "startsWith";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "endsWith";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "gt";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "gte";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "lt";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "lte";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "beforeDate";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
              | {
                  /** AnalyticAttr.filters.[].member */
                  member: string;
                  /** AnalyticAttr.filters.[].operator */
                  operator: "afterDate";
                  /** AnalyticAttr.filters.[].values */
                  values: string[];
                }
            )[];
            createdAt: components["schemas"]["Date"];
            updatedAt: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Analytic not found */
            error: "Analytic not found";
          };
        };
      };
    };
  };
  getActivityRequest: {
    parameters: {
      path: {
        activityRequestId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ActivityRequestAttr.activityRequestId
             * Format: uuid
             */
            activityRequestId: string;
            /**
             * ActivityRequestAttr.organizationId
             * Format: uuid
             */
            organizationId: string;
            /**
             * ActivityRequestAttr.availability
             * @description This is the available time of the contact, not the owner. Availability can
             * span across multiple days and multiple friendly time ranges. i.e. a MWF with
             * morning and afternoon.
             */
            availability: {
              /** ActivityRequestAttr.availability.days */
              days: (
                | "monday"
                | "tuesday"
                | "wednesday"
                | "thursday"
                | "friday"
                | "saturday"
                | "sunday"
              )[];
              /** ActivityRequestAttr.availability.timePeriods */
              timePeriods: ("morning" | "afternoon" | "evening")[];
            };
            /** ActivityRequestAttr.notes */
            notes?: string | null;
            /**
             * ActivityRequestAttr.createdByContactId
             * Format: uuid
             */
            createdByContactId: string;
            /**
             * ActivityRequestAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity Request not found */
            error: "Activity Request not found";
          };
        };
      };
    };
  };
  updateActivityRequest: {
    parameters: {
      path: {
        activityRequestId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ActivityRequestAttr.activityRequestId
             * Format: uuid
             */
            activityRequestId: string;
            /**
             * ActivityRequestAttr.organizationId
             * Format: uuid
             */
            organizationId: string;
            /**
             * ActivityRequestAttr.availability
             * @description This is the available time of the contact, not the owner. Availability can
             * span across multiple days and multiple friendly time ranges. i.e. a MWF with
             * morning and afternoon.
             */
            availability: {
              /** ActivityRequestAttr.availability.days */
              days: (
                | "monday"
                | "tuesday"
                | "wednesday"
                | "thursday"
                | "friday"
                | "saturday"
                | "sunday"
              )[];
              /** ActivityRequestAttr.availability.timePeriods */
              timePeriods: ("morning" | "afternoon" | "evening")[];
            };
            /** ActivityRequestAttr.notes */
            notes?: string | null;
            /**
             * ActivityRequestAttr.createdByContactId
             * Format: uuid
             */
            createdByContactId: string;
            /**
             * ActivityRequestAttr.tenantId
             * Format: uuid
             */
            tenantId: string;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity Request not found */
            error: "Activity Request not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** ActivityRequestModifyBiz.notes */
          notes?: string | null;
          /**
           * ActivityRequestModifyBiz.availability
           * @description This is the available time of the contact, not the owner. Availability can
           * span across multiple days and multiple friendly time ranges. i.e. a MWF with
           * morning and afternoon.
           */
          availability?: {
            /** ActivityRequestModifyBiz.availability.days */
            days: (
              | "monday"
              | "tuesday"
              | "wednesday"
              | "thursday"
              | "friday"
              | "saturday"
              | "sunday"
            )[];
            /** ActivityRequestModifyBiz.availability.timePeriods */
            timePeriods: ("morning" | "afternoon" | "evening")[];
          };
        };
      };
    };
  };
  deleteActivityRequest: {
    parameters: {
      path: {
        activityRequestId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Unauthorized */
      403: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "You don't have permission to access this"
                | "Unauthorized";
              extensions?: {
                code?: "FORBIDDEN";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity Request not found */
            error: "Activity Request not found";
          };
        };
      };
    };
  };
  deleteActivityOwner: {
    parameters: {
      path: {
        activityId: string;
        user_id: string | ("self" | "me");
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** ActivityOwner not found */
            error: "ActivityOwner not found";
          };
        };
      };
    };
  };
  completeActivity: {
    parameters: {
      path: {
        activityId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ActivityAttr.id
             * Format: uuid
             */
            id: string;
            /** ActivityAttr.name */
            name: string;
            /** ActivityAttr.type */
            type: string;
            /**
             * ActivityAttr.assigned_user_id
             * Format: uuid
             */
            assigned_user_id: string;
            /**
             * ActivityAttr.modified_user_id
             * Format: uuid
             */
            modified_user_id: string;
            /**
             * ActivityAttr.created_by
             * Format: uuid
             */
            created_by: string;
            /**
             * ActivityAttr.organization_id
             * Format: uuid
             */
            organization_id?: string;
            /**
             * ActivityAttr.deal_id
             * Format: uuid
             */
            deal_id?: string;
            /** ActivityAttr.contact_id */
            contact_id?: string;
            start_date: components["schemas"]["Date"];
            end_date: components["schemas"]["Date"];
            /** ActivityAttr.guests */
            guests: string;
            /** ActivityAttr.location */
            location?: string;
            /** ActivityAttr.conference_link */
            conference_link?: string;
            /** ActivityAttr.description */
            description?: string;
            /** ActivityAttr.free_busy */
            free_busy: string;
            /** ActivityAttr.notes */
            notes?: string;
            /** ActivityAttr.rich_note */
            rich_note?: { [key: string]: unknown };
            /** ActivityAttr.owner */
            owner?: string;
            /** ActivityAttr.lead */
            lead?: string;
            /** ActivityAttr.done */
            done: boolean;
            /** ActivityAttr.priority */
            priority: boolean;
            /** ActivityAttr.online_meet */
            online_meet: boolean;
            /**
             * ActivityAttr.feed_id
             * Format: uuid
             */
            feed_id: string;
            /**
             * ActivityAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            deleted_on?: components["schemas"]["Date"] | null;
            canceledOn?: components["schemas"]["Date"];
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity not found */
            error: "Activity not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
  };
  cancelActivity: {
    parameters: {
      path: {
        activityId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ActivityAttr.id
             * Format: uuid
             */
            id: string;
            /** ActivityAttr.name */
            name: string;
            /** ActivityAttr.type */
            type: string;
            /**
             * ActivityAttr.assigned_user_id
             * Format: uuid
             */
            assigned_user_id: string;
            /**
             * ActivityAttr.modified_user_id
             * Format: uuid
             */
            modified_user_id: string;
            /**
             * ActivityAttr.created_by
             * Format: uuid
             */
            created_by: string;
            /**
             * ActivityAttr.organization_id
             * Format: uuid
             */
            organization_id?: string;
            /**
             * ActivityAttr.deal_id
             * Format: uuid
             */
            deal_id?: string;
            /** ActivityAttr.contact_id */
            contact_id?: string;
            start_date: components["schemas"]["Date"];
            end_date: components["schemas"]["Date"];
            /** ActivityAttr.guests */
            guests: string;
            /** ActivityAttr.location */
            location?: string;
            /** ActivityAttr.conference_link */
            conference_link?: string;
            /** ActivityAttr.description */
            description?: string;
            /** ActivityAttr.free_busy */
            free_busy: string;
            /** ActivityAttr.notes */
            notes?: string;
            /** ActivityAttr.rich_note */
            rich_note?: { [key: string]: unknown };
            /** ActivityAttr.owner */
            owner?: string;
            /** ActivityAttr.lead */
            lead?: string;
            /** ActivityAttr.done */
            done: boolean;
            /** ActivityAttr.priority */
            priority: boolean;
            /** ActivityAttr.online_meet */
            online_meet: boolean;
            /**
             * ActivityAttr.feed_id
             * Format: uuid
             */
            feed_id: string;
            /**
             * ActivityAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            deleted_on?: components["schemas"]["Date"] | null;
            canceledOn?: components["schemas"]["Date"];
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity not found */
            error: "Activity not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
  };
  getActivityById: {
    parameters: {
      path: {
        activityId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /**
             * ActivityAttr.id
             * Format: uuid
             */
            id: string;
            /** ActivityAttr.name */
            name: string;
            /** ActivityAttr.type */
            type: string;
            /**
             * ActivityAttr.assigned_user_id
             * Format: uuid
             */
            assigned_user_id: string;
            /**
             * ActivityAttr.modified_user_id
             * Format: uuid
             */
            modified_user_id: string;
            /**
             * ActivityAttr.created_by
             * Format: uuid
             */
            created_by: string;
            /**
             * ActivityAttr.organization_id
             * Format: uuid
             */
            organization_id?: string;
            /**
             * ActivityAttr.deal_id
             * Format: uuid
             */
            deal_id?: string;
            /** ActivityAttr.contact_id */
            contact_id?: string;
            start_date: components["schemas"]["Date"];
            end_date: components["schemas"]["Date"];
            /** ActivityAttr.guests */
            guests: string;
            /** ActivityAttr.location */
            location?: string;
            /** ActivityAttr.conference_link */
            conference_link?: string;
            /** ActivityAttr.description */
            description?: string;
            /** ActivityAttr.free_busy */
            free_busy: string;
            /** ActivityAttr.notes */
            notes?: string;
            /** ActivityAttr.rich_note */
            rich_note?: { [key: string]: unknown };
            /** ActivityAttr.owner */
            owner?: string;
            /** ActivityAttr.lead */
            lead?: string;
            /** ActivityAttr.done */
            done: boolean;
            /** ActivityAttr.priority */
            priority: boolean;
            /** ActivityAttr.online_meet */
            online_meet: boolean;
            /**
             * ActivityAttr.feed_id
             * Format: uuid
             */
            feed_id: string;
            /**
             * ActivityAttr.tenant_id
             * Format: uuid
             */
            tenant_id: string;
            deleted_on?: components["schemas"]["Date"] | null;
            canceledOn?: components["schemas"]["Date"];
            created_at: components["schemas"]["Date"];
            updated_at: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity not found */
            error: "Activity not found";
          };
        };
      };
    };
  };
  updateActivity: {
    parameters: {
      path: {
        activityId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {
            /** ActivityAttrs.id */
            id: string;
            /** ActivityAttrs.name */
            name: string;
            /** ActivityAttrs.type */
            type: string;
            /** ActivityAttrs.assigned_user_id */
            assigned_user_id: string;
            /** ActivityAttrs.modified_user_id */
            modified_user_id: string;
            /** ActivityAttrs.created_by */
            created_by: string;
            /** ActivityAttrs.organization_id */
            organization_id?: string;
            /** ActivityAttrs.deal_id */
            deal_id?: string;
            /** ActivityAttrs.contact_id */
            contact_id?: string;
            start_date: components["schemas"]["Date"];
            end_date: components["schemas"]["Date"];
            /** ActivityAttrs.guests */
            guests: string;
            /** ActivityAttrs.location */
            location?: string;
            /** ActivityAttrs.conference_link */
            conference_link?: string;
            /** ActivityAttrs.description */
            description?: string;
            /** ActivityAttrs.free_busy */
            free_busy: string;
            /** ActivityAttrs.notes */
            notes?: string;
            /** ActivityAttrs.rich_note */
            rich_note?: { [key: string]: unknown };
            /** ActivityAttrs.owner */
            owner?: string;
            /** ActivityAttrs.lead */
            lead?: string;
            /** ActivityAttrs.done */
            done: boolean;
            /** ActivityAttrs.priority */
            priority: boolean;
            /** ActivityAttrs.online_meet */
            online_meet: boolean;
            /** ActivityAttrs.feed_id */
            feed_id: string;
            /** ActivityAttrs.tenant_id */
            tenant_id: string;
            deleted_on?: components["schemas"]["Date"] | null;
            canceledOn?: components["schemas"]["Date"];
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity not found */
            error: "Activity not found";
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** ActivityModifyBiz.name */
          name?: string;
          /** ActivityModifyBiz.type */
          type?: string;
          /**
           * ActivityModifyBiz.assigned_user_id
           * Format: uuid
           */
          assigned_user_id?: string;
          /**
           * ActivityModifyBiz.modified_user_id
           * Format: uuid
           */
          modified_user_id?: string;
          /**
           * ActivityModifyBiz.created_by
           * Format: uuid
           */
          created_by?: string;
          /**
           * ActivityModifyBiz.organization_id
           * Format: uuid
           */
          organization_id?: string;
          /**
           * ActivityModifyBiz.deal_id
           * Format: uuid
           */
          deal_id?: string;
          /** ActivityModifyBiz.contact_id */
          contact_id?: string;
          start_date?: components["schemas"]["Date"];
          end_date?: components["schemas"]["Date"];
          /** ActivityModifyBiz.guests */
          guests?: string;
          /** ActivityModifyBiz.location */
          location?: string;
          /** ActivityModifyBiz.conference_link */
          conference_link?: string;
          /** ActivityModifyBiz.description */
          description?: string;
          /** ActivityModifyBiz.free_busy */
          free_busy?: string;
          /** ActivityModifyBiz.notes */
          notes?: string;
          /** ActivityModifyBiz.rich_note */
          rich_note?: { [key: string]: unknown };
          /** ActivityModifyBiz.lead */
          lead?: string;
          /** ActivityModifyBiz.done */
          done?: boolean;
          /** ActivityModifyBiz.priority */
          priority?: boolean;
          /** ActivityModifyBiz.online_meet */
          online_meet?: boolean;
        };
      };
    };
  };
  createActivityOwners: {
    parameters: {
      path: {
        activityId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * ActivityOwnerCreateBiz.userId
           * Format: uuid
           */
          userId: string;
        }[];
      };
    };
  };
  deleteActivity: {
    parameters: {
      path: {
        activityId: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": {};
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": {
            error: "Bad request";
            errors: {
              /** @description Name of invalid key */
              path: string;
              /** @description Error code */
              error_code?: string;
              /** @description Description of the invalid input */
              message: string;
              /** @description Location of invalid key */
              location: string;
            }[];
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          "application/json": {
            errors?: {
              message?:
                | "No JWT provided"
                | "Invalid credentials"
                | "JWT format is invalid"
                | "Token expired"
                | "Token invalid";
              extensions?: {
                code?: "INVALID_CREDENTIALS";
              };
            }[];
          };
        };
      };
      /** Resource not found */
      404: {
        content: {
          "application/json": {
            /** Activity not found */
            error: "Activity not found";
          };
        };
      };
    };
  };
}

export interface external {}
